within ;
package HeamodynamicsDymola
  package Parts
    connector BloodFlowConnector "Connector for blood flow"
      flow Real Q "blood flow in ml/sec";
      Real Pressure "Pressure in torr";
      annotation(Icon(graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,0}, fillColor={255,0,0},
                fillPattern =                                                                                                 FillPattern.Solid)}));
    end BloodFlowConnector;

    connector BloodFlowInflow "Blood flow inflow"
      flow Real Q "blood inflow in ml/sec";
      Real Pressure "Pressure in torr";
      annotation(Icon(graphics={Rectangle(visible=true, origin={2.04082,-1.0101}, fillColor={255,0,0},
                fillPattern =                                                                                      FillPattern.Solid, extent={{-102.041,-98.9899},{97.9592,101.01}})}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end BloodFlowInflow;

    connector BloodFlowOutflow "Blood flow inflow"
      flow Real Q "blood flow outflow in ml/sec";
      Real Pressure "Pressure in torr";
      annotation(Icon(graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,0}, fillColor={255,255,255},
                fillPattern =                                                                                                   FillPattern.Solid)}));
    end BloodFlowOutflow;

    partial model BloodFlowOnePort
      BloodFlowInflow Inflow annotation(Placement(transformation(extent={{-100,-10},{-80,10}}, rotation=0)));
      BloodFlowOutflow Outflow annotation(Placement(transformation(extent={{80,-10},{100,10}}, rotation=0)));
      Real PressureDrop;
      Real BloodFlow;
    equation
      PressureDrop=Inflow.Pressure - Outflow.Pressure;
      Inflow.Q + Outflow.Q=0;
      BloodFlow=Inflow.Q;
      annotation(Icon(graphics));
    end BloodFlowOnePort;

    model BloodResistor
      parameter Real BloodResistance(start=1) "resistance in torr sec/ml";
      extends BloodFlowOnePort;
    equation
      PressureDrop=BloodFlow*BloodResistance;
      annotation(Diagram(coordinateSystem(extent={{-148.5,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-55,-20},{65,20}}),Rectangle(visible=true, origin={-75,0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}}),Rectangle(visible=true, origin={72.5,0}, fillColor={255,255,255}, extent={{-7.5,0},{7.5,0}})}), Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Text(visible=true, origin={-12.6699,181}, lineColor={0,0,255}, extent={{-197.33,-81},{202.67,-41}}, fontName="Arial", textString
                =                                                                                   "%name"),Text(visible=true, origin={0.8419,-77.2844},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "R=%BloodResistance"),Polygon(points={{-100,100},{-100,-100},{0,0},{-100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{100,100},{100,-100},{0,0},{100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-30,-40},{40,-100}}, lineColor={0,0,255}, textString
                =                                                                                   "R")}));
    end BloodResistor;

    model VariableBloodResistor
      extends BloodFlowOnePort;
      Modelica.Blocks.Interfaces.RealInput BloodResistance "in torr sec/ml" annotation(Placement(visible=true, transformation(origin={-10.0,67.9735}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={0,92.569}, extent={{-12.5685,-12.5685},{12.5685,12.5685}}, rotation=-90)));
    equation
      PressureDrop=BloodFlow*BloodResistance;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Line(visible=true, origin={-70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Line(visible=true, origin={70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Text(visible=true, extent={{-180,-140},{190,-110}}, fontName="Arial", textString
                =                                                                                   "%name", lineColor={0,0,0}),Line(visible=true, origin={0.0,50.0}, points={{0,30},{0,-50}}),Polygon(points={{-100,100},{0,0},{-100,-100},{-100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{100,100},{100,-100},{0,0},{100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-50,-40},{50,-100}}, lineColor={0,0,255}, textString
                =                                                                                   "R")}), Diagram(coordinateSystem(extent={{-148.5,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-60.0,-20.0},{60.0,20.0}}),Rectangle(visible=true, origin={-80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}}),Rectangle(visible=true, origin={80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}})}));
    end VariableBloodResistor;

    model VariableBloodConductance
      extends BloodFlowOnePort;
      Modelica.Blocks.Interfaces.RealInput BloodConductance "in torr ml/sec" annotation(Placement(visible=true, transformation(origin={-10.0,67.9735}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={0.0,92.5685}, extent={{-12.5685,-12.5685},{12.5685,12.5685}}, rotation=-90)));
    equation
      PressureDrop*BloodConductance=BloodFlow;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Line(visible=true, origin={-70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Line(visible=true, origin={70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Text(visible=true, extent={{-180,-140},{190,-110}}, fontName="Arial", textString
                =                                                                                   "%name", lineColor={0,0,0}),Line(visible=true, origin={0.0,50.0}, points={{0.0,30.0},{0.0,-30.0}}),Polygon(points={{-100,100},{0,0},{-100,-100},{-100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{100,100},{100,-100},{0,0},{100,100}}, lineColor={0,0,255}, smooth=Smooth.None, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-30,-40},{40,-90}}, lineColor={0,0,255}, textString
                =                                                                                   "G")}), Diagram(coordinateSystem(extent={{-148.5,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-60.0,-20.0},{60.0,20.0}}),Rectangle(visible=true, origin={-80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}}),Rectangle(visible=true, origin={80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}})}));
    end VariableBloodConductance;

    model Inductor
      extends BloodFlowOnePort;
      Modelica.Blocks.Interfaces.RealInput Inertance "in torr * sec^2/ml" annotation(Placement(visible=true, transformation(origin={-10.0,67.9735}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={0,82.5685}, extent={{-12.5685,-12.5685},{12.5685,12.5685}}, rotation=-90)));
    equation
      PressureDrop=der(BloodFlow)*Inertance;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Line(visible=true, origin={-70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Line(visible=true, origin={70.0,0.0}, points={{-20.0,0.0},{20.0,0.0}}),Text(visible=true, extent={{-210.0,-100.0},{210.0,-70.0}}, textString
                =                                                                                   "%name", fontName="Arial"),Line(visible=true, origin={0.0,50.0}, points={{0.0,30.0},{0.0,-30.0}}),Rectangle(visible=true,
                lineThickness =                                                                                                   1, extent={{-100.0,-55.0},{100.0,75.0}}),Rectangle(visible=true, lineColor={255,0,0}, fillColor={255,0,0}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid,
                lineThickness =                                                                                                   1, extent={{-55.0,-50.0},{65.0,70.0}}),Text(visible=true, origin={8.1183,52.9448},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-78.8574,-9.8385},{78.8574,9.8385}}, textString
                =                                                                                   "Inertance", fontName="Arial")}), Diagram(coordinateSystem(extent={{-148.5,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-60.0,-20.0},{60.0,20.0}}),Rectangle(visible=true, origin={-80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}}),Rectangle(visible=true, origin={80.0,0.0}, fillColor={255,255,255}, extent={{-20.0,0.0},{20.0,0.0}})}));
    end Inductor;

    model Valve
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-53,-9.6192},{-39,6.4128}}, origin={-51,53.5872}, rotation=0), iconTransformation(extent={{-106.0,-10.0},{-78.0,10.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{23.3333,-4.0629},{33.3333,10.8344}}, origin={66.6667,44.0629}, rotation=0), iconTransformation(extent={{70.0,-10.0},{100.0,12.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.BooleanOutput open(start=true) annotation(Placement(visible=true, transformation(origin={90.0,-57.3253}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={55,-110}, extent={{-10,-10},{10,10}}, rotation=-810)));
      Real q;
      Real dp;
      Real passableVariable;
    equation
      bloodFlowInflow.Q + bloodFlowOutflow.Q=0;
      q=bloodFlowInflow.Q;
      dp=bloodFlowInflow.Pressure - bloodFlowOutflow.Pressure;
      open=passableVariable > 0;
      if open then
        dp=0;
        q=passableVariable;
      else
        dp=passableVariable;
        q=0;
      end if;
      annotation(Icon(graphics={Rectangle(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                     FillPattern.Solid, extent={{42,-100},{70,100}}),Polygon(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, points={{-70,100},{-70,-100},{36,-12},{36,12},{-70,100}}),Text(visible=true, extent={{-166,-142},{174,-116}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true, origin={59.2492,-63.8442}, rotation=-90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-33.8442,-14.2492},{33.8442,14.2492}}, textString
                =                                                                                   "open", fontName="Arial")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Diagram(graphics={Text(visible=true, origin={-12.2043,-16.7529},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-62.2044,-66.7529},{62.2043,66.7529}}, fontSize=12, fontName="Arial",
                horizontalAlignment=                                                                                                    TextAlignment.Left, textString=
                                                                                                    "equation 
  bloodFlowInflow.Q + bloodFlowOutflow.Q=0;
  q=bloodFlowInflow.Q;
  dp=bloodFlowInflow.Pressure - bloodFlowOutflow.Pressure;
  open=passableVariable > 0;
  if open then
    dp=0;
    q=passableVariable;
  else
    dp=passableVariable;
    q=0;
  end if;", lineColor={0,0,0})}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end Valve;

    connector RealDiscreteOutput =discrete output Real
      "'output Real' as connector"                                                  annotation(defaultComponentName="y", Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={1,1}), graphics={Polygon(points={{-100,100},{100,0},{-100,-100},{-100,100}}, lineColor={0,0,127}, fillColor={255,255,255},
              fillPattern =                                                                                                   FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={1,1}), graphics={Polygon(points={{-100,50},{0,0},{-100,-50},{-100,50}}, lineColor={0,0,127}, fillColor={255,255,255},
              fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{30,110},{30,60}}, lineColor={0,0,127}, textString
              =                                                                                     "%name")}), Documentation(info="<html>
<p>
Connector with one output signal of type Real.
</p>
</html>"));
    model HeartIntervals
      Modelica.Blocks.Interfaces.RealInput HR annotation(Placement(transformation(extent={{-134,8},{-94,48}}), iconTransformation(extent={{-134,8},{-94,48}})));
      RealDiscreteOutput Tas "duration of atrial systole" annotation(Placement(transformation(extent={{100,36},{120,56}}), iconTransformation(extent={{100,36},{120,56}})));
      RealDiscreteOutput Tav "atrioventricular delay" annotation(Placement(transformation(extent={{100,64},{120,84}}), iconTransformation(extent={{100,6},{120,26}})));
      RealDiscreteOutput Tvs "duration of ventricular systole" annotation(Placement(transformation(extent={{100,4},{120,24}}), iconTransformation(extent={{100,-32},{120,-12}})));
      RealDiscreteOutput T0 "start time of cardiac cycle in sec" annotation(Placement(transformation(extent={{100,-66},{120,-46}}), iconTransformation(extent={{100,-66},{120,-46}})));
      discrete Real HP(start=0)
        "heart period - duration of cardiac cycle in sec";
      Boolean b(start=false);
    equation
      b=time - pre(T0) >= pre(HP);
      when {initial(),b} then
        T0=time;
        HP=60/HR;
        Tas=0.03 + 0.09*HP;
        Tav=0.01;
        Tvs=0.16 + 0.2*HP;
      end when;
      annotation(Diagram(graphics), Icon(graphics={Text(visible=true, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                               FillPattern.Solid, extent={{34.0,30.0},{88.0,60.0}}, textString
                =                                                                                   "Tas", fontName="Arial"),Text(visible=true, origin={6.1844,12.2128}, lineColor={0,0,255}, extent={{-122.1844,53.5603},{113.8156,82.0142}}, textString
                =                                                                                   "Heart Intervals", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, extent={{-94.0,12.0},{-30.0,48.0}}, textString
                =                                                                                   "HR", fontName="Arial"),Line(visible=true, points={{-80.0,-6.0},{-80.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-70.0,-6.0},{-70.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-60.0,-6.0},{-60.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-32.0,-6.0},{-32.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{30.0,-6.0},{30.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{0.0,-6.0},{0.0,-80.0}}, color={0,0,255}, thickness=0.5),Text(visible=true, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{38.0,0.0},{92.0,30.0}}, textString
                =                                                                                   "Tav", fontName="Arial"),Text(visible=true, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{38.0,-34.0},{92.0,-4.0}}, textString
                =                                                                                   "Tvs", fontName="Arial"),Text(visible=true, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{34.0,-68.0},{88.0,-38.0}}, textString
                =                                                                                   "T0", fontName="Arial"),Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}})}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end HeartIntervals;

    model AtrialElastance
      Modelica.Blocks.Interfaces.RealInput Tas "duration of atrial systole" annotation(Placement(transformation(extent={{-120,12},{-80,52}}), iconTransformation(extent={{-126,62},{-100,88}})));
      Modelica.Blocks.Interfaces.RealOutput Et "elasticity (torr/ml)" annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={-1.3229,2.3813}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput T0 "time of start of cardiac cycle "
                                                                                annotation(Placement(transformation(extent={{-120,-30},{-80,10}}), iconTransformation(extent={{-126,-54},{-100,-28}})));
      parameter Real EMIN=0.05 "Diastolic elastance (torr/ml)";
      parameter Real EMAX=0.15 "Maximum systolic elastance (tor/ml)";
    equation
      if time - T0 < Tas then
        Et=EMIN + (EMAX - EMIN)*sin(Modelica.Constants.pi*(time - T0)/Tas);
      else
        Et=EMIN;
      end if annotation(Icon(graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}),Text(extent={{-134,122},{126,98}}, lineColor={0,0,255}, textString
                =                                                                                   "%name"),Text(extent={{-122,-34},{-50,-46}}, lineColor={0,0,255}, textString
                =                                                                                   "T0"),Text(extent={{-112,82},{-40,70}}, lineColor={0,0,255}, textString
                =                                                                                   "Tas"),Text(extent={{56,36},{124,24}}, lineColor={0,0,255}, textString
                =                                                                                   "Et"),Text(extent={{-52,62},{116,80}}, lineColor={0,0,255}, textString
                =                                                                                   "Atrial elastance"),Line(points={{-62,-46},{-52,-18},{-36,8},{-16,26},{10,30},{42,2},{62,-42}}, color={0,0,255}, smooth=Smooth.Bezier),Line(points={{62,-42},{86,-42},{100,-42}}, color={0,0,255}, smooth=Smooth.Bezier)}), Diagram(graphics));
      annotation(Icon(graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-1.1376,11.1636}, fillPattern=FillPattern.Solid, extent={{-88.8624,-11.1636},{88.8624,11.1636}}, textString="Atrial Elastance", fontName="Arial"),Text(visible=true, origin={-73.9995,75.5378}, fillPattern=FillPattern.Solid, extent={{-20.0,-10.0},{20.0,10.0}}, textString="Tas", fontName="Arial"),Text(visible=true, origin={-76.4595,-41.3045}, fillPattern=FillPattern.Solid, extent={{-16.4595,-11.3045},{16.4595,11.3045}}, textString="T0", fontName="Arial"),Text(visible=true, origin={80.0,33.5344}, fillPattern=FillPattern.Solid, extent={{-16.0792,-11.3832},{16.0792,11.3832}}, textString="Et", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Diagram(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end AtrialElastance;

    model VentricularElastance
      Modelica.Blocks.Interfaces.RealInput Tas "duration of atrial systole" annotation(Placement(transformation(extent={{-120,12},{-80,52}}), iconTransformation(extent={{-126,62},{-100,88}})));
      Modelica.Blocks.Interfaces.RealOutput Et "elasticity (torr/ml)" annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput T0 "time of start of cardiac cycle "
                                                                                annotation(Placement(transformation(extent={{-120.0,-30.0},{-80.0,10.0}}, origin={0.0,-40.0}, rotation=0), iconTransformation(extent={{-126.0,-54.0},{-100.0,-28.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tav "atrioventricular delay" annotation(Placement(transformation(extent={{-120.0,12.0},{-80.0,52.0}}, origin={0.0,-36.8813}, rotation=0), iconTransformation(extent={{-126.0,24.0},{-100.0,50.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tvs
        "duration of ventricular systole"                                        annotation(Placement(transformation(extent={{-120,50},{-80,90}}), iconTransformation(extent={{-126,-14},{-100,12}})));
      Modelica.Blocks.Interfaces.RealOutput Et0 "elasticity (torr/ml)" annotation(Placement(transformation(extent={{94,-8},{114,12}}), iconTransformation(extent={{100,-18},{120,2}})));
      Modelica.Blocks.Interfaces.RealOutput HeartInterval
        "elasticity (torr/ml)"                                                   annotation(Placement(transformation(extent={{96,-30},{116,-10}}), iconTransformation(extent={{100,-50},{120,-30}})));
      constant Real Kn=0.57923032735652;
      parameter Real EMIN=0 "Diastolic elastance (torr/ml)";
      parameter Real EMAX=1 "Maximum systolic elastance (tor/ml)";
    equation
      HeartInterval=time - T0;
      Et=EMIN + (EMAX - EMIN)*Et0;
      if HeartInterval >= Tas + Tav and HeartInterval < Tas + Tav + Tvs then
        Et0=(HeartInterval - (Tas + Tav))/Tvs*sin(Modelica.Constants.pi*(HeartInterval - (Tas + Tav))/Tvs)/Kn;
      else
        Et0=0;
      end if annotation(Icon(graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}),Text(extent={{-134,122},{126,98}}, lineColor={0,0,255}, textString
                =                                                                                   "%name"),Text(extent={{-122,-34},{-50,-46}}, lineColor={0,0,255}, textString
                =                                                                                   "T0"),Text(extent={{-110,48},{-58,34}}, lineColor={0,0,255}, textString
                =                                                                                   "Tav"),Text(extent={{-110,82},{-58,68}}, lineColor={0,0,255}, textString
                =                                                                                   "Tas"),Text(extent={{-112,8},{-60,-6}}, lineColor={0,0,255}, textString
                =                                                                                   "Tvs"),Text(extent={{56,36},{124,24}}, lineColor={0,0,255}, textString
                =                                                                                   "Et"),Text(extent={{-54,62},{114,80}}, lineColor={0,0,255}, textString
                =                                                                                   "Ventricular elastance"),Line(points={{-66,-60},{-54,-32},{-36,0},{0,46},{28,48},{40,0},{56,-60}}, color={0,0,255}, smooth=Smooth.Bezier),Line(points={{56,-60},{90,-60},{100,-60}}, color={0,0,255}, smooth=Smooth.Bezier)}), Diagram(graphics));
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-1.2605,16.0534}, fillPattern=FillPattern.Solid, extent={{-138.7395,-10.1077},{138.7395,10.1077}}, textString="Ventricular Elastance", fontName="Arial"),Text(visible=true, origin={-82.7938,75.0}, fillPattern=FillPattern.Solid, extent={{-15.0129,-5.0},{15.0129,5.0}}, textString="Tas", fontName="Arial"),Text(visible=true, origin={-83.2397,38.647}, fillPattern=FillPattern.Solid, extent={{-10.1077,-6.8375},{10.1077,6.8375}}, textString="Tav", fontName="Arial"),Text(visible=true, origin={-83.7547,0.0}, fillPattern=FillPattern.Solid, extent={{-11.971,-6.7837},{11.971,6.7837}}, textString="Tvs", fontName="Arial"),Text(visible=true, origin={-83.537,-41.4712}, fillPattern=FillPattern.Solid, extent={{-8.324,-5.7971},{8.324,5.7971}}, textString="T0", fontName="Arial"),Text(visible=true, origin={74.3785,40.4459}, fillPattern=FillPattern.Solid, extent={{-11.155,-6.8223},{11.155,6.8223}}, textString="Et", fontName="Arial"),Text(visible=true, origin={77.0273,-6.8223}, fillPattern=FillPattern.Solid, extent={{-11.155,-6.8223},{11.155,6.8223}}, textString="Et0", fontName="Arial"),Text(visible=true, origin={57.2941,-44.6898}, fillPattern=FillPattern.Solid, extent={{-37.2941,-22.8089},{37.2941,22.8089}}, textString="HeartInterval", fontName="Arial")}), Diagram(graphics));
    end VentricularElastance;

    block Constant "Generate constant signal of type Real"
      parameter Real k(start=1) "Constant output value";
      Modelica.Blocks.Interfaces.RealOutput y annotation(Placement(transformation(extent={{100,-8},{120,12}}), iconTransformation(extent={{100,-8},{120,12}})));
    equation
      y=k;
      annotation(Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={2,2}, initialScale=0.04), graphics={Rectangle(visible=true, lineColor={0,0,255}, fillColor={255,255,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100,-80},{100,100}}),Text(visible=true, origin={-4,24.2353}, lineColor={0,0,255}, extent={{-176.0,-148.2353},{172.0,-112.2353}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(extent={{-100,68},{100,-28}}, lineColor={0,128,0}, textString
                =                                                                                   "%k")}), Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={2,2}, initialScale=0.04), graphics={Text(extent={{-100,-100},{100,100}}, lineColor={0,0,0}, textString="")}), Documentation(info="<html>
<p>
The Real output y is a constant signal:
</p>
</html>"));
    end Constant;

    model BloodElasticCompartment "Elastic compartment with unstressed volume"
      Modelica.Blocks.Interfaces.RealInput Elastance "\"in torr/ml\"" annotation(Placement(visible=true, transformation(origin={0.0957,88.3047}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-90), iconTransformation(origin={65.0535,91.446}, extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Volume(start=V0) annotation(Placement(visible=true, transformation(origin={-67.3852,-78.2262}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90), iconTransformation(origin={-70,-67.9715}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput ExternalPressure "\"in torr\"" annotation(Placement(visible=true, transformation(origin={0.0957,88.3047}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-90), iconTransformation(origin={0.0535,111.446}, extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput UnstressedVolume "in ml" annotation(Placement(visible=true, transformation(origin={0.0957,88.3047}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-90), iconTransformation(origin={-59.947,91.446}, extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Pressure "Blood pressure in torr" annotation(Placement(visible=true, transformation(origin={-67.3852,-78.2262}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90), iconTransformation(origin={80,-67.9715}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      BloodFlowConnector bloodFlowInflow annotation(Placement(transformation(extent={{-10.0,-110.0},{10.0,-90.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{-10.0,-110.0},{10.0,-90.0}}, origin={-100.0,104.9415}, rotation=0), visible=true));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(visible=true, transformation(origin={157.1625,5.3065}, extent={{-14.85,-10.5},{14.85,10.5}}, rotation=0), iconTransformation(origin={105.8333,5.0538}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume(start=V0) annotation(Placement(visible=true, transformation(origin={-67.3852,-78.2262}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90), iconTransformation(origin={0,-107.972}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      parameter Real V0=1 "initial volume in ml";
      Real TransmuralPressure;
    equation
      bloodFlowInflow.Pressure=bloodFlowOutflow.Pressure;
      bloodFlowInflow.Pressure=Pressure;
      TransmuralPressure=Pressure - ExternalPressure;
      der(Volume)=bloodFlowInflow.Q + bloodFlowOutflow.Q;
      StressedVolume=Volume - UnstressedVolume;
      if StressedVolume > 0 then
        TransmuralPressure=Elastance*StressedVolume;
      else
        TransmuralPressure=0;
      end if;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true,  initialScale=0.1, grid={10,10}), graphics={Ellipse(visible=true, origin={2.9379,0.0}, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-102.9379,-100.0},{102.9379,100.0}}),Text(visible=true, origin={-1.16304,79.0642}, extent={{-147.185,-57.4195},{151.163,-29.0642}},
                                                                                                    fontName=
                  "Arial",
              textString="%name",
              lineColor={0,0,0}),                                                                                              Text(visible=true, origin={-79.158,-2.0682},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, textString
                =                                                                                   "Volume", fontName="Arial"),Text(visible=true, origin={-99.158,127.932},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.555,-50.2772},{99.1581,-27.9317}}, textString
                =                                                                                   "UV", fontName="Arial"),Text(visible=true, origin={125.594,125.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-85.5943,-45.0001},{84.4058,-25.0002}}, textString
                =                                                                                   "Elastance", fontName="Arial"),Text(visible=true, origin={0.842,127.932},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.555,-50.2772},{99.1581,-27.9317}}, textString
                =                                                                                   "Pext", fontName="Arial"),Text(visible=true, origin={80.842,-2.0682},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, textString
                =                                                                                   "Pressure", fontName="Arial"),Text(visible=true, origin={10.842,-42.0682},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, fontName="Arial", textString
                =                                                                                   "StressedVolume", lineColor={0,0,0})}), Diagram(coordinateSystem(extent={{-148.5,-105},{148.5,105}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics));
    end BloodElasticCompartment;

    model RightHeart
      Constant VRAU(k=30) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={0.0,-20.0}, rotation=0), visible=true));
      Constant VRVU(k=40) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={12.0,-13.7946}, rotation=0), visible=true));
      AtrialElastance rightAtrialElastance(EMIN=0.05, EMAX=0.15) annotation(Placement(transformation(extent={{-44.0,16.0},{-10.0,52.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      VentricularElastance rightVentricularElastance(EMIN=0.057, EMAX=0.49) annotation(Placement(transformation(extent={{28.0,16.0},{64.0,52.0}}, origin={2.0,10.0}, rotation=0), visible=true));
      Constant RRAOUT(k=0.003) annotation(Placement(transformation(extent={{-38.4945,-81.4825},{-27.4961,-71.2972}}, origin={8.4945,34.3898}, rotation=0), visible=true));
      Constant RRV(k=0.003) annotation(Placement(transformation(extent={{95.4865,-98.5667},{107.8073,-86.2458}}, origin={-41.6469,51.5667}, rotation=0), visible=true));
      BloodFlowInflow fromCentralVeins annotation(Placement(transformation(extent={{-116.0,-90.0},{-88.0,-70.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{-98.0,-60.0},{-68.0,-38.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodFlowOutflow toPulmonaryArtery annotation(Placement(transformation(extent={{94.0,-90.0},{122.0,-70.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{76.0,-54.0},{106.0,-32.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tas annotation(Placement(transformation(extent={{-110.0,74.0},{-96.0,88.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{-94.0,56.0},{-78.0,72.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tav annotation(Placement(transformation(extent={{0.0,38.0},{14.0,52.0}}, origin={-50.0,35.0}, rotation=0), iconTransformation(extent={{-94.0,36.0},{-78.0,52.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tvs annotation(Placement(transformation(extent={{0.0,27.0},{14.0,41.0}}, origin={-57.0,36.0}, rotation=0), iconTransformation(extent={{-94.0,16.0},{-78.0,32.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput PTH "Intrathoracic pressure (torr)" annotation(Placement(transformation(extent={{-110.0,-2.0},{-96.0,12.0}}, origin={0.0,-2.0}, rotation=0), iconTransformation(extent={{-62.0,78.0},{-46.0,94.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      CardiacValve tricuspidValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={-0.0,10.0}, rotation=0), visible=true));
      CardiacValve pulmonicValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-6.5264,10.0}, rotation=0), visible=true));
      Constant CRABackflow(k=0) annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-6.5306,20.0}, rotation=0), visible=true));
      Constant CRVBackflow(k=0) annotation(Placement(transformation(extent={{111.0,-78.0},{123.0,-66.0}}, origin={-57.0,48.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput T0 annotation(Placement(transformation(extent={{-100.0,-10.0},{-80.0,10.0}}, origin={0.0,13.7416}, rotation=0), iconTransformation(extent={{-94.0,-4.0},{-78.0,12.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodElasticCompartment RightAtrium(V0=40) annotation(Placement(visible=true, transformation(origin={-64.3077,-70.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment RightVentricle(V0=130) annotation(Placement(visible=true, transformation(origin={27.7449,-71.0}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
    equation
      connect(RightVentricle.bloodFlowOutflow,pulmonicValve.bloodFlowInflow) annotation(Line(visible=true, origin={61.4177,-69.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(tricuspidValve.bloodFlowOutflow,RightVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={3.587,-69.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(PTH,RightVentricle.ExternalPressure) annotation(Line(visible=true, origin={-15.1378,-14.306}, points={{
              -87.8622,17.306},{42.8938,17.306},{42.8938,-33.5746}},                                                                                                    color={0,0,127}));
      connect(RightVentricle.UnstressedVolume,VRVU.y) annotation(Line(visible=true, origin={10.2298,-35.4216}, points={{5.07915,
              -16.608},{5.07915,3.8854},{-2.2121,3.8854},{-2.2121,3.0837},{
              -1.8298,3.0837},{-1.8298,3.707}},                                                                                                    color={0,0,127}));
      connect(rightVentricularElastance.Et,RightVentricle.Elastance) annotation(Line(visible=true, origin={59.0108,2.5265}, points={{8.7892,
              48.6735},{28.3819,48.6735},{28.3819,-9.7424},{-12.241,-9.7424},{
              -17.7706,-9.7424},{-17.7706,-54.5561}},                                                                                                    color={0,0,127}));
      connect(fromCentralVeins,RightAtrium.bloodFlowInflow) annotation(Line(visible=true, origin={-89.8024,-69.8599}, points={{
              -12.1976,-0.1401},{3.7239,-0.1401},{3.7239,0.140109},{4.7498,
              0.140109}},                                                                                                    color={0,0,255}, thickness=1));
      connect(pulmonicValve.bloodFlowOutflow,toPulmonaryArtery) annotation(Line(visible=true, origin={97.4368,-70.0}, points={{-10.5632,0.0},{10.5632,0.0}}, color={0,0,255}, thickness=1));
      connect(tricuspidValve.inflowConductanceValue,CRABackflow.y) annotation(Line(visible=true, origin={-12.9347,-35.6765}, points={{6.9347,-23.5235},{7.0653,7.28},{-7.1959,7.28},{-7.1959,7.7565}}, color={0,0,127}));
      connect(CRVBackflow.y,pulmonicValve.inflowConductanceValue) annotation(Line(visible=true, origin={0.0,10.0}, points={{66.6,-33.88},{72.4263,-33.88},{81.4736,-33.5185},{81.4736,-69.2}}, color={0,0,127}));
      connect(RRV.y,pulmonicValve.outflowResistance) annotation(Line(visible=true, origin={0.0,10.0}, points={{66.7764,
              -50.7163},{72.4736,-50.7163},{72.4736,-69.4},{72.4736,-69.4}},                                                                                                    color={0,0,127}));
      connect(tricuspidValve.outflowResistance,RRAOUT.y) annotation(Line(visible=true, origin={-17.6903,-51.8393}, points={{2.6903,
              -7.5607},{2.6903,1.8393},{2.6903,9.9411},{-0.76138,9.9411},{
              -0.76138,9.9411}},                                                                                                    color={0,0,127}));
      connect(RightAtrium.bloodFlowOutflow,tricuspidValve.bloodFlowInflow) annotation(Line(visible=true, origin={-27.2007,-69.8482}, points={{-15.152,
              0.151706},{3.9757,0.151706},{3.9757,-0.1518},{7.2007,-0.1518}},                                                                                                    color={0,0,255}, thickness=1));
      connect(RightAtrium.ExternalPressure,PTH) annotation(Line(visible=true, origin={-83.1297,-9.8122}, points={{18.8331,
              -37.8133},{18.8331,13.0192},{-19.8703,13.0192},{-19.8703,12.8122}},                                                                                                    color={0,0,127}));
      connect(RightAtrium.Elastance,rightAtrialElastance.Et) annotation(Line(visible=true, origin={-16.5493,18.5247}, points={{
              -34.2631,-70.2992},{-34.2631,-26.8097},{1.8503,-26.8097},{1.8503,
              1.4753},{14.9458,1.4753},{14.9458,28.7796},{14.9458,30.8753},{
              13.8768,30.8753},{8.2493,30.8753}},                                                                                                    color={0,0,127}));
      connect(T0,rightVentricularElastance.T0) annotation(Line(visible=true, origin={7.1437,10.0}, points={{-97.1437,3.7416},{0,3.7416},{0,26.62},{20.5163,26.62}}, color={0,0,127}));
      connect(rightAtrialElastance.T0,T0) annotation(Line(visible=true, origin={0.0,13.38}, points={{-46.21,23.24},{-78.0,23.24},{-78.0,0.0},{-90.0,0.3616}}, color={0,0,127}));
      connect(VRAU.y,RightAtrium.UnstressedVolume) annotation(Line(visible=true, origin={-79.4637,-44.3659}, points={{-6.1363,
              8.4459},{2.2267,8.4459},{2.2267,-7.40862},{2.72005,-7.40862}},                                                                                                    color={0,0,127}));
      connect(Tvs,rightVentricularElastance.Tvs) annotation(Line(visible=true, origin={-8.1469,21.5813}, points={{-41.8531,48.4187},{13.7031,48.4187},{13.7031,22.2387},{35.8069,22.2387}}, color={0,0,127}));
      connect(rightVentricularElastance.Tav,Tav) annotation(Line(visible=true, origin={-1.0583,8.68}, points={{28.7183,41.98},{11.0583,41.98},{11.0583,71.32},{-41.9417,71.32}}, color={0,0,127}));
      connect(Tas,rightVentricularElastance.Tas) annotation(Line(visible=true, origin={0.0,10.0}, points={{-103.0,81.0},{14.0,81.0},{14.0,47.5},{27.66,47.5}}, color={0,0,127}));
      connect(Tas,rightAtrialElastance.Tas) annotation(Line(visible=true, origin={0.0,10.0}, points={{-103.0,81.0},{-58.0,81.0},{-58.0,47.5},{-46.21,47.5}}, color={0,0,127}));
      annotation(Diagram(graphics={Text(visible=true, origin={-74.8778,94.3012},
                fillPattern=                                                                 FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "duration of atrial systole", fontName="Arial"),Text(visible=true, origin={-14.0515,82.3062},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-20.4464,-3.8937},{20.4464,3.8937}}, textString=
                                                                                                    "atrioventricular delay", fontName="Arial"),Text(visible=true, origin={-20.0,73.7344},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-25.4525,-3.7344},{25.4525,3.7344}}, textString=
                                                                                                    "duration of ventricular systole", fontName="Arial"),Text(visible=true, origin={-54.9121,15.6988},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "start time of cardiac cycle ", fontName="Arial"),Text(visible=true, origin={-60.0,5.6988},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "Intrathoracic pressure", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-50.0,8.0},{84.0,36.0}}, textString
                =                                                                                   "Right Heart", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-94.0,56.0},{-42.0,72.0}}, textString
                =                                                                                   "Tas", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-94.0,38.0},{-42.0,54.0}}, textString
                =                                                                                   "Tav", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-92.0,16.0},{-40.0,32.0}}, textString
                =                                                                                   "Tvs", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-90.0,-2.0},{-38.0,14.0}}, textString
                =                                                                                   "T0", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-58.0,78.0},{-6.0,94.0}}, textString
                =                                                                                   "PTH", fontName="Arial"),Text(visible=true, origin={-0.0,-111.7427}, lineColor={0,1,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-11.7427},{100.0,11.7427}}, textString
                =                                                                                   "%name", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end RightHeart;

    model CardiacValve

      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-116,-13},{-82,12}}), iconTransformation(extent={{-114,-10},{-86,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{84,-12},{118,12}}), iconTransformation(extent={{80,-10},{108,10}})));
      Modelica.Blocks.Interfaces.RealInput outflowResistance "in torr sec / ml"
                                                                                annotation(Placement(transformation(extent={{-13,-13},{13,13}}, rotation=0, origin={15,77}), iconTransformation(extent={{-20,-20},{20,20}}, rotation=270, origin={-50,106})));
      Modelica.Blocks.Interfaces.RealInput inflowConductanceValue(start=0)
        "in ml/sec/torr"                                                                    annotation(Placement(transformation(extent={{-6,-16},{22,12}}), iconTransformation(extent={{-20,-20},{20,20}}, rotation=270, origin={40,108})));
      Modelica.Blocks.Interfaces.BooleanOutput Open annotation(Placement(visible=true, transformation(origin={17.7062,14.9221}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110.0,80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-360)));

      Real q;
      Real dp;
      Boolean open( start=true);
      Real passableVariable;
    equation
      bloodFlowInflow.Q + bloodFlowOutflow.Q = 0;
      q = bloodFlowInflow.Q;
      dp = bloodFlowInflow.Pressure - bloodFlowOutflow.Pressure;
      open = passableVariable > 0;

      if open then
        dp = passableVariable * outflowResistance;
        q = passableVariable;
      else // open = false
        dp = passableVariable;
        q = passableVariable * inflowConductanceValue;
      end if;

      open = Open;

      annotation(Icon(graphics={Polygon(visible=true, fillColor={255,170,170},
                fillPattern =                                                              FillPattern.Solid, points={{-100.0,100.0},{80.0,0.0},{-100.0,-100.0},{-100.0,100.0}}),Rectangle(visible=true, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{80.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-0.5946,-10.162}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-114.0,-126.0},{108.0,-104.0}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true, origin={89.2978,67.1606}, rotation=-270,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-37.1606,-10.7022},{37.1606,10.7022}}, textString
                =                                                                                   "Open", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Diagram(graphics));
    end CardiacValve;

    model CardiacValveOldByTwoIdealDiods
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-116,-13},{-82,12}}), iconTransformation(extent={{-114,-10},{-86,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{84,-12},{118,12}}), iconTransformation(extent={{80,-10},{108,10}})));
      Valve outflowValve(open(fixed=true, start=true)) annotation(Placement(transformation(extent={{-40,23},{8,57}})));
      Valve backflowValve(open(fixed=true, start=false)) annotation(Placement(transformation(extent={{10,-60},{-40,-22}})));
      VariableBloodResistor outflowBloodResistor annotation(Placement(transformation(extent={{39,29},{61,51}})));
      Modelica.Blocks.Interfaces.RealInput outflowResistance "in torr sec / ml"
                                                                                annotation(Placement(transformation(extent={{-13,-13},{13,13}}, rotation=0, origin={15,77}), iconTransformation(extent={{-20,-20},{20,20}}, rotation=270, origin={-50,106})));
      Modelica.Blocks.Interfaces.RealInput inflowConductanceValue(start=0)
        "in ml/sec/torr"                                                                    annotation(Placement(transformation(extent={{-6,-16},{22,12}}), iconTransformation(extent={{-20,-20},{20,20}}, rotation=270, origin={40,108})));
      VariableBloodConductance variableBloodConductance annotation(Placement(transformation(extent={{60,-52},{38,-30}})));
      Modelica.Blocks.Interfaces.BooleanOutput Open annotation(Placement(visible=true, transformation(origin={17.7062,14.9221}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110.0,80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-360)));
    equation
      connect(outflowValve.open,Open) annotation(Line(visible=true, origin={7.0944,16.6055}, points={{-9.8944,
              4.6945},{-9.8944,-1.9064},{10.6118,-1.9064},{10.6118,-1.6834}},                                                                                                 color={255,0,255}));
      connect(backflowValve.bloodFlowOutflow,bloodFlowInflow) annotation(Line(points={{-36.25,-40.81},{-80,-40.81},{-80,-0.5},{-99,-0.5}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(bloodFlowInflow,outflowValve.bloodFlowInflow) annotation(Line(points={{-99,-0.5},{-80,-0.5},{-80,40},{-38.08,40}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(outflowValve.bloodFlowOutflow,outflowBloodResistor.Inflow) annotation(Line(points={{4.4,
              40.17},{23.2,40.17},{23.2,40},{40.1,40}},                                                                                         color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(outflowBloodResistor.Outflow,bloodFlowOutflow) annotation(Line(points={{59.9,40},{70,40},{70,0},{101,0}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(outflowResistance,outflowBloodResistor.BloodResistance) annotation(Line(points={{15,77},
              {50,77},{50,50.1826}},                                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(inflowConductanceValue,variableBloodConductance.BloodConductance) annotation(Line(points={{8,-2},{
              49,-2},{49,-30.8175}},                                                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(backflowValve.bloodFlowInflow,variableBloodConductance.Outflow) annotation(Line(points={{8,-41},{39.1,-41}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(bloodFlowOutflow,variableBloodConductance.Inflow) annotation(Line(points={{101,0},{70,0},{70,-41},{58.9,-41}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      annotation(Icon(graphics={Polygon(visible=true, fillColor={255,170,170},
                fillPattern =                                                              FillPattern.Solid, points={{-100.0,100.0},{80.0,0.0},{-100.0,-100.0},{-100.0,100.0}}),Rectangle(visible=true, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{80.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-0.5946,-10.162}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-114.0,-126.0},{108.0,-104.0}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true, origin={89.2978,67.1606}, rotation=-270,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-37.1606,-10.7022},{37.1606,10.7022}}, textString
                =                                                                                   "Open", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Diagram(graphics));
    end CardiacValveOldByTwoIdealDiods;

    model LeftHeart
      Constant VLAU(k=30) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={0.0,-11.915}, rotation=0), visible=true));
      Constant VLVU(k=60) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={8.0,-8.0}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.AtrialElastance leftAtrialElastance(EMIN=0.12, EMAX=0.28) annotation(Placement(transformation(extent={{-44.0,20.0},{-10.0,56.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      VentricularElastance leftVentricularElastance(EMIN=0.09, EMAX=4) annotation(Placement(transformation(extent={{28.0,18.0},{64.0,54.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      Constant RLAOUT(k=0.003) annotation(Placement(transformation(extent={{-26.0,-52.0},{-18.0,-44.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      Constant RLV(k=0.008) annotation(Placement(transformation(extent={{62.0,-48.0},{70.0,-40.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      BloodFlowInflow fromPulmonaryVeins annotation(Placement(transformation(extent={{-116.0,-91.0},{-84.0,-69.0}}, origin={0.0,11.0}, rotation=0), iconTransformation(extent={{-98.0,-60.0},{-68.0,-38.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodFlowOutflow toAorta annotation(Placement(transformation(extent={{94.0,-91.0},{126.0,-69.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{76.0,-54.0},{106.0,-32.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tas annotation(Placement(transformation(extent={{-110.0,74.0},{-96.0,88.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{-94.0,56.0},{-78.0,72.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tav annotation(Placement(transformation(extent={{0.0,38.0},{14.0,52.0}}, origin={-47.0,35.0}, rotation=0), iconTransformation(extent={{-94.0,36.0},{-78.0,52.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tvs annotation(Placement(transformation(extent={{0.0,27.0},{14.0,41.0}}, origin={-54.0,39.0}, rotation=0), iconTransformation(extent={{-94.0,16.0},{-78.0,32.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput T0 annotation(Placement(transformation(extent={{-112.0,62.0},{-98.0,76.0}}, origin={-2.0,-2.0}, rotation=0), iconTransformation(extent={{-94.0,-4.0},{-78.0,12.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput PTH "Intrathoracic pressure (torr)" annotation(Placement(transformation(extent={{-110.0,-2.0},{-96.0,12.0}}, origin={0.0,10.0}, rotation=0), iconTransformation(extent={{-62.0,78.0},{-46.0,94.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      CardiacValve aorticValve annotation(Placement(transformation(extent={{70.0,-90.0},{90.0,-70.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      Constant CLVBackflow(k=0) annotation(Placement(transformation(extent={{-4.0,-4.0},{4.0,4.0}}, rotation=180, origin={90.0,-40.0}), visible=true));
      CardiacValve mitralValve annotation(Placement(transformation(extent={{-18.0,-90.0},{2.0,-70.0}}, origin={0.0,10.0}, rotation=0), visible=true));
      Constant RLABackflow(k=0) annotation(Placement(transformation(extent={{-4.0,-4.0},{4.0,4.0}}, rotation=180, origin={4.0,-40.0}), visible=true));
      BloodElasticCompartment LeftAtrium(V0=40) annotation(Placement(visible=true, transformation(origin={-58.1408,-71.7477}, extent={{-26.6025,-26.6025},{26.6025,26.6025}}, rotation=0)));
      BloodElasticCompartment LeftVentricle(V0=130) annotation(Placement(visible=true, transformation(origin={34.3975,-71.73}, extent={{-26.6025,-26.6025},{26.6025,26.6025}}, rotation=0)));
    equation
      connect(Tas,leftAtrialElastance.Tas) annotation(Line(visible=true, origin={2.4805,9.0}, points={{-105.4805,82.0},{-58.0,82.0},{-58.0,52.5},{-48.6905,52.5}}, color={0,0,127}));
      connect(leftAtrialElastance.T0,T0) annotation(Line(visible=true, origin={-2.0,-0.62}, points={{-44.21,41.24},{-78,41.24},{-78,67.62},{-105,67.62}}, color={0,0,127}));
      connect(LeftAtrium.Elastance,leftAtrialElastance.Et) annotation(Line(visible=true, origin={-17.1608,30.3604}, points={{
              -23.6741,-77.7812},{-23.6741,-6.3074},{12.0829,-6.3074},{12.0829,
              22.8235},{7.1608,22.8235},{7.1608,23.0396},{8.8608,23.0396}},                                                                                                    color={0,0,127}));
      connect(fromPulmonaryVeins,LeftAtrium.bloodFlowInflow) annotation(Line(visible=true, origin={-94.9144,-69.9554}, points={{-5.0856,
              0.9554},{-5.0856,-0.477737},{10.1711,-0.477737}},                                                                                                    color={255,0,0}, thickness=1));
      connect(LeftAtrium.bloodFlowOutflow,mitralValve.bloodFlowInflow) annotation(Line(visible=true, origin={-36.6091,-70.2016}, points={{6.6226,
              -0.201663},{1.3841,-0.201663},{1.3841,0.2016},{18.6091,0.2016}},                                                                                                    color={255,0,0}, thickness=1));
      connect(mitralValve.bloodFlowOutflow,LeftVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={5.6796,-70.2077}, points={{-4.2796,
              0.2077},{1.0821,0.2077},{1.0821,-0.207737},{2.1154,-0.207737}},                                                                                                    color={255,0,0}, thickness=1));
      connect(LeftVentricle.bloodFlowOutflow,aorticValve.bloodFlowInflow) annotation(Line(visible=true, origin={66.5255,-70.1928}, points={{-3.9737,
              -0.192763},{0.2495,-0.192763},{0.2495,0.1928},{3.4745,0.1928}},                                                                                                    color={255,0,0}, thickness=1));
      connect(LeftVentricle.Elastance,leftVentricularElastance.Et) annotation(Line(visible=true, origin={64.843,19.5334}, points={{
              -13.1396,-66.9365},{-13.1396,0.4666},{12.6612,0.4666},{12.6612,
              33.6666},{0.957,33.6666}},                                                                                                    color={0,0,127}));
      connect(PTH,LeftVentricle.ExternalPressure) annotation(Line(visible=true, origin={-1.3579,-13.6719}, points={{
              -101.642,28.6719},{36.8145,28.6719},{36.8145,-28.4107},{35.7696,
              -28.4107}},                                                                                                    color={0,0,127}));
      connect(PTH,LeftAtrium.ExternalPressure) annotation(Line(visible=true, origin={-70.0154,-13.4134}, points={{
              -32.9846,28.4134},{13.0899,28.4134},{13.0899,-28.6869},{11.8888,
              -28.6869}},                                                                                                    color={0,0,127}));
      connect(VLAU.y,LeftAtrium.UnstressedVolume) annotation(Line(visible=true, origin={-78.7394,-36.4222}, points={{-6.8606,
              8.5872},{3.3733,8.5872},{3.3733,-10.9986},{4.6512,-10.9986}},                                                                                                    color={0,0,127}));
      connect(VLVU.y,LeftVentricle.UnstressedVolume) annotation(Line(visible=true, origin={14.0658,-37.3266}, points={{-9.6658,
              11.4066},{3.3058,11.4066},{3.3058,-10.0765},{4.3843,-10.0765}},                                                                                                    color={0,0,127}));
      connect(RLABackflow.y,mitralValve.inflowConductanceValue) annotation(Line(visible=true, origin={0.0,10.0}, points={{-0.4,-50.08},{-4,-50.08},{-4,-69.2}}));
      connect(Tvs,leftVentricularElastance.Tvs) annotation(Line(visible=true, origin={-9.1281,10.2646}, points={{-37.8719,62.7354},{15.5,62.7354},{15.5,35.82},{34.7881,35.5554}}, color={0,0,127}));
      connect(leftVentricularElastance.Tav,Tav) annotation(Line(visible=true, origin={-8.0,35.0}, points={{33.66,17.66},{18,17.66},{18,45},{-32,45}}, color={0,0,127}));
      connect(T0,leftVentricularElastance.T0) annotation(Line(visible=true, origin={0.0,-0.869}, points={{-107.0,67.869},{0.0,69.0},{0.0,39.489},{25.66,39.489}}, color={0,0,127}));
      connect(Tas,leftVentricularElastance.Tas) annotation(Line(visible=true, origin={0.0,10.0}, points={{-103.0,81.0},{14.0,81.0},{14.0,49.5},{25.66,49.5}}, color={0,0,127}));
      connect(aorticValve.bloodFlowOutflow,toAorta) annotation(Line(visible=true, origin={0.0,10.0}, points={{89.4,-80.0},{110.0,-80.0}}, color={255,0,0}, thickness=1));
      connect(RLV.y,aorticValve.outflowResistance) annotation(Line(visible=true, origin={0.0,10.0}, points={{70.4,-43.92},{75,-43.92},{75,-69.4}}, color={0,0,127}));
      connect(CLVBackflow.y,aorticValve.inflowConductanceValue) annotation(Line(visible=true, origin={0.0,10.0}, points={{85.6,-50.08},{84.0,-50.08},{84.0,-69.2}}, color={0,0,127}));
      connect(RLAOUT.y,mitralValve.outflowResistance) annotation(Line(visible=true, origin={0.0,10.0}, points={{-17.6,-47.92},{-13,-47.92},{-13,-69.4}}));
      annotation(Diagram(graphics={Text(visible=true, origin={-78.8326,70.0},
                fillPattern=                                                              FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "start time of cardiac cycle ", fontName="Arial"),Text(visible=true, origin={-75.8038,94.3012},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "duration of atrial systole", fontName="Arial"),Text(visible=true, origin={-17.2738,75.0542},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-22.7262,-3.3344},{22.7262,3.3344}}, textString=
                                                                                                    "duration of ventricular systole", fontName="Arial"),Text(visible=true, origin={-18.0427,81.5462},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-16.4552,-3.1337},{16.4552,3.1337}}, textString=
                                                                                                    "atrioventricular delay", fontName="Arial"),Text(visible=true, origin={-73.2601,18.08},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, textString=
                                                                                                    "Intrathoracic pressure", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-50.0,8.0},{84.0,36.0}}, textString
                =                                                                                   "Left Heart", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-94.0,56.0},{-42.0,72.0}}, textString
                =                                                                                   "Tas", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-94.0,38.0},{-42.0,54.0}}, textString
                =                                                                                   "Tav", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-92.0,16.0},{-40.0,32.0}}, textString
                =                                                                                   "Tvs", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-90.0,-2.0},{-38.0,14.0}}, textString
                =                                                                                   "T0", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-58.0,78.0},{-6.0,94.0}}, textString
                =                                                                                   "PTH", fontName="Arial"),Text(visible=true, origin={-0.0,-111.7427}, lineColor={0,1,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-11.7427},{100.0,11.7427}}, textString
                =                                                                                   "%name", fontName="Arial")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end LeftHeart;

    model SystemicArteries
      VariableBloodResistor ExtrathoracicArterialResistance annotation(Placement(transformation(extent={{-13.0,-13.0},{13.0,13.0}}, rotation=180, origin={-20.0,-5.0}), visible=true));
      Constant VITHAU(k=140) "unstressed volume in ml" annotation(Placement(transformation(extent={{-3.749,11.247},{-14.996,22.494}}, origin={109.3725,17.506}, rotation=0), visible=true));
      Constant EITHA(k=1.43) "elastance (torr/ml)" annotation(Placement(transformation(extent={{6.0,6.0},{-6.0,-6.0}}, rotation=180, origin={40.0,32.4251}), visible=true));
      Constant Pext(k=0) "unstressed volume in ml" annotation(Placement(transformation(extent={{-82.0,36.0},{-70.0,48.0}}, origin={-4.0,-0.2441}, rotation=0), visible=true));
      Constant RETHA(k=0.06) "resistance torr sec/ml" annotation(Placement(transformation(extent={{-68.0,-92.0},{-56.0,-80.0}}, origin={1.0,46.0}, rotation=0), visible=true));
      Constant VETHAU(k=370) "unstressed volume in ml" annotation(Placement(transformation(extent={{99.7569,27.3843},{88.0208,39.1204}}, origin={-133.8889,-1.6377}, rotation=0), visible=true));
      Constant EETHA(k=0.556) "elastance (torr/ml)" annotation(Placement(transformation(extent={{5.6389,5.6389},{-5.6389,-5.6389}}, rotation=180, origin={-102.0313,28.0615}), visible=true));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{-118.0,-65.0},{-88.0,-45.0}}, origin={-3.0,49.6226}, rotation=0), iconTransformation(extent={{-124.0,-17.0},{-94.0,3.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput IntrathoracicPresssure "in torr" annotation(Placement(visible=true, transformation(origin={-80.0,71.7339}, extent={{-14.0,-14.0132},{14.0,14.0132}}, rotation=0), iconTransformation(origin={12.0,48.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      Inductor BloodFlowInertia annotation(Placement(transformation(extent={{44.0,-74.0},{6.0,-36.0}}, origin={-7.0,50.0}, rotation=0), visible=true));
      Constant LETHA(k=0.0007) "inertance in torr sec^2/ml" annotation(Placement(transformation(extent={{-22.0,-22.0},{-10.0,-10.0}}, origin={0.0,50.0}, rotation=0), visible=true));
      BloodElasticCompartment ExtrathoracicArteries(V0=450) annotation(Placement(visible=true, transformation(origin={-67.6006,-5.7658}, extent={{22.3994,-22.3994},{-22.3994,22.3994}}, rotation=0)));
      BloodElasticCompartment IntrathoracicArteries(V0=300) annotation(Placement(visible=true, transformation(origin={72.9918,-6.0082}, extent={{22.9918,-22.9918},{-22.9918,22.9918}}, rotation=0)));
      BloodFlowInflow bloodFlowInflow annotation(Placement(visible=true, transformation(origin={13.0,49.931}, extent={{86.0,-65.0},{116.0,-45.0}}, rotation=0), iconTransformation(origin={0.0,0.0}, extent={{94.0,-17.0},{124.0,3.0}}, rotation=0)));
    equation
      connect(ExtrathoracicArteries.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(visible=true, origin={-96.2044,-5.1295}, points={{4.89778,0.495721},{4.89778,-0.2479},{-9.7956,-0.2479}}, color={255,0,0}, thickness=1));
      connect(ExtrathoracicArteries.UnstressedVolume,VETHAU.y) annotation(Line(visible=true, origin={-57.6725,27.7328}, points={{4.61964,-14.1352},{4.9541,-7.7328},{4.9541,-1.6688},{4.9541,-1.6688},{4.9541,3.99921},{11.2176,3.99921}}, color={0,0,127}));
      connect(EETHA.y,ExtrathoracicArteries.Elastance) annotation(Line(visible=true, origin={-86.0776,21.0709}, points={{-9.75091,7.10338},{2.9228,7.10338},{2.9228,-7.47331},{3.90541,-7.47331}}, color={0,0,127}));
      connect(ExtrathoracicArteries.bloodFlowInflow,ExtrathoracicArterialResistance.Outflow) annotation(Line(visible=true, origin={-37.6966,-4.8295}, points={{-7.5046,0.170566},{1.4041,0.170566},{1.4041,-0.1705},{5.9966,-0.1705}}, color={255,0,0}, thickness=1));
      connect(ExtrathoracicArteries.ExternalPressure,Pext.y) annotation(Line(visible=true, origin={-70.2884,33.9431}, points={{1.55585,-15.8656},{1.55585,7.9328},{-3.1116,7.9328}}, color={0,0,127}));
      connect(IntrathoracicArteries.bloodFlowInflow,bloodFlowInflow) annotation(Line(visible=true, origin={101.4959,-4.9705}, points={{-5.5123,0.0984398},{-3.4959,0.0984398},{-3.4959,-0.0985},{12.5041,-0.0985}}, color={255,0,0}, thickness=1));
      connect(VITHAU.y,IntrathoracicArteries.UnstressedVolume) annotation(Line(visible=true, origin={88.9059,25.3043}, points={{4.90825,9.18467},{-0.9816,9.18467},{-0.9816,-2.3108},{-0.9816,-2.3108},{-0.9816,-11.437},{-0.981616,-11.437}}, color={0,0,127}));
      connect(EITHA.y,IntrathoracicArteries.Elastance) annotation(Line(visible=true, origin={54.7872,27.7915}, points={{-8.1872,4.7536},{2.9326,4.7536},{2.9326,2.2085},{2.9326,-13.9242},{3.24763,-13.9242}}, color={0,0,127}));
      connect(BloodFlowInertia.Inflow,IntrathoracicArteries.bloodFlowOutflow) annotation(Line(visible=true, origin={44.2249,-4.9231}, points={{-9.1249,-0.0769},{1.3954,-0.0769},{1.3954,0.0768596},{4.43392,0.0768596}}, color={255,0,0}, thickness=1));
      connect(ExtrathoracicArterialResistance.Inflow,BloodFlowInertia.Outflow) annotation(Line(visible=true, origin={0.0,50.0}, points={{-8.3,-55},{-8.3,-55},{0.9,-55},{0.9,-55}}, color={255,0,0}, thickness=1));
      connect(RETHA.y,ExtrathoracicArterialResistance.BloodResistance) annotation(Line(visible=true, origin={2.7,47.9272}, points={{-57.1,-87.8072},{-22.7,-87.9272},{-22.7,-64.9612},{-22.7,-64.9612}}, color={0,0,127}, smooth=Smooth.Bezier));
      connect(LETHA.y,BloodFlowInertia.Inertance) annotation(Line(visible=true, origin={8.8667,26.3093}, points={{-18.2667,7.8107},{9.1333,7.8107},{9.1333,-15.6213}}, color={0,0,127}));
      connect(IntrathoracicArteries.ExternalPressure,IntrathoracicPresssure) annotation(Line(visible=true, origin={21.22,53.9778}, points={{50.6099,-35.5121},{50.6099,17.7561},{-101.22,17.7561}}, color={0,0,127}));
      annotation(Diagram(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Icon(graphics={Ellipse(extent={{92,46},{110,-44}}, lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Rectangle(extent={{-100,46},{102,-44}}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, pattern=LinePattern.None, lineColor={0,0,0}),Ellipse(extent={{-110,46},{-92,-44}}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-106,-56},{112,-86}}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "%name"),Text(extent={{110,24},{-92,34}}, lineColor={0,0,0},
                lineThickness =                                                                                                   1, textString
                =                                                                                   "intrathoracic pressure",
                fillPattern =                                                                                                   FillPattern.Solid, fillColor={255,0,0})}));
    end SystemicArteries;

    model SystemicVeins
      VariableBloodResistor VeinsResistance annotation(Placement(transformation(extent={{-13.0,-13.0},{13.0,13.0}}, rotation=180, origin={7.0,-5.0}), visible=true));
      Constant VETHVU(k=1000) "unstressed volume in ml" annotation(Placement(transformation(extent={{-2.0,10.0},{-14.0,22.0}}, origin={94.0,18.0}, rotation=0), visible=true));
      Constant EETHV(k=0.0169) "elastance (torr/ml)" annotation(Placement(transformation(extent={{6.2215,-6.2215},{-6.2215,6.2215}}, rotation=180, origin={16.2215,26.2215}), visible=true));
      Constant Pext(k=0) "unstressed volume in ml" annotation(Placement(transformation(extent={{26.0,24.0},{38.0,36.0}}, origin={8.0,6.0}, rotation=0), visible=true));
      Constant RETHV(k=0.09) "resistance torr sec/ml" annotation(Placement(transformation(extent={{-40.0,-92.0},{-28.0,-80.0}}, origin={20.0,50.0}, rotation=0), visible=true));
      Constant VITHVU(k=1190) "unstressed volume in ml" annotation(Placement(transformation(extent={{109.6032,25.1174},{95.9028,38.8178}}, origin={-109.6032,-5.1174}, rotation=0), visible=true));
      Constant EITHV(k=0.0182) "elastance (torr/ml)" annotation(Placement(transformation(extent={{6.5365,-6.5365},{-6.5365,6.5365}}, rotation=180, origin={-66.5365,26.5365}), visible=true));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{-116.0,-65.0},{-86.0,-45.0}}, origin={0.0,50.0}, rotation=0), iconTransformation(extent={{-124.0,-17.0},{-94.0,3.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{86.0,-65.0},{116.0,-45.0}}, origin={0.0,50.0}, rotation=0), iconTransformation(extent={{94.0,-17.0},{124.0,3.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput IntrathoracicPresssure "in torr" annotation(Placement(visible=true, transformation(origin={-84.0,60.0}, extent={{-14.0,-14.0132},{14.0,14.0132}}, rotation=0), iconTransformation(origin={12.0,48.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      Constant RRAIN(k=0.003) annotation(Placement(transformation(extent={{-4.0,-4.0},{4.0,4.0}}, rotation=0, origin={-92.0,-34.0}), visible=true));
      VariableBloodResistor centralVenousResistance annotation(Placement(transformation(extent={{-10.0,-10.0},{10.0,10.0}}, rotation=180, origin={-80.0,-5.0}), visible=true));
      BloodElasticCompartment intrathoracicVeins(V0=1760) annotation(Placement(visible=true, transformation(origin={-35.2411,-5.8928}, extent={{17.6726,-17.6726},{-17.6726,17.6726}}, rotation=0)));
      BloodElasticCompartment extrathoracicVeins(V0=1400) annotation(Placement(visible=true, transformation(origin={60.0,-6.2654}, extent={{18.4703,-18.4703},{-18.4703,18.4703}}, rotation=0)));
    equation
      connect(extrathoracicVeins.bloodFlowInflow,bloodFlowInflow) annotation(Line(visible=true, origin={86.3676,-5.1763}, points={{-7.8973,-0.17639},{-3.3676,-0.17639},{-3.3676,0.1763},{14.6324,0.1763}}, color={0,0,255}, thickness=1));
      connect(VeinsResistance.Inflow,extrathoracicVeins.bloodFlowOutflow) annotation(Line(visible=true, origin={33.8238,-5.166}, points={{-15.1238,0.166},{3.5976,0.166},{3.5976,-0.165948},{6.62847,-0.165948}}, color={0,0,255}, thickness=1));
      connect(intrathoracicVeins.bloodFlowInflow,VeinsResistance.Outflow) annotation(Line(visible=true, origin={-10.5384,-5.0097}, points={{-7.0301,-0.00980847},{1.2459,-0.00980847},{1.2459,0.0097},{5.8384,0.0097}}, color={0,0,255}, thickness=1));
      connect(centralVenousResistance.Inflow,intrathoracicVeins.bloodFlowOutflow) annotation(Line(visible=true, origin={-61.9723,-4.9998}, points={{-9.0277,-0.0002},{8.0277,0.000137859}}, color={0,0,255}, thickness=1));
      connect(VETHVU.y,extrathoracicVeins.UnstressedVolume) annotation(Line(visible=true, origin={73.5992,21.9107}, points={{5.8008,12.2093},{-2.0987,12.2093},{-2.0987,-12.2093},{-1.60329,-12.2093}}, color={0,0,127}));
      connect(EETHV.y,extrathoracicVeins.Elastance) annotation(Line(visible=true, origin={43.0836,17.7968}, points={{-20.0184,8.30027},{5.1084,8.30027},{5.1084,-4.2526},{4.90082,-4.2526},{4.90082,-8.09536}}, color={0,0,127}));
      connect(VITHVU.y,intrathoracicVeins.UnstressedVolume) annotation(Line(visible=true, origin={-21.6639,18.1858}, points={{7.27848,8.8014},{-2.5895,8.8014},{-2.5895,-8.80134},{-2.09938,-8.80134}}, color={0,0,127}));
      connect(EITHV.y,intrathoracicVeins.Elastance) annotation(Line(visible=true, origin={-49.3372,18.1088}, points={{-10.0091,8.29697},{2.4051,8.29697},{2.4051,-3.9347},{2.59946,-3.9347},{2.59946,-8.72434}}, color={0,0,127}));
      connect(IntrathoracicPresssure,intrathoracicVeins.ExternalPressure) annotation(Line(visible=true, origin={-52.0895,44.3063}, points={{-31.9105,15.6937},{15.9553,15.6937},{15.9553,-31.3873}}, color={0,0,127}));
      connect(Pext.y,extrathoracicVeins.ExternalPressure) annotation(Line(visible=true, origin={54.9111,28.5452}, points={{-8.3111,7.5748},{4.1555,7.5748},{4.1555,-15.1497}}, color={0,0,127}));
      connect(RETHV.y,VeinsResistance.BloodResistance) annotation(Line(visible=true, origin={4.0943,-26.1897}, points={{-11.4943,-9.6903},{2.5872,-9.423},{2.5872,9.15573},{2.9057,9.15573}}, color={0,0,127}));
      connect(RRAIN.y,centralVenousResistance.BloodResistance) annotation(Line(visible=true, origin={-82.5333,-27.3656}, points={{-5.0667,-6.5544},{2.5333,-6.5544},{2.5333,13.1087}}, color={0,0,127}));
      connect(bloodFlowOutflow,centralVenousResistance.Outflow) annotation(Line(visible=true, origin={0.0,50.0}, points={{-101,-55},{-95.5,-55},{-95.5,-55},{-89,-55}}, color={0,0,255}, thickness=1));
      annotation(Diagram(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics), Icon(graphics={Ellipse(extent={{92,46},{110,-44}}, lineColor={0,0,255}, fillColor={0,128,255},
                fillPattern =                                                                                                   FillPattern.Solid),Rectangle(extent={{-100,46},{102,-44}}, fillColor={0,128,255},
                fillPattern =                                                                                                   FillPattern.Solid, pattern=LinePattern.None),Ellipse(extent={{-110,46},{-92,-44}}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-106,-56},{112,-86}}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "%name"),Text(extent={{110,24},{-92,34}}, lineColor={0,0,0},
                lineThickness =                                                                                                   1, textString
                =                                                                                   "intrathoracic pressure")}));
    end SystemicVeins;

    model PulmonaryCirculation
      VariableBloodResistor PulmonaryArteriesResistance annotation(Placement(transformation(extent={{13.0,-13.0},{-13.0,13.0}}, rotation=180, origin={-27.0,-20.0}), visible=true));
      Constant VPVU(k=350) "unstressed volume in ml" annotation(Placement(transformation(extent={{-4.0,16.0},{8.0,28.0}}, origin={-12.0,-2.0}, rotation=0), visible=true));
      Constant EPV(k=0.0455) "elastance (torr/ml)" annotation(Placement(transformation(extent={{-6.0,-6.0},{6.0,6.0}}, rotation=180, origin={48.3965,20.0}), visible=true));
      Constant RPP(k=0.11) "resistance torr sec/ml" annotation(Placement(transformation(extent={{-44.0,-92.0},{-32.0,-80.0}}, origin={0.0,40.0}, rotation=0), visible=true));
      Constant VPAU(k=50) "unstressed volume in ml" annotation(Placement(transformation(extent={{-102.0,28.0},{-90.0,40.0}}, origin={-5.6035,-14.0}, rotation=0), visible=true));
      Constant EPA(k=0.233) "elastance (torr/ml)" annotation(Placement(transformation(extent={{-6.0,-6.0},{6.0,6.0}}, rotation=180, origin={-28.1557,20.0}), visible=true));
      HeamodynamicsDymola.Parts.BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{88.0,-70.0},{118.0,-50.0}}, origin={2.0,40.0}, rotation=0), iconTransformation(extent={{102.0,-13.0},{132.0,7.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-116.0,-70.0},{-86.0,-50.0}}, origin={-9.0,40.0}, rotation=0), iconTransformation(extent={{-128.0,-9.0},{-98.0,11.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput IntrathoracicPresssure "in torr" annotation(Placement(visible=true, transformation(origin={-90.0,52.0453}, extent={{-14.0,-14.0132},{14.0,14.0132}}, rotation=0), iconTransformation(origin={12.0,48.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      VariableBloodResistor pulmonaryVeinResistance annotation(Placement(transformation(extent={{54.0,-72.0},{78.0,-48.0}}, origin={0.0,40.0}, rotation=0), visible=true));
      Constant RLAIN(k=0.003) annotation(Placement(transformation(extent={{-4.0,-4.0},{4.0,4.0}}, rotation=180, origin={88.0,4.0}), visible=true));
      BloodElasticCompartment PulmonaryArteries(V0=100) annotation(Placement(visible=true, transformation(origin={-70.2883,-21.5787}, extent={{-17.1044,-17.1044},{17.1044,17.1044}}, rotation=0)));
      BloodElasticCompartment PulmonaryVeins(V0=600) annotation(Placement(visible=true, transformation(origin={20.0,-21.0}, extent={{-17.1044,-17.1044},{17.1044,17.1044}}, rotation=0)));
    equation
      connect(pulmonaryVeinResistance.Outflow,bloodFlowOutflow) annotation(Line(visible=true, origin={0.0,40.0}, points={{76.8,-60.0},{76.8,-60.0},{105.0,-60.0}}, color={255,0,0}, thickness=1, smooth=Smooth.Bezier));
      connect(bloodFlowInflow,PulmonaryArteries.bloodFlowInflow) annotation(Line(visible=true, origin={-94.5552,-20.3667}, points={{-15.4448,0.3667},{4.1411,0.3667},{4.1411,-0.366786},{7.1625,-0.366786}}, color={0,0,255}, thickness=1));
      connect(PulmonaryVeins.ExternalPressure,IntrathoracicPresssure) annotation(Line(visible=true, origin={-16.0904,33.7658}, points={{36.0996,-35.7036},{36.0996,18.2795},{-73.9096,18.2795}}, color={0,0,127}));
      connect(RPP.y,PulmonaryArteriesResistance.BloodResistance) annotation(Line(visible=true, origin={0.0,40.0}, points={{-31.4,-85.88},{-28,-85.88},{-27,-85.88},{-27,-72.034}}, color={0,0,127}, smooth=Smooth.Bezier));
      connect(pulmonaryVeinResistance.BloodResistance,RLAIN.y) annotation(Line(visible=true, origin={0.0,40.0}, points={{66,-48.8917},{66,-48.8917},{66,-42},{66,-36.08},{83.6,-36.08}}, smooth=Smooth.Bezier));
      connect(PulmonaryArteries.UnstressedVolume,VPAU.y) annotation(Line(visible=true, origin={-88.2003,13.3318}, points={{7.65843,-19.2692},{7.65843,6.6682},{-6.8032,6.6682},{-6.8032,6.7882}}, color={0,0,127}));
      connect(PulmonaryArteries.Elastance,EPA.y) annotation(Line(visible=true, origin={-46.9585,13.2718}, points={{-12.2028,-19.2092},{-12.2028,6.7282},{12.2028,6.7282},{12.2028,6.6082}}, color={0,0,127}));
      connect(PulmonaryVeins.UnstressedVolume,VPVU.y) annotation(Line(visible=true, origin={4.7941,11.342}, points={{4.95233,-16.7007},{4.95233,8.778},{-8.1941,8.778}}, color={0,0,127}));
      connect(PulmonaryVeins.Elastance,EPV.y) annotation(Line(visible=true, origin={34.6835,11.182}, points={{-3.55649,-16.5407},{-3.55649,8.698},{7.113,8.698}}, color={0,0,127}));
      connect(PulmonaryArteries.ExternalPressure,IntrathoracicPresssure) annotation(Line(visible=true, origin={-74.5679,33.9377}, points={{4.28875,-36.4542},{4.28875,1.0944},{4.28875,18.1076},{-15.4321,18.1076}}, color={0,0,127}));
      connect(PulmonaryArteries.bloodFlowOutflow,PulmonaryArteriesResistance.Inflow) annotation(Line(visible=true, origin={-44.6928,-20.3571}, points={{-7.49335,-0.357178},{1.4003,-0.357178},{1.4003,0.3571},{5.9928,0.3571}}, color={255,0,0}, thickness=1));
      connect(PulmonaryArteriesResistance.Outflow,PulmonaryVeins.bloodFlowInflow) annotation(Line(visible=true, origin={-2.839,-20.0774}, points={{-12.461,0.0774},{2.7132,0.0774},{2.7132,-0.0773861},{5.7346,-0.0773861}}, color={255,0,0}, thickness=1));
      connect(PulmonaryVeins.bloodFlowOutflow,pulmonaryVeinResistance.Inflow) annotation(Line(visible=true, origin={48.3905,-20.0678}, points={{-10.2883,-0.0677778},{2.3395,-0.0677778},{2.3395,0.0678},{6.8095,0.0678}}, color={255,0,0}, thickness=1));
      annotation(Diagram(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{92.0,-44.0},{110.0,46.0}}),Rectangle(visible=true, fillColor={255,170,85}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-44.0},{102.0,46.0}}),Ellipse(visible=true, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-110.0,-44.0},{-92.0,46.0}}),Text(visible=true, origin={6.0,11.0}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-106.0,-86.0},{112.0,-56.0}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true,
                lineThickness =                                                                                                   1, extent={{-92.0,24.0},{110.0,34.0}}, textString
                =                                                                                   "intrathoracic pressure", fontName="Arial")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end PulmonaryCirculation;

    model SystemicPeripheralVessels
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{-114.0,10.0},{-84.0,30.0}}, origin={-2.138,-20.7769}, rotation=0), iconTransformation(extent={{-110.0,10.0},{-80.0,30.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{82.0,9.0},{112.0,31.0}}, origin={7.862,-19.7769}, rotation=0), iconTransformation(extent={{80.0,8.0},{110.0,30.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      VariableBloodResistor SmallVenuleResistances annotation(Placement(transformation(extent={{-24.0,5.0},{-52.0,34.0}}, origin={-22.138,-19.7769}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput PeripheralArteriolarResistance
        "in torr sec/ml"                                                                   annotation(Placement(visible=true, transformation(origin={106.862,31.2231}, extent={{17.0,-17.0},{-17.0,17.0}}, rotation=0), iconTransformation(origin={-10.0,98.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      Constant TUV(k=185) "unstressed volume in ml" annotation(Placement(transformation(extent={{25.6817,78.8795},{14.6753,89.886}}, origin={30.3669,-37.3379}, rotation=0), visible=true));
      Constant Pext(k=0) "unstressed volume in ml" annotation(Placement(transformation(extent={{54.0,88.0},{44.0,98.0}}, origin={-34.5595,-48.0}, rotation=0), visible=true));
      Constant EET(k=0.262) "elastance (torr/ml)" annotation(Placement(transformation(extent={{6.466,-6.466},{-6.466,6.466}}, rotation=180, origin={-33.534,40.0}), visible=true));
      VariableBloodResistor SystemicArteriolaResistance annotation(Placement(transformation(extent={{74.0,6.0},{46.0,35.0}}, origin={7.862,-20.7769}, rotation=0), visible=true));
      Constant RTA(k=0.2) "resistance torr sec/ml" annotation(Placement(transformation(extent={{5.0,-5.0},{-5.0,5.0}}, rotation=180, origin={-71.138,27.2231}), visible=true));
      BloodElasticCompartment BloodTissueElasticCompartment(V0=185) annotation(Placement(visible=true, transformation(origin={6.4443,-2.0}, extent={{26.4443,-26.4443},{-26.4443,26.4443}}, rotation=0)));
    equation
      connect(BloodTissueElasticCompartment.bloodFlowInflow,SystemicArteriolaResistance.Outflow) annotation(Line(visible=true, origin={46.9611,-0.4851}, points={{-14.0725,-0.208155},{3.5859,-0.208155},{3.5859,0.2082},{8.3009,0.2082}}, color={255,0,0}, thickness=1));
      connect(SmallVenuleResistances.Inflow,BloodTissueElasticCompartment.bloodFlowOutflow) annotation(Line(visible=true, origin={-29.2136,-0.4702}, points={{-18.3244,0.1933},{4.6267,0.1933},{4.6267,-0.193358},{7.67102,-0.193358}}, color={0,0,255}, thickness=1));
      connect(Pext.y,BloodTissueElasticCompartment.ExternalPressure) annotation(Line(visible=true, origin={8.0391,40.3622}, points={{0.9014,4.7378},{1.9609,4.7378},{-2.93116,4.7378},{-2.93116,-14.2133}}, color={0,0,127}));
      connect(TUV.y,BloodTissueElasticCompartment.UnstressedVolume) annotation(Line(visible=true, origin={31.9129,40.5812}, points={{12.579,6.57371},{4.0087,6.57371},{-8.2938,6.5737},{-8.29382,-19.7212}}, color={0,0,127}));
      connect(EET.y,BloodTissueElasticCompartment.Elastance) annotation(Line(visible=true, origin={-13.436,29.269}, points={{-12.9854,10.6017},{3.436,10.6017},{3.436,-4.3855},{3.436,-8.40896},{2.67736,-8.40896}}, color={0,0,127}));
      connect(SmallVenuleResistances.Outflow,bloodFlowOutflow) annotation(Line(visible=true, origin={-2.138,-19.7769}, points={{-70.6,19.5},{-71.3573,19},{-71.3573,19},{-99,19}}, color={0,0,255}, thickness=1));
      connect(PeripheralArteriolarResistance,SystemicArteriolaResistance.BloodResistance) annotation(Line(visible=true, origin={80.862,25.1972}, points={{26,6.0259},{-13,6.0259},{-13,-12.0516}}, color={0,0,127}));
      connect(SystemicArteriolaResistance.Inflow,bloodFlowInflow) annotation(Line(visible=true, origin={-2.138,-19.7769}, points={{82.6,19.5},{85,20.645},{85,20},{107,20}}, color={255,0,0}, thickness=1));
      connect(RTA.y,SmallVenuleResistances.BloodResistance) annotation(Line(visible=true, origin={-61.9714,22.4639}, points={{-3.6666,4.6592},{1.8334,4.6592},{1.8334,-9.3183}}, color={0,0,127}));
      annotation(Icon(graphics={Line(points={{100,20},{46,58},{22,66},{-34,64},{-60,40},{-100,20},{-60,32},{-38,54},{-2,56},{36,50},{82,30},{100,20},{20,46},{-26,48},{-54,30},{-100,20},{-52,24},{-20,40},{28,36},{100,20},{34,28},{-18,28},{-54,20},{-100,20},{-54,14},{-20,16},{32,18},{100,20},{66,6},{-26,4},{-70,8},{-100,20},{-70,0},{2,-6},{60,-2},{100,20},{54,-14},{-38,-16},{-78,-6},{-100,20},{-72,-22},{30,-34},{64,-18},{100,20},{66,-30},{24,-46},{-48,-40},{-72,-34},{-100,20},{-78,-62},{-4,-76},{74,-68},{100,20},{62,-54},{0,-60},{-78,-46},{-100,20},{-58,70},{2,74},{50,68},{100,20},{56,84},{2,90},{-50,86},{-78,64},{-100,20}}, color={255,0,0}, smooth=Smooth.None, thickness=0.5),Text(extent={{-120,-78},{124,-106}}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "%name"),Text(extent={{102,76},{-100,86}}, lineColor={0,0,0},
                lineThickness =                                                                                                   1,
                fillPattern =                                                                                                   FillPattern.Solid, fillColor={255,0,0}, textString
                =                                                                                   "peripheral resistance")}), Diagram(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end SystemicPeripheralVessels;

    model Heamodynamics_version1
      Constant HeartRate(k=72) annotation(Placement(transformation(extent={{-96,88},{-88,96}})));
      HeartIntervals heartIntervals annotation(Placement(transformation(extent={{-78,60},{-58,80}})));
      RightHeart rightHeart annotation(Placement(transformation(extent={{-80,0},{-40,40}})));
      LeftHeart leftHeart annotation(Placement(transformation(extent={{42,2},{82,42}})));
      PulmonaryCirculation pulmonaryCirculation annotation(Placement(transformation(extent={{-20,0},{20,40}})));
      SystemicArteries systemicArteries annotation(Placement(transformation(extent={{44,-86},{84,-46}})));
      SystemicVeins systemicVeins annotation(Placement(transformation(extent={{-82,-86},{-42,-46}})));
      SystemicPeripheralVessels systemicPeripheralVessels annotation(Placement(transformation(extent={{-24,-99},{24,-51}})));
      Constant RSP(k=0.8) annotation(Placement(transformation(extent={{-28,-40},{-20,-32}})));
      Constant PTH(k=-4) annotation(Placement(transformation(extent={{-80,-34},{-72,-26}})));
    equation
      connect(heartIntervals.HR,HeartRate.y) annotation(Line(points={{-79.4,72.8},{-84,72.8},{-84,92.08},{-87.6,92.08}}, color={0,0,127}, smooth=Smooth.None));
      connect(RSP.y,systemicPeripheralVessels.PeripheralArteriolarResistance) annotation(Line(points={{-19.6,-35.92},{-2.4,-35.92},{-2.4,-51.48}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,systemicVeins.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{-59.6,-29.92},{-59.6,-56.4}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,systemicArteries.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{66.4,-29.92},{66.4,-56.4}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculation.bloodFlowOutflow,leftHeart.fromPulmonaryVeins) annotation(Line(points={{23.4,19.4},{33.7,19.4},{33.7,12.2},{45.4,12.2}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(leftHeart.toAorta,systemicArteries.bloodFlowInflow) annotation(Line(points={{80.2,13.4},{94,13.4},{94,-67.4},{85.8,-67.4}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(systemicArteries.bloodFlowOutflow,systemicPeripheralVessels.bloodFlowInflow) annotation(Line(points={{42.2,-67.4},{33.1,-67.4},{33.1,-70.44},{22.8,-70.44}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(systemicPeripheralVessels.bloodFlowOutflow,systemicVeins.bloodFlowInflow) annotation(Line(points={{-22.8,-70.2},{-30.4,-70.2},{-30.4,-67.4},{-40.2,-67.4}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(systemicVeins.bloodFlowOutflow,rightHeart.fromCentralVeins) annotation(Line(points={{-83.8,-67.4},{-96,-67.4},{-96,10.2},{-76.6,10.2}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(rightHeart.toPulmonaryArtery,pulmonaryCirculation.bloodFlowInflow) annotation(Line(points={{-41.8,11.4},{-31.9,11.4},{-31.9,20.2},{-22.6,20.2}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(PTH.y,rightHeart.PTH) annotation(Line(points={{-71.6,-29.92},{-60,-29.92},{-60,-12},{-36,-12},{-36,44},{-74,44},{-74,37.2},{-70.8,37.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,pulmonaryCirculation.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{-60,-29.92},{-60,-12},{-36,-12},{-36,44},{2.4,44},{2.4,29.6}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,leftHeart.PTH) annotation(Line(points={{-71.6,-29.92},{-60,-29.92},{-60,-12},{-36,-12},{-36,44},{46,44},{46,39.2},{51.2,39.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tas,leftHeart.Tas) annotation(Line(points={{-57,74.6},{36,74.6},{36,34.8},{44.8,34.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tav,leftHeart.Tav) annotation(Line(points={{-57,71.6},{34,71.6},{34,30.8},{44.8,30.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tvs,leftHeart.Tvs) annotation(Line(points={{-57,67.8},{32,67.8},{32,26.8},{44.8,26.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.T0,leftHeart.T0) annotation(Line(points={{-57,64.4},{30,64.4},{30,22.8},{44.8,22.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tas,rightHeart.Tas) annotation(Line(points={{-57,74.6},{36,74.6},{36,48},{-82,48},{-82,32.8},{-77.2,32.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tav,rightHeart.Tav) annotation(Line(points={{-57,71.6},{34,71.6},{34,50},{-84,50},{-84,28.8},{-77.2,28.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.Tvs,rightHeart.Tvs) annotation(Line(points={{-57,67.8},{32,67.8},{32,52},{-86,52},{-86,24.8},{-77.2,24.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartIntervals.T0,rightHeart.T0) annotation(Line(points={{-57,64.4},{30,64.4},{30,54},{-88,54},{-88,20.8},{-77.2,20.8}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}, initialScale=0.1, grid={10,10}), graphics={Text(visible=true, origin={-0.0,-85.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-15.0},{100.0,15.0}}, textString
                =                                                                                   "Heamodynamics - version 1", fontName="Arial"),Bitmap(extent={{-100,100},{100,-70}},
                imageSource =                                                                                                   "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" + "" + "" + "" + "" + "" + "" + "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" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "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", fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png")}));
    end Heamodynamics_version1;

    model EtTimingBurkhoff
      Modelica.Blocks.Interfaces.RealInput Tmax "duration of systole [msec]" annotation(Placement(transformation(extent={{-120.0,12.0},{-80.0,52.0}}, origin={-20.0,0.0}, rotation=0), iconTransformation(extent={{-126.0,62.0},{-100.0,88.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput T0
        "elapsed time from the beginning of systole [sec]"                                       annotation(Placement(transformation(extent={{-120.0,-30.0},{-80.0,10.0}}, origin={-20.0,-2.138}, rotation=0), iconTransformation(extent={{-126.0,-54.0},{-100.0,-28.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tau
        "time constant of myocardial relaxation [msec]"                                        annotation(Placement(transformation(extent={{-120.0,12.0},{-80.0,52.0}}, origin={-20.0,48.0}, rotation=0), iconTransformation(extent={{-126.0,24.0},{-100.0,50.0}}, origin={0.0,-14.0}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealOutput Et0
        "Relative elastance value (Elastance/End-Systolic Elastance)"                                         annotation(Placement(visible=true, transformation(origin={114.0867,9.4318}, extent={{-14.0867,-14.0867},{14.0867,14.0867}}, rotation=0), iconTransformation(origin={110.0,10.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Real Tmaxms;
      Real Taums;
    equation
      Tmaxms=Tmax/1000;
      Taums=Tau/1000;
      if T0 <= 3/2*Tmaxms then
        Et0=0.5*(sin(Modelica.Constants.pi/Tmaxms*T0 - Modelica.Constants.pi/2) + 1);
      else
        Et0=0.5*exp(-(T0 - 3*Tmaxms/2)/Taums);
      end if annotation(Icon(graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255},
                fillPattern =                                                                                     FillPattern.Solid, fillColor={255,255,0}),Text(extent={{-134,122},{126,98}}, lineColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, fillColor={255,255,0}, textString
                =                                                                                   "%name"),Text(extent={{-122,-34},{-48,-52}}, lineColor={0,0,255}, textString
                =                                                                                   "T0"),Text(extent={{-108,28},{-56,14}}, lineColor={0,0,255}, textString
                =                                                                                   "Tau"),Text(extent={{-102,82},{-50,68}}, lineColor={0,0,255}, textString
                =                                                                                   "Tmax"),Text(extent={{50,18},{118,6}}, lineColor={0,0,255}, textString
                =                                                                                   "Et0"),Text(extent={{-54,62},{114,80}}, lineColor={0,0,255}, textString
                =                                                                                   "Elastance"),Line(points={{-66,-60},{-54,-32},{-36,0},{0,46},{28,48},{40,0},{56,-60}}, color={0,0,255}, smooth=Smooth.Bezier),Line(points={{56,-60},{90,-60},{100,-60}}, color={0,0,255}, smooth=Smooth.Bezier)}), Diagram(graphics));
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,0}, fillPattern=FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-1.2605,-109.8923}, fillPattern=FillPattern.Solid, extent={{-138.7395,-10.1077},{138.7395,10.1077}}, textString="%name", fontName="Arial"),Text(visible=true, origin={-82.7938,75.0}, fillPattern=FillPattern.Solid, extent={{-15.0129,-5.0},{15.0129,5.0}}, textString="Tmax", fontName="Arial"),Text(visible=true, origin={-82.9424,23.1625}, fillPattern=FillPattern.Solid, extent={{-10.1077,-6.8375},{10.1077,6.8375}}, textString="Tau", fontName="Arial"),Text(visible=true, origin={-83.537,-41.4712}, fillPattern=FillPattern.Solid, extent={{-8.324,-5.7971},{8.324,5.7971}}, textString="T0", fontName="Arial"),Text(visible=true, origin={70.0,9.4546}, fillPattern=FillPattern.Solid, extent={{-17.2425,-10.5454},{17.2425,10.5454}}, textString="Etrel", fontName="Arial")}), Diagram(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Text(visible=true, origin={-60.6124,66.3279}, fillPattern=FillPattern.Solid, extent={{-19.3876,-3.6721},{19.3876,3.6721}}, textString="equation", fontName="Arial"),Text(visible=true, origin={-33.3291,54.0114}, fillPattern=FillPattern.Solid, extent={{-33.3291,-9.668},{33.3291,9.668}}, textString=" if T0 <= 3/2*Tmax then", fontName="Arial"),Text(visible=true, origin={8.2765,41.3224}, fillPattern=FillPattern.Solid, extent={{-61.7235,-6.2887},{61.7235,6.2887}}, textString="Etrel=0.5*(sin(pi/Tmax*T0 - pi/2) + 1);", fontName="Arial"),Text(visible=true, origin={-60.1557,28.0934}, fillPattern=FillPattern.Solid, extent={{-10.1557,-3.8394},{10.1557,3.8394}}, textString="else", fontName="Arial"),Text(visible=true, origin={7.0602,16.0354}, fillPattern=FillPattern.Solid, extent={{-61.1739,-10.423},{61.1739,10.423}}, textString=" Etrel=0.5*exp(-(T0 - 3*Tmax/2)/Tau);", fontName="Arial"),Text(visible=true, origin={-56.6991,3.8394}, fillPattern=FillPattern.Solid, extent={{-10.1557,-3.8394},{10.1557,3.8394}}, textString="end if", fontName="Arial")}));
    end EtTimingBurkhoff;

    model ESPVR "End-Systolic Pressure-Volume Realitonship"
      Modelica.Blocks.Interfaces.RealInput Ves "end-systolic volume in ml" annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-105.3145,77.2631}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vu "Unstressed volume in ml" annotation(Placement(visible=true, transformation(origin={-170.0,37.767}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-105.0964,33.4665}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Ees
        "end-systolic elastance in mmHg/ml"                                        annotation(Placement(visible=true, transformation(origin={-170.0,-13.1627}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-102.8031,-15.241}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Pes "End-systolic pressure in mmHg"
                                                                                annotation(Placement(visible=true, transformation(origin={155.0,12.5}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={105.9395,5.9395}, extent={{-15.9395,-15.9395},{15.9395,15.9395}}, rotation=0)));
    equation
      if Ves - Vu < 0 then
        Pes=0;
      else
        Pes=Ees*(Ves - Vu);
      end if;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}}),Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={2.451,-127.3412},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-80.0,-22.6588},{80.0,22.6588}}, textString
                =                                                                                   "ESPVR", fontName="Arial"),Text(visible=true, origin={-60.0,74.5397},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-20.0,-17.805},{20.0,17.805}}, textString
                =                                                                                   "Ves", fontName="Arial"),Text(visible=true, origin={-70.0,33.3538},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-15.0,-13.3538},{15.0,13.3538}}, textString
                =                                                                                   "Vu", fontName="Arial"),Text(visible=true, origin={-56.8607,-15.6097},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-23.1393,-20.5997},{23.1393,20.5997}}, textString
                =                                                                                   "Ees", fontName="Arial"),Text(visible=true, origin={60.0,8.9986},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-23.5904,-21.0014},{23.5904,21.0014}}, textString
                =                                                                                   "Pes", fontName="Arial")}), Diagram(coordinateSystem(extent={{-160.0,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Text(visible=true, origin={-72.5,78.4783}, fillPattern=FillPattern.Solid, extent={{-32.5,-8.4783},{32.5,8.4783}}, textString="Equation:", fontName="Arial"),Text(visible=true, origin={-7.5351,13.6615}, fillPattern=FillPattern.Solid, extent={{-82.4649,-21.5126},{82.4649,21.5126}}, textString="if (Ves - Vu)<0 then Pes = 0;", fontName="Arial"),Text(visible=true, origin={-10.897,-11.3044}, fillPattern=FillPattern.Solid, extent={{-79.103,-20.6356},{79.103,20.6356}}, textString="else Pes=Ees*(Ves - Vu);", fontName="Arial")}));
    end ESPVR;

    model EDPVR "End-diastolic Pressure-Volume Relationship"
      Modelica.Blocks.Interfaces.RealInput Ved "end-diastolic volume in ml" annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-105.3145,77.2631}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vu "Unstressed volume in ml" annotation(Placement(visible=true, transformation(origin={-168.0297,41.5448}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-105.0964,33.4665}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Alpha
        "coefficient eo end diastolic pressure-volume curve"                                          annotation(Placement(visible=true, transformation(origin={-161.9038,-10.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-102.8031,-15.241}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Ped
        "End-diastolic pressure in mmHg"                                         annotation(Placement(visible=true, transformation(origin={155.0,12.5}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={105.9395,5.9395}, extent={{-15.9395,-15.9395},{15.9395,15.9395}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Beta
        "coefficient eo end diastolic pressure-volume curve"                                         annotation(Placement(visible=true, transformation(origin={-163.3111,-82.4047}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-104.8031,-63.241}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
    equation
      if Ved - Vu < 0 then
        Ped=0;
      else
        Ped=Beta*(exp(Alpha*(Ved - Vu)) - 1);
      end if;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}}),Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={2.451,-127.3412},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-80.0,-22.6588},{80.0,22.6588}}, textString
                =                                                                                   "EDPVR", fontName="Arial"),Text(visible=true, origin={-60.0,74.5397},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-20.0,-17.805},{20.0,17.805}}, textString
                =                                                                                   "Ved", fontName="Arial"),Text(visible=true, origin={-70.0,33.3538},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-15.0,-13.3538},{15.0,13.3538}}, textString
                =                                                                                   "Vu", fontName="Arial"),Text(visible=true, origin={-52.9698,-14.0636},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.0302,-24.0636},{27.0302,24.0636}}, textString
                =                                                                                   "Alpha", fontName="Arial"),Text(visible=true, origin={60.0,8.9986},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-23.5904,-21.0014},{23.5904,21.0014}}, textString
                =                                                                                   "Ped", fontName="Arial"),Text(visible=true, origin={-54.9698,-62.0636},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.0302,-24.0636},{27.0302,24.0636}}, textString
                =                                                                                   "Beta", fontName="Arial")}), Diagram(coordinateSystem(extent={{-160.0,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Text(visible=true, origin={-72.5,78.4783}, fillPattern=FillPattern.Solid, extent={{-32.5,-8.4783},{32.5,8.4783}}, textString="Equation:", fontName="Arial"),Text(visible=true, origin={-91.0,17.0938}, fillPattern=FillPattern.Solid, extent={{-20.0,-5.2174},{20.0,5.2174}}, textString="else", fontName="Arial"),Text(visible=true, origin={-60.0,30.5349}, fillPattern=FillPattern.Solid, extent={{-21.2169,-5.5349},{21.2169,5.5349}}, textString="Ped=0", fontName="Arial"),Text(visible=true, origin={-59.6611,46.1581}, fillPattern=FillPattern.Solid, extent={{-42.7728,-11.1581},{42.7728,11.1581}}, textString="if (Ved-Vu)>0 then", fontName="Arial"),Text(visible=true, origin={10.0,2.8261}, fillPattern=FillPattern.Solid, extent={{-85.0,-22.1739},{85.0,22.1739}}, textString="Ped=Beta*(exp(Alpha*(Ved-Vu))-1);", fontName="Arial")}));
    end EDPVR;

    model HeartElastanceBurkhoff
      "Elastance of heart artia and ventricules by Burkhoff"

      Modelica.Blocks.Interfaces.RealInput Et0
        "Relative elastance value (Elastance/EndSystolic Elastance)"                                        annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,-38},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vs "Stressed volume in ml" annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,10},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Alpha
        "coefficient eo end diastolic pressure-volume curve"                                          annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-109,
                69.0001},                                                                                                    extent={{
                -8.99991,-9.0001},{9.00027,8.99992}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Beta
        "coefficient eo end diastolic pressure-volume curve"                                         annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,38},         extent={{
                -9.99994,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Ees
        "coefficient eo end-systolic elastance in mmHg/ml"                                        annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-109,91},          extent={{
                -8.99994,-9},{9.00018,9}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Et "elasticity (torr/ml)" annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,40},  rotation=0), visible=true));

    equation
      Et=(1 - Et0)*(Beta*(exp(Alpha*Vs) - 1))/Vs + Et0*Ees;

      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                      graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Line(points={{
                  -44,90},{-44,-60},{80,-60}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-58},{24,-56},{48,-54},{64,-52},{70,-50},{76,-48},{80,-46},{84,
                  -44}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-60},{2,88}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-60},{82,56}},                                                                                                    color={255,0,0}, smooth=Smooth.None),Polygon(points={{
                  70,48},{66,56},{74,52},{70,48}},                                                                                                    lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{0,-4},{-4,4},{4,0},{0,-4}}, lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, origin={78,
                  45},                                                                                                    rotation=180),Text(extent={{
                  -100,102},{-50,76}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Ees"),Text(extent={{
                  -100,54},{-40,24}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Beta"),Text(extent={{
                  -106,78},{-34,54}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Alpha"),Text(extent={{
                  -118,24},{-42,-8}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Vs"),Text(extent={{
                  -114,-24},{-44,-52}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Et0"),                                                                                            Text(extent={{
                  56,90},{110,52}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Et"),Text(extent={{-100,-104},{102,-126}}, lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "%name")}),
                                   Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics));
    end HeartElastanceBurkhoff;

    model RightHeartBurkhoff
      Constant VRAU(k=5) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={10,8}, rotation=0), visible=true));
      Constant VRVU(k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={12,10.2054}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.Constant Rtv(k=0.0025) annotation(Placement(transformation(extent={{-38.4945,-81.4825},{-27.4961,-71.2972}}, origin={8.4945,58.3898}, rotation=0), visible=true));
      CardiacValve tricuspidValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={0,34}, rotation=0), visible=true));
      CardiacValve pulmonicValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-6.5264,34}, rotation=0), visible=true));
      Constant CRABackflow(k=0) annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-6.5306,44}, rotation=0), visible=true));
      Constant CRVBackflow(k=0) annotation(Placement(transformation(extent={{111.0,-78.0},{123.0,-66.0}}, origin={-57,72}, rotation=0), visible=true));
      BloodElasticCompartment RightAtrium(V0=40) annotation(Placement(visible=true, transformation(origin={-54.3077,-46.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment RightVentricle(V0=60) annotation(Placement(visible=true, transformation(origin={27.7449,-47}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{30,54},{80,94}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-70,54},{-20,94}})));
      Constant RAEes(k=0.2) "Right Atrium: End-Systolic Elastance [mmHg/ml] " annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-76.5306,144}, rotation=0), visible=true));
      Constant RAAlpha(k=0.04)
        "Right Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-76.5306,134}, rotation=0), visible=true));
      Constant RABeta(k=0.3)
        "Right Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                          annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-76.5306,124}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.Constant RVEes(k=0.38)
        "Right Ventricle: End-Systolic Elastance [mmHg/ml]"                                                annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,144}, rotation=0), visible=true));
      Constant RVAlpha(k=0.024)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,134}, rotation=0), visible=true));
      Constant RVBeta(k=0.34)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,124}, rotation=0), visible=true));
      Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent={{-74,5},{-62,17}})));
      Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{-6,-6},{6,6}}, rotation=270, origin={-54,-2})));
      Modelica.Blocks.Interfaces.RealInput AVGain
        "Ventricular-Atrial Interconnection Gain"                                           annotation(Placement(visible=true, transformation(origin={-88.699,15.3141}, extent={{-8.69911,-8.68595},{8.69892,8.68591}}, rotation=0), iconTransformation(origin={-84.657,-60.3684}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "VAtrial Elastance - realative value from 0 to 1 (Current Elastance/Maximal Elastance)"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-91.699,54.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-54.657,85.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Elastance - realative value from 0 to 1 (Current Elastance/Maximal Elastance)"
                                                                                                            annotation(Placement(visible=true, transformation(origin={4.30104,54.3141}, extent={{-9.69914,-9.686},{9.69896,9.68592}}, rotation=0), iconTransformation(origin={-4.657,101.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput PTH "Intrathoracic Pressure [mmHg]" annotation(Placement(visible=true, transformation(origin={-82.6985,39.3141}, extent={{-11.3015,-11.3141},{11.3015,11.3141}}, rotation=0), iconTransformation(origin={53.343,85.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-108,-50},{-100,-42}}), iconTransformation(extent={{-112,-8},{-92,12}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-50},{108,-42}}), iconTransformation(extent={{92,-8},{112,12}})));
      Modelica.Blocks.Math.Add stressedVolume annotation(Placement(transformation(extent={{-40,-96},{-28,-84}})));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-10,-90}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={38,-98})));
      Modelica.Blocks.Math.Add volume annotation(Placement(transformation(extent={{44,-96},{56,-84}})));
      Modelica.Blocks.Interfaces.RealOutput Volume annotation(Placement(transformation(extent={{66,-100},{86,-80}}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={-38,-98})));
      Constant RR(k=0.002) annotation(Placement(transformation(extent={{111.0,-78.0},{123.0,-66.0}}, origin={-59,54}, rotation=0), visible=true));
    equation
      connect(Rtv.y,tricuspidValve.outflowResistance) annotation(Line(visible=true, origin={-16.1506,-23.7321}, points={{
              -2.30108,5.8339},{1.1506,5.8339},{1.1506,-11.6679}},                                                                                                    color={0,0,127}));
      connect(RVEes.y,VentricularElastance.Ees) annotation(Line(visible=true, points={{9.8694,
              96.08},{14.9347,96.08},{14.9347,92.2},{27.75,92.2}},                                                                                         color={0,0,127}));
      connect(RightVentricle.bloodFlowOutflow,pulmonicValve.bloodFlowInflow) annotation(Line(visible=true, origin={61.4177,-45.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(tricuspidValve.bloodFlowOutflow,RightVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={3.587,-45.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(RightVentricle.UnstressedVolume,VRVU.y) annotation(Line(visible=true, origin={10.2298,-11.4216}, points={{5.07915,
              -16.608},{5.07915,3.8854},{-2.2121,3.8854},{-2.2121,3.0837},{
              -1.8298,3.0837},{-1.8298,3.707}},                                                                                                    color={0,0,127}));
      connect(CRVBackflow.y,pulmonicValve.inflowConductanceValue) annotation(Line(visible=true, origin={0,34}, points={{66.6,-33.88},{72.4263,-33.88},{81.4736,-33.5185},{81.4736,-69.2}}, color={0,0,127}));
      connect(VRAU.y,RightAtrium.UnstressedVolume) annotation(Line(visible=true, origin={-69.4637,-10.3659}, points={{-6.1363,
              2.4459},{2.2267,2.4459},{2.2267,-17.4086},{2.72005,-17.4086}},                                                                                                    color={0,0,127}));
      connect(RightAtrium.bloodFlowOutflow,tricuspidValve.bloodFlowInflow) annotation(Line(points={{
              -32.3527,-45.6965},{-20,-45.6965},{-20,-46}},                                                                                       color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(RightAtrium.StressedVolume,AtrialElastance.Vs) annotation(Line(points={{
              -54.3077,-69.1436},{-54.3077,-80},{-96,-80},{-96,76},{-72.5,76}},                                                      color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.StressedVolume,VentricularElastance.Vs) annotation(Line(points={{27.7449,
              -69.3987},{27.7449,-78},{96,-78},{96,42},{-4,42},{-4,76},{27.5,76}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Et,RightAtrium.Elastance) annotation(Line(points={{-17.5,
              88},{-10,88},{-10,14},{-40.8124,14},{-40.8124,-27.7745}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(VentricularElastance.Et,RightVentricle.Elastance) annotation(Line(points={{82.5,88},
              {90,88},{90,24},{41.2402,24},{41.2402,-28.0296}},                                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(PTH,RightVentricle.ExternalPressure) annotation(Line(points={{
              -82.6985,39.3141},{27.756,39.3141},{27.756,-23.8806}},                                                               color={0,0,127}, smooth=Smooth.None));
      connect(RABeta.y,AtrialElastance.Beta) annotation(Line(points={{-90.1306,
              76.08},{-80.0653,76.08},{-80.0653,81.6},{-72.5,81.6}},                                                                           color={0,0,127}, smooth=Smooth.None));
      connect(RAAlpha.y,AtrialElastance.Alpha) annotation(Line(points={{
              -90.1306,86.08},{-80.0653,86.08},{-80.0653,87.8},{-72.25,87.8}},                                              color={0,0,127}, smooth=Smooth.None));
      connect(RAEes.y,AtrialElastance.Ees) annotation(Line(points={{-90.1306,
              96.08},{-80.0653,96.08},{-80.0653,92.2},{-72.25,92.2}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(RVAlpha.y,VentricularElastance.Alpha) annotation(Line(points={{9.8694,
              86.08},{19.9347,86.08},{19.9347,87.8},{27.75,87.8}},                                                                               color={0,0,127}, smooth=Smooth.None));
      connect(RVBeta.y,VentricularElastance.Beta) annotation(Line(points={{9.8694,
              76.08},{19.9347,76.08},{19.9347,81.6},{27.5,81.6}},                                                                              color={0,0,127}, smooth=Smooth.None));
      connect(CRABackflow.y,tricuspidValve.inflowConductanceValue) annotation(Line(points={{-20.1306,-3.92},{-6,-3.92},{-6,-35.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.Pressure,product.u2) annotation(Line(points={{44.3408,
              -61.1006},{44.3408,-74},{-88,-74},{-88,7.4},{-75.2,7.4}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(product.y,add.u2) annotation(Line(points={{-61.4,11},{-57.6,11},{-57.6,5.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.u1,PTH) annotation(Line(points={{-50.4,5.2},{-50.4,39.3141},{-82.6985,39.3141}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.y,RightAtrium.ExternalPressure) annotation(Line(points={{-54,
              -8.6},{-54,-23.6255},{-54.2966,-23.6255}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowInflow,RightAtrium.bloodFlowInflow) annotation(Line(points={{-104,
              -46},{-89.5263,-46},{-89.5263,-45.7198},{-75.0526,-45.7198}},                                                                            color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonicValve.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(points={{86.8736,-46},{104,-46}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(VEt0,VentricularElastance.Et0) annotation(Line(points={{4.30095,
              54.3141},{15.1505,54.3141},{15.1505,66.4},{27.5,66.4}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(AEt0,AtrialElastance.Et0) annotation(Line(points={{-91.6991,
              54.3141},{-78,54.3141},{-78,66.4},{-72.5,66.4}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(AVGain,product.u1) annotation(Line(points={{-88.6991,15.3141},{
              -82.3495,15.3141},{-82.3495,14.6},{-75.2,14.6}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u1,VentricularElastance.Vs) annotation(Line(points={{-41.2,
              -86.4},{-46,-86.4},{-46,-78},{96,-78},{96,42},{-4,42},{-4,76},{
              27.5,76}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u2,AtrialElastance.Vs) annotation(Line(points={{-41.2,
              -93.6},{-54,-93.6},{-54,-80},{-96,-80},{-96,76},{-72.5,76}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(RightAtrium.Volume,volume.u2) annotation(Line(points={{-68.8291,
              -60.8455},{-68.8291,-98},{34,-98},{34,-93.6},{42.8,-93.6}},                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(volume.u1,RightVentricle.Volume) annotation(Line(points={{42.8,
              -86.4},{13.2235,-86.4},{13.2235,-61.1006}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(volume.y,Volume) annotation(Line(points={{56.6,-90},{76,-90}}, color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.y,StressedVolume) annotation(Line(points={{-27.4,-90},{-10,-90}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonicValve.outflowResistance,RR.y) annotation(Line(points={{72.4736,-35.4},{72.4736,-17.88},{64.6,-17.88}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(graphics={Text(visible=true, origin={-60,29.6988},
                fillPattern=                                                            FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, fontName="Arial", textString=
                                                                                                    "Intrathoracic pressure", lineColor={0,0,0}, fontSize=12,
                horizontalAlignment=                                                                                                    TextAlignment.Left)}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-66,-14},{68,14}}, textString
                =                                                                                   "Right Heart", fontName="Arial"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-82,62},{-30,78}}, fontName="Arial", textString
                =                                                                                   "AEt0"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-46,76},{40,92}}, fontName="Arial", textString
                =                                                                                   "VEt0"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-76,-67},{-24,-51}}, fontName="Arial", textString
                =                                                                                   "AVGain"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{34,56},{86,72}}, textString
                =                                                                                   "PTH", fontName="Arial"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{-62,-88},{-10,-72}}, fontName="Arial", textString
                =                                                                                   "Volume"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{0,-112},{92,-50}}, fontName="Arial", textString
                =                                                                                   "Stressed Volume")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end RightHeartBurkhoff;

    model HeartElasticitiesBurkhoff
      EtTimingBurkhoff etTimingAtrial annotation(Placement(visible=true, transformation(origin={-51.693,68.3965}, extent={{-20.0652,-20.0652},{20.0652,20.0652}}, rotation=0)));
      EtTimingBurkhoff etTimingVentricular annotation(Placement(visible=true, transformation(origin={46.7708,67.5339}, extent={{-20.4661,-20.4661},{20.4661,20.4661}}, rotation=0)));
      Constant TmaxAtrial(k=125) "Time to atrial end systole [msec]" annotation(Placement(visible=true, transformation(origin={-91,85}, extent={{-5,-5},{5,5}}, rotation=0)));
      Constant TauAtrial(k=20) "Time constant of atrial relaxation [msec]" annotation(Placement(visible=true, transformation(origin={-91,69}, extent={{-5,-5},{5,5}}, rotation=0)));
      Constant TauVentricular(k=30)
        "Time constant of ventricular relaxation [msec]"                             annotation(Placement(visible=true, transformation(origin={-5,69}, extent={{-5,-5},{5,5}}, rotation=0)));
      Constant TmaxVentricular(k=200) "Time to ventricular end systole [msec]" annotation(Placement(visible=true, transformation(origin={-5,83.0088}, extent={{-5,-5.0088},{5,5.0088}}, rotation=0)));
      HeartIntervalBurkhoff heartInterval1 annotation(Placement(visible=true, transformation(origin={-11.6372,-20.0}, extent={{-18.3628,-18.3628},{18.3628,18.3628}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput HeartRate "Heart rate (beats/min)" annotation(Placement(visible=true, transformation(origin={-90.0,3.7521}, extent={{-16.2479,-16.2479},{16.2479,16.2479}}, rotation=0), iconTransformation(origin={-102.8605,54.9977}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AVDelay
        "Atrial-ventricular delay in msec."                                            annotation(Placement(visible=true, transformation(origin={-90.0,-32.2293}, extent={{-16.1392,-16.1392},{16.1392,16.1392}}, rotation=0), iconTransformation(origin={-103.779,6.8642}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput AEt0
        "Relative elastance value of atria (Elastance/End-Systolic Elastance)"                                          annotation(Placement(visible=true, transformation(origin={-3.3628,40.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={111.461,8.5393}, extent={{-11.4607,-11.4607},{11.4607,11.4607}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput VEt0
        "Relative elastance value of ventricles (Elastance/End-Systolic Elastance)"
                                                                                                            annotation(Placement(visible=true, transformation(origin={97.9091,40.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={111.4607,60.0}, extent={{-11.4607,-11.4607},{11.4607,11.4607}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput T0
        "start time of cardiac cycle in sec"                                        annotation(Placement(visible=true, transformation(origin={64,-47.4743}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110,-46.728}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
    equation
      connect(TmaxVentricular.y,etTimingVentricular.Tmax) annotation(Line(visible=true, origin={6.7071,83.7126}, points={{-6.2071,
              -0.603624},{-0.0257,-0.603624},{-0.0257,-0.829125},{16.937,
              -0.829125}},                                                                                                    color={0,0,127}));
      connect(TauVentricular.y,etTimingVentricular.Tau) annotation(Line(visible=true, origin={6.9097,71.4362}, points={{-6.4097,
              -2.3362},{-2.9009,-2.3362},{-2.9009,0.7229},{16.7344,0.7229},{
              16.7344,0.804903}},                                                                                                    color={0,0,127}));
      connect(heartInterval1.Tvsyst,etTimingVentricular.T0) annotation(Line(visible=true, origin={21.8225,26.2145}, points={{
              -13.2606,-43.8622},{10.5155,-43.8622},{10.5155,10.934},{-9.796,
              10.934},{-9.796,32.9283},{1.82161,32.9283}},                                                                                                    color={0,0,127}));
      connect(heartInterval1.Tasyst,etTimingAtrial.T0) annotation(Line(visible=true, origin={-40.0245,29.4356}, points={{48.5864,
              -41.0834},{60.0245,-41.0834},{60.0245,-4.8481},{-49.9755,-4.8481},
              {-49.9755,30.5644},{-34.3422,30.5644},{-34.3422,30.7342}},                                                                                                    color={0,0,127}));
      connect(TauAtrial.y,etTimingAtrial.Tau) annotation(Line(visible=true, origin={-79.9917,71.5457}, points={{-5.5083,
              -2.4457},{-0.0083,-2.4457},{-0.0083,1.4658},{5.62502,1.4658}},                                                                                                    color={0,0,127}));
      connect(TmaxAtrial.y,etTimingAtrial.Tmax) annotation(Line(visible=true, origin={-81.1491,83.7627}, points={{-4.3509,
              1.3373},{-1.1657,1.3373},{-1.1657,-0.3173},{6.78242,-0.3173}},                                                                                                    color={0,0,127}));
      connect(AVDelay,heartInterval1.AVDelay) annotation(Line(visible=true, origin={-54.5599,-23.4731}, points={{
              -35.4401,-8.7562},{-3.1673,-8.7562},{-3.1673,6.1015},{20.8873,
              6.1015},{20.8873,5.30938}},                                                                                                    color={0,0,127}));
      connect(HeartRate,heartInterval1.HR) annotation(Line(visible=true, origin={-59.5145,-3.3248}, points={{
              -30.4855,7.0769},{2.3218,7.0769},{2.3218,-7.07685},{25.8419,
              -7.07685}},                                                                                                    color={0,0,127}));
      connect(etTimingVentricular.Et0,VEt0) annotation(Line(points={{69.2835,
              69.5805},{78,69.5805},{78,40},{97.9091,40}},                                                                color={0,0,0}, smooth=Smooth.None));
      connect(etTimingAtrial.Et0,AEt0) annotation(Line(points={{-29.6213,70.403},
              {-22,70.403},{-22,40},{-3.3628,40}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(heartInterval1.T0,T0) annotation(Line(points={{8.56188,-26.7443},
              {22.2809,-26.7443},{22.2809,-47.4743},{64,-47.4743}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(T0,T0) annotation(Line(points={{64,-47.4743},{64,-47.4743}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}},         preserveAspectRatio=false,initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}, lineColor={0,0,0}),Text(visible=true, origin={0,-75},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100,-15},{100,15}}, fontName="Arial", textString
                =                                                                                   "HeartElasticities", lineColor={0,0,0}),Text(visible=true, origin={-35,60},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-45,-10},{45,10}}, textString
                =                                                                                   "HeartRate", fontName="Arial"),Text(visible=true, origin={-45,9.99999},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-45,-9.99999},{45,10.0001}}, textString
                =                                                                                   "AVDelay", fontName="Arial"),Text(visible=true, origin={65.6203,9.1224},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-25.6203,-10.8776},{25.6203,10.8776}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "AEt0"),Text(visible=true, origin={67.6853,59.26},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.6853,-9.26},{27.6853,9.26}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "VEt0"),Text(visible=true, origin={75.6203,-45.8776},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-25.6203,-10.8776},{25.6203,10.8776}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "T0")}), Diagram(graphics));
    end HeartElasticitiesBurkhoff;

    model HeartIntervalBurkhoff

      Modelica.Blocks.Interfaces.RealInput HR annotation(Placement(transformation(extent={{-134.0,8.0},{-94.0,48.0}}, origin={1.3363,-48.0}, rotation=0), iconTransformation(extent={{-134.0,8.0},{-94.0,48.0}}, origin={-6.0,24.2706}, rotation=0), visible=true));
      discrete Real HP(start=0)
        "heart period - duration of cardiac cycle in sec";
      Boolean b(start=false);
      Modelica.Blocks.Interfaces.RealOutput Tasyst
        "time elapsed from the beginning of atrial systole"                                            annotation(Placement(visible=true, transformation(origin={110.0,76.6334}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110.0,45.4846}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Tvsyst
        "time elapsed from the beginning of ventricular systole"                                            annotation(Placement(visible=true, transformation(origin={110.0,30.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110.0,12.8099}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AVDelay "AV interval [msec]" annotation(Placement(visible=true, transformation(origin={-0.0177,33.9592}, extent={{-134.0,8.0},{-94.0,48.0}}, rotation=0), iconTransformation(origin={-6.0,-18.0}, extent={{-134.0,8.0},{-94.0,48.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput T0
        "start time of cardiac cycle in sec"                                        annotation(Placement(visible=true, transformation(origin={110.0,-23.4743}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110,
                -36.728},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Real AVDelaySec "AV interval in sec";
      Modelica.Blocks.Interfaces.RealOutput EDTV
        "Ventricular end Diastolic Time in sec"                                                  annotation(Placement(visible=true, transformation(origin={110.0,-23.4743}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110,
                -61.728},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
    equation
      AVDelaySec=AVDelay*0.001;
      b=time - pre(T0) >= pre(HP);
      when {initial(),b} then
        T0=time;
        HP=60/HR;
        EDTV=T0+AVDelaySec;
      end when;
      Tasyst=time - T0;
      if time - T0 < AVDelaySec then
        Tvsyst=0;
      else
        Tvsyst=time - (T0 + AVDelaySec);
      end if;
      annotation(Diagram(graphics={Text(visible=true, origin={0.4019,22.9065},
                fillPattern=                                                               FillPattern.Solid, extent={{-59.5981,-52.9065},{59.5981,52.9065}}, fontSize=15, fontName="Arial",
                horizontalAlignment=                                                                                                    TextAlignment.Left, lineColor={0,0,0}, textString=
                                                                                                    "equation 
  AVDelaySec=AVDelay*0.001;
  b=time - pre(T0) >= pre(HP);
  when {initial(),b} then
    T0=time;
    HP=60/HR;
  end when;
  Tasyst=time - T0;
  if time - T0 < AVDelaySec then
    Tvsyst=0;
  else
    Tvsyst=time - (T0 + AVDelaySec);
  end if;")}, coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})), Icon(graphics={Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, origin={-22.8148,-7.7778}, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{42.8148,37.7778},{110.8148,75.5556}}, textString
                =                                                                                   "Tasyst", fontName="Arial"),Text(visible=true, origin={6.1844,12.2128}, lineColor={0,0,255}, extent={{-122.1844,53.5603},{113.8156,82.0142}}, textString
                =                                                                                   "Heart Intervals", fontName="Arial"),Text(visible=true, origin={-8.0,20.0}, lineColor={0,0,255}, extent={{-94.0,12.0},{-30.0,48.0}}, textString
                =                                                                                   "HR", fontName="Arial"),Line(visible=true, points={{-80.0,-6.0},{-80.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-70.0,-6.0},{-70.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-60.0,-6.0},{-60.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{-32.0,-6.0},{-32.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{30.0,-6.0},{30.0,-80.0}}, color={0,0,255}, thickness=0.5),Line(visible=true, points={{0.0,-6.0},{0.0,-80.0}}, color={0,0,255}, thickness=0.5),Text(visible=true, origin={-27.1481,39.1028}, lineColor={127,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{47.1481,-42.1852},{114.1481,-4.963}}, textString
                =                                                                                   "Tvsyst", fontName="Arial"),Text(              lineColor=
                  {127,0,0},                                                                                                    fillColor=
                  {0,0,255},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  34,-48},{88,-18}},                                                                                       fontName=
                  "Arial",
              textString="T0"),                                                                                                    Text(visible=true, origin={57.0182,-15.6217}, lineColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-155.3698,12.0},{-49.5861,48.0}}, textString
                =                                                                                   "AVDelay", fontName="Arial"),
                                                                                                    Text(              lineColor=
                  {127,0,0},                                                                                                    fillColor=
                  {0,0,255},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  34,-78},{88,-48}},                                                                                       fontName=
                  "Arial",
              textString="EDTV")},                                                                                                   coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false,initialScale=0.1, grid={10,10})));
    end HeartIntervalBurkhoff;

    model LeftHeartBurkhoff
      Constant VRAU(k=5) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={10,6}, rotation=0), visible=true));
      Constant VRVU(k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={12,8.2054}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.Constant Rmv(k=0.0025) annotation(Placement(transformation(extent={{-38.4945,-81.4825},{-27.4961,-71.2972}}, origin={8.4945,56.3898}, rotation=0), visible=true));
      CardiacValve MitralValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={0,32}, rotation=0), visible=true));
      CardiacValve AorticValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-6.5264,32}, rotation=0), visible=true));
      Constant CmitralValveBackflow(k=0) annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-6.5306,42}, rotation=0), visible=true));
      Constant CAorticValveBackflow(k=0) annotation(Placement(transformation(extent={{111.0,-78.0},{123.0,-66.0}}, origin={-57,70}, rotation=0), visible=true));
      BloodElasticCompartment LeftAtrium(V0=40) annotation(Placement(visible=true, transformation(origin={-54.3077,-48.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment LeftVentricle(V0=60) annotation(Placement(visible=true, transformation(origin={27.7449,-49}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{30,52},{80,92}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-70,52},{-20,92}})));
      HeamodynamicsDymola.Parts.Constant LAEes(k=0.25)
        "Left Atrium: End-Systolic Elastance [mmHg/ml]"                                                annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-78.5306,142}, rotation=0), visible=true));
      Constant LAAlpha(k=0.04)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-78.5306,132}, rotation=0), visible=true));
      Constant LABeta(k=0.3)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                         annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-78.5306,122}, rotation=0), visible=true));
      HeamodynamicsDymola.Parts.Constant LVEes(k=1.54)
        "Left Ventricle: End-Systolic Elastance [mmHg/ml]"                                                annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,142}, rotation=0), visible=true));
      Constant LVAlpha(k=0.024)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,132}, rotation=0), visible=true));
      Constant LVBeta(k=0.34)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={23.4694,122}, rotation=0), visible=true));
      Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent={{-74,3},{-62,15}})));
      Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{-6,-6},{6,6}}, rotation=270, origin={-54,-4})));
      Modelica.Blocks.Interfaces.RealInput AVGain
        "Ventricular-Atrial Interconnection Gain"                                           annotation(Placement(visible=true, transformation(origin={-88.699,13.3141}, extent={{-8.69911,-8.68595},{8.69892,8.68591}}, rotation=0), iconTransformation(origin={-83.657,-60.3684}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "VAtrial Elastance - realative value from 0 to 1 (Current Elastance/Maximal Elastance)"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-91.699,52.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-54.657,85.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Elastance - realative value from 0 to 1 (Current Elastance/Maximal Elastance)"
                                                                                                            annotation(Placement(visible=true, transformation(origin={4.30104,52.3141}, extent={{-9.69914,-9.686},{9.69896,9.68592}}, rotation=0), iconTransformation(origin={-4.657,101.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput PTH "Intrathoracic Pressure [mmHg]" annotation(Placement(visible=true, transformation(origin={-82.6985,37.3141}, extent={{-11.3015,-11.3141},{11.3015,11.3141}}, rotation=0), iconTransformation(origin={53.343,85.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-108,-52},{-100,-44}}), iconTransformation(extent={{-112,-8},{-92,12}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-52},{108,-44}}), iconTransformation(extent={{92,-8},{112,12}})));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-12,-90}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={38,-98})));
      Modelica.Blocks.Interfaces.RealOutput Volume annotation(Placement(transformation(extent={{64,-100},{84,-80}}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={-38,-98})));
      Modelica.Blocks.Math.Add stressedVolume annotation(Placement(transformation(extent={{-42,-96},{-30,-84}})));
      Modelica.Blocks.Math.Add volume annotation(Placement(transformation(extent={{42,-96},{54,-84}})));
      Constant RAorticValve(k=0.002) annotation(Placement(transformation(extent={{111.0,-78.0},{123.0,-66.0}}, origin={-57,54}, rotation=0), visible=true));
    equation
      connect(Rmv.y,MitralValve.outflowResistance) annotation(Line(visible=true, origin={-16.1506,-25.7321}, points={{
              -2.30108,5.8339},{1.1506,5.8339},{1.1506,-11.6679}},                                                                                                    color={0,0,127}));
      connect(LVEes.y,VentricularElastance.Ees) annotation(Line(visible=true, points={{9.8694,
              94.08},{14.9347,94.08},{14.9347,90.2},{27.75,90.2}},                                                                                         color={0,0,127}));
      connect(LAEes.y,AtrialElastance.Ees) annotation(Line(visible=true, points={{
              -92.1306,94.08},{-80.0653,94.08},{-80.0653,90.2},{-72.25,90.2}},                                                                             color={0,0,127}));
      connect(LeftVentricle.bloodFlowOutflow,AorticValve.bloodFlowInflow) annotation(Line(visible=true, origin={61.4177,-47.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(MitralValve.bloodFlowOutflow,LeftVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={3.587,-47.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(LeftVentricle.UnstressedVolume,VRVU.y) annotation(Line(visible=true, origin={10.2298,-13.4216}, points={{5.07915,
              -16.608},{5.07915,3.8854},{-2.2121,3.8854},{-2.2121,3.0837},{
              -1.8298,3.0837},{-1.8298,3.707}},                                                                                                    color={0,0,127}));
      connect(CAorticValveBackflow.y,AorticValve.inflowConductanceValue) annotation(Line(visible=true, origin={0,32}, points={{66.6,
              -33.88},{72.4263,-33.88},{81.4736,-33.5185},{81.4736,-69.2}},                                                                                                    color={0,0,127}));
      connect(VRAU.y,LeftAtrium.UnstressedVolume) annotation(Line(visible=true, origin={-69.4637,-12.3659}, points={{-6.1363,
              2.4459},{2.2267,2.4459},{2.2267,-17.4086},{2.72005,-17.4086}},                                                                                                    color={0,0,127}));
      connect(LeftAtrium.bloodFlowOutflow,MitralValve.bloodFlowInflow) annotation(Line(points={{
              -32.3527,-47.6965},{-20,-47.6965},{-20,-48}},                                                                                   color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(LeftAtrium.StressedVolume,AtrialElastance.Vs) annotation(Line(points={{
              -54.3077,-71.1436},{-54.3077,-82},{-96,-82},{-96,74},{-72.5,74}},                                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(LeftVentricle.StressedVolume,VentricularElastance.Vs) annotation(Line(points={{27.7449,
              -71.3987},{27.7449,-78},{96,-78},{96,42},{-4,42},{-4,74},{27.5,74}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Et,LeftAtrium.Elastance) annotation(Line(points={{-17.5,
              86},{-10,86},{-10,12},{-40.8124,12},{-40.8124,-29.7745}},                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(VentricularElastance.Et,LeftVentricle.Elastance) annotation(Line(points={{82.5,86},
              {90,86},{90,22},{41.2402,22},{41.2402,-30.0296}},                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(PTH,LeftVentricle.ExternalPressure) annotation(Line(points={{
              -82.6985,37.3141},{27.756,37.3141},{27.756,-25.8806}},                                                              color={0,0,127}, smooth=Smooth.None));
      connect(LABeta.y,AtrialElastance.Beta) annotation(Line(points={{-92.1306,
              74.08},{-80.0653,74.08},{-80.0653,79.6},{-72.5,79.6}},                                                                           color={0,0,127}, smooth=Smooth.None));
      connect(LAAlpha.y,AtrialElastance.Alpha) annotation(Line(points={{
              -92.1306,84.08},{-80.0653,84.08},{-80.0653,85.8},{-72.25,85.8}},                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(LVAlpha.y,VentricularElastance.Alpha) annotation(Line(points={{9.8694,
              84.08},{19.9347,84.08},{19.9347,85.8},{27.75,85.8}},                                                                               color={0,0,127}, smooth=Smooth.None));
      connect(LVBeta.y,VentricularElastance.Beta) annotation(Line(points={{9.8694,
              74.08},{19.9347,74.08},{19.9347,79.6},{27.5,79.6}},                                                                              color={0,0,127}, smooth=Smooth.None));
      connect(CmitralValveBackflow.y,MitralValve.inflowConductanceValue) annotation(Line(points={{-20.1306,-5.92},{-6,-5.92},{-6,-37.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(LeftVentricle.Pressure,product.u2) annotation(Line(points={{44.3408,
              -63.1006},{44.3408,-76},{-88,-76},{-88,5.4},{-75.2,5.4}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(product.y,add.u2) annotation(Line(points={{-61.4,9},{-57.6,9},{-57.6,3.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.u1,PTH) annotation(Line(points={{-50.4,3.2},{-50.4,37.3141},{
              -82.6985,37.3141}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(add.y,LeftAtrium.ExternalPressure) annotation(Line(points={{-54,
              -10.6},{-54,-25.6255},{-54.2966,-25.6255}},                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowInflow,LeftAtrium.bloodFlowInflow) annotation(Line(points={{-104,
              -48},{-89.5263,-48},{-89.5263,-47.7198},{-75.0526,-47.7198}},                                                                           color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(AorticValve.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(points={{86.8736,
              -48},{104,-48}},                                                                                 color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(VEt0,VentricularElastance.Et0) annotation(Line(points={{4.30095,
              52.3141},{15.1505,52.3141},{15.1505,64.4},{27.5,64.4}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(AEt0,AtrialElastance.Et0) annotation(Line(points={{-91.6991,
              52.3141},{-78,52.3141},{-78,64.4},{-72.5,64.4}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(AVGain,product.u1) annotation(Line(points={{-88.6991,13.3141},{
              -82.3495,13.3141},{-82.3495,12.6},{-75.2,12.6}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u1,VentricularElastance.Vs) annotation(Line(points={{-43.2,
              -86.4},{-46,-86.4},{-46,-78},{96,-78},{96,42},{-4,42},{-4,74},{
              27.5,74}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u2,AtrialElastance.Vs) annotation(Line(points={{-43.2,
              -93.6},{-54,-93.6},{-54,-82},{-96,-82},{-96,74},{-72.5,74}},                                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(LeftAtrium.Volume,volume.u2) annotation(Line(points={{-68.8291,
              -62.8455},{-68.8291,-100},{28,-100},{28,-93.6},{40.8,-93.6}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(volume.u1,LeftVentricle.Volume) annotation(Line(points={{40.8,
              -86.4},{13.2235,-86.4},{13.2235,-63.1006}},                                                               color={0,0,127}, smooth=Smooth.None));
      connect(volume.y,Volume) annotation(Line(points={{54.6,-90},{74,-90}}, color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.y,StressedVolume) annotation(Line(points={{-29.4,-90},{-12,-90}}, color={0,0,127}, smooth=Smooth.None));
      connect(AorticValve.outflowResistance,RAorticValve.y) annotation(Line(points={{72.4736,-37.4},{72.4736,-17.88},{66.6,-17.88}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(graphics={Text(visible=true, origin={-60,27.6988},
                fillPattern=                                                            FillPattern.Solid, extent={{-21.1674,-4.3012},{21.1674,4.3012}}, fontName="Arial", textString=
                                                                                                    "Intrathoracic pressure", lineColor={0,0,0}, fontSize=12,
                horizontalAlignment=                                                                                                    TextAlignment.Left)}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-66,-14},{68,14}}, fontName="Arial", textString
                =                                                                                   "LeftHeart"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-82,62},{-30,78}}, fontName="Arial", textString
                =                                                                                   "AEt0"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-46,76},{40,92}}, fontName="Arial", textString
                =                                                                                   "VEt0"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{-76,-66},{-24,-50}}, fontName="Arial", textString
                =                                                                                   "AVGain"),Text(visible=true, lineColor={0,0,255}, fillColor={0,0,255}, extent={{34,56},{86,72}}, textString
                =                                                                                   "PTH", fontName="Arial"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{-62,-88},{-10,-72}}, fontName="Arial", textString
                =                                                                                   "Volume"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{2,-112},{94,-50}}, fontName="Arial", textString
                =                                                                                   "Stressed Volume")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end LeftHeartBurkhoff;

    model CardiacOutputMeasurement
      Modelica.Blocks.Interfaces.RealOutput Pmean
        "Mean pressure during heart cycle in mmHg"                                           annotation(Placement(visible=true, transformation(origin={117.2188,-80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-30,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput SV "systolic volume in ml" annotation(Placement(visible=true, transformation(origin={81.7318,-43.3073}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={11.6389,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput HR
        "Heart rate (beats per min (unitless)"                                       annotation(Placement(visible=true, transformation(origin={-35.0,-80.0}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={-19.468,67.7473}, extent={{-9.74721,-9.46803},{9.7473,9.46803}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput CO "Cardiac output in L/min" annotation(Placement(visible=true, transformation(origin={88.0156,-52.6458}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={32,-69.7639}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      BloodFlowInflow Inflow annotation(Placement(transformation(extent={{-112,-10},{-92,10}}), iconTransformation(extent={{-100,-10},{-80,10}})));
      BloodFlowOutflow Outflow annotation(Placement(transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Interfaces.RealOutput P "Pressure [mmHg]" annotation(Placement(visible=true, transformation(origin={117.2188,-80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-50,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      discrete Real HP "length of cardiac cycle (sec)";
      Real Volume(start=0) "sum of volume through cyrdiac cycle";
      Real BloodFlow;
      Real T0 "start of cardiac cycel (sec)";
      Boolean b "event condition";
      Real SumPressure(start=0) "sum of pressure of cardiac cycle";
      Real Pmin(start=1000);
    initial equation
      T0=0;
      HP=60/HR;
      CO=0;
      SV=0;
      Pmean=0;
    equation
      Inflow.Q + Outflow.Q=0;
      Inflow.Pressure=Outflow.Pressure;
      P=Inflow.Pressure;
      BloodFlow=Inflow.Q;
      Pmin=min(Pmin, P);
      b=time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
      when {b} then
        T0=time "initial time of current cardiac cycle";
        HP=60/HR "calculation od time lenght of current cardiac cycle";
        SV=Volume
          "systolic volume (ml) is equal of total volume passed through this block";
        CO=SV*HR/1000
          "cardiac output calculation from systolic volume and heart rate (l/min)";
        Pmean=SumPressure/pre(HP)
          "mean pressure (torr) = summ pressure through cardiac cycle divided by length of previous cardiac cycle";
        reinit(Volume, 0) "reinitialisation of volume";
        reinit(SumPressure, 0) "reinitialisation of sum pressure";
        reinit(Pmin, Pmean);
      end when;
      der(Volume)=BloodFlow;
      der(SumPressure)=P;
      annotation(Diagram(graphics), Icon(graphics={Polygon(visible=true, fillColor={255,255,0},
                fillPattern =                                                                               FillPattern.Solid, points={{-100.0,60.0},{-100.0,-60.0},{60.0,-60.0},{100.0,0.0},{60.0,60.0},{-100.0,60.0}}),Text(visible=true, origin={11.5,-30.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "SV", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={31.5,-30.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "CO", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={-16.5,47.0}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.0,-14.5},{27.0,14.5}}, textString
                =                                                                                   "HR", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={-30,-17.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Pmean"),Text(origin={-50,-17.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "P   ")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={10,10})));
    end CardiacOutputMeasurement;

    model PressureFlowMeasurement
      Modelica.Blocks.Interfaces.RealOutput Pmean
        "Mean pressure during heart cycle in mmHg"                                           annotation(Placement(visible=true, transformation(origin={117.2188,-80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-30,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput SV "systolic volume in ml" annotation(Placement(visible=true, transformation(origin={81.7318,-43.3073}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={11.6389,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput HR
        "Heart rate (beats per min (unitless)"                                       annotation(Placement(visible=true, transformation(origin={-35.0,-80.0}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={-19.468,67.7473}, extent={{-9.74721,-9.46803},{9.7473,9.46803}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput CO "Cardiac output in L/min" annotation(Placement(visible=true, transformation(origin={88.0156,-52.6458}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={32,-69.7639}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      BloodFlowInflow Inflow annotation(Placement(transformation(extent={{-112,-10},{-92,10}}), iconTransformation(extent={{-100,-10},{-80,10}})));
      BloodFlowOutflow Outflow annotation(Placement(transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Interfaces.RealOutput Ps
        "Systolic pressure during heart cycle in mmHg"                                        annotation(Placement(visible=true, transformation(origin={117.2188,-80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-70,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Pd
        "Diastolic pressure during heart cycle in mmHg"                                        annotation(Placement(visible=true, transformation(origin={117.2188,-80.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-50,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      discrete Real HP "length of cardiac cycle (sec)";
      Real Volume(start=0) "sum of volume through cyrdiac cycle";
      Real BloodFlow;
      Real T0 "start of cardiac cycel (sec)";
      Boolean b "event condition";
      Real SumPressure(start=0) "sum of pressure of cardiac cycle";
      Real P "current pressure";
      Real Pmin(start=200);
      Real Pmax(start=0);
    initial equation
      T0=0;
      HP=60/HR;
      CO=0;
      SV=0;
      Ps=0;
      Pd=0;
      Pmean=0;
    equation
      Inflow.Q + Outflow.Q=0;
      Inflow.Pressure=Outflow.Pressure;
      P=Inflow.Pressure;
      BloodFlow=Inflow.Q;
      Pmax=max(Pmax, P);
      Pmin=min(Pmin, P);
      b=time - pre(T0) >= pre(HP) "b=true when new cardiac cycle begins";
      when {b} then
        T0=time "initial time of current cardiac cycle";
        HP=60/HR "calculation od time lenght of current cardiac cycle";
        SV=Volume
          "systolic volume (ml) is equal of total volume passed through this block";
        CO=SV*HR/1000
          "cardiac output calculation from systolic volume and heart rate (l/min)";
        Pmean=SumPressure/pre(HP)
          "mean pressure (torr) = summ pressure through cardiac cycle divided by length of previous cardiac cycle";
        Ps=Pmax "systolic pressure = maximum pressure during cardiac cycle";
        Pd=Pmin "diastolic pressure=minimal pressure during cardiac cycle";
        reinit(Volume, 0) "reinitialisation of volume";
        reinit(SumPressure, 0) "reinitialisation of sum pressure";
        reinit(Pmax, Pmean)
          "reinitialisation of maximal pressure to mean pressure";
        reinit(Pmin, Pmean)
          "reinitialisation minimal pressure to mean pressure";
      end when;
      der(Volume)=BloodFlow;
      der(SumPressure)=P;
      annotation(Diagram(graphics), Icon(graphics={Polygon(visible=true, fillColor={255,255,0},
                fillPattern =                                                                               FillPattern.Solid, points={{-100.0,60.0},{-100.0,-60.0},{60.0,-60.0},{100.0,0.0},{60.0,60.0},{-100.0,60.0}}),Text(visible=true, origin={-70,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Ps"),Text(visible=true, origin={11.5,-20.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "SV", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={31.5,-20.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "CO", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(origin={-6.5,42}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.0,-14.5},{27.0,14.5}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, textString
                =                                                                                   "HR", lineColor={0,0,0}),Text(visible=true, origin={-50,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Pd"),Text(visible=true, origin={-30,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Pmean")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10})));
    end PressureFlowMeasurement;

    model PressureSourceInflow
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(visible=true, transformation(origin={129.85,5.5}, extent={{-14.85,-10.5},{14.85,10.5}}, rotation=0), iconTransformation(origin={90.0,2.3783}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput DesiredPressure
        "\"desired blood pressure in mmHg\""                                                    annotation(Placement(visible=true, transformation(origin={-150.0,5.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-20.0,50.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-90)));
    equation
      bloodFlowOutflow.Pressure=DesiredPressure;
      annotation(Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Polygon(visible=true, origin={-16.6667,-8.3333}, fillColor={255,170,127},
                fillPattern =                                                                                                   FillPattern.Solid, points={{-83.3333,58.3333},{66.6667,58.3333},{116.6667,8.3333},{66.6667,-41.6667},{-83.3333,-41.6667},{-83.3333,-41.6667}}),Text(visible=true, origin={-14.121,21.3787},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-40.2821,-18.6213},{40.2821,18.6213}}, textString
                =                                                                                   "DesiredPressure", fontName="Arial")}), Diagram(coordinateSystem(extent={{-160.0,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Text(visible=true, origin={-10.0,2.965}, fillPattern=FillPattern.Solid, extent={{-65.7957,-9.9827},{65.7957,9.9827}}, textString="equation 
  bloodFlowOutflow.Pressure=DesiredPressure;", fontSize=14, fontName="Arial", horizontalAlignment=TextAlignment.Left)}));
    end PressureSourceInflow;

    model PressureSourceOutflow
      Modelica.Blocks.Interfaces.RealInput DesiredPressure
        "\"desired blood pressure in mmHg\""                                                    annotation(Placement(visible=true, transformation(origin={-150.0,5.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-20.0,50.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-90)));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-110,-10},{-90,10}})));
    equation
      bloodFlowInflow.Pressure=DesiredPressure;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.1, grid={10,10}), graphics={Polygon(visible=true, origin={-16.6667,-8.3333}, fillColor={255,170,127},
                fillPattern =                                                                                                   FillPattern.Solid, points={{-83.3333,58.3333},{66.6667,58.3333},{116.6667,8.3333},{66.6667,-41.6667},{-83.3333,-41.6667},{-83.3333,-41.6667}}),Text(visible=true, origin={-14.121,21.3787},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-40.2821,-18.6213},{40.2821,18.6213}}, textString
                =                                                                                   "DesiredPressure", fontName="Arial")}), Diagram(coordinateSystem(extent={{-160.0,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Text(visible=true, origin={-10.0,2.965}, fillPattern=FillPattern.Solid, extent={{-65.7957,-9.9827},{65.7957,9.9827}}, textString="equation 
  bloodFlowOutflow.Pressure=DesiredPressure;", fontSize=14, fontName="Arial", horizontalAlignment=TextAlignment.Left)}));
    end PressureSourceOutflow;

    model VaryingPressure "End-Systolic Pressure-Volume Realitonship"
      Modelica.Blocks.Interfaces.RealInput V "volume in ml" annotation(Placement(visible=true, transformation(origin={-148.3812,23.9672}, extent={{-16.6188,-16.6188},{16.6188,16.6188}}, rotation=0), iconTransformation(origin={-120,6.1888}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vu "Unstressed volume in ml" annotation(Placement(visible=true, transformation(origin={-114.5956,-44.5956}, extent={{-15.4044,-15.4044},{15.4044,15.4044}}, rotation=0), iconTransformation(origin={-85,116.564}, extent={{-16.5637,-15},{16.5637,15}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput Ees
        "end-systolic elastance in mmHg/ml"                                        annotation(Placement(visible=true, transformation(origin={-67.5,-57.5}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={-46.3833,116.593}, extent={{-16.5928,-16.3833},{16.5931,16.3833}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput P "pressure in mmHg" annotation(Placement(visible=true, transformation(origin={160.0,5.0}, extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={115,-47.692}, extent={{-15.9395,-15.9395},{15.9395,15.9395}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Beta
        "coefficient of end diastolic pressure-volume curve"                                         annotation(Placement(visible=true, transformation(origin={-79.101,24.101}, extent={{-14.101,-14.101},{14.101,14.101}}, rotation=0), iconTransformation(origin={43.8268,116.691}, extent={{-16.6911,-16.1732},{16.691,16.1732}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput Et0
        "relative elastance value (Elastance/End-Systolic Elastance)"                                        annotation(Placement(visible=true, transformation(origin={9.0084,-10.9916}, extent={{-14.0084,-14.0084},{14.0084,14.0084}}, rotation=0), iconTransformation(origin={-120,-50}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0)));
      EDPVR EDPVR1 annotation(Placement(visible=true, transformation(origin={-15.7523,37.5}, extent={{-22.5,-22.5},{22.5,22.5}}, rotation=0)));
      ESPVR ESPVR1 annotation(Placement(visible=true, transformation(origin={-13.341,-54.9769}, extent={{-21.659,-21.659},{21.659,21.659}}, rotation=0)));
      Constant constant1(k=1) annotation(Placement(visible=true, transformation(origin={16.0,15.0}, extent={{-4.0,-4.0},{4.0,4.0}}, rotation=0)));
      Modelica.Blocks.Math.Feedback feedback1 annotation(Placement(visible=true, transformation(origin={43.3289,15.0}, extent={{-11.6711,-11.6711},{11.6711,11.6711}}, rotation=-360)));
      Modelica.Blocks.Math.Product product1 annotation(Placement(visible=true, transformation(origin={80.0,-17.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Math.Product product2 annotation(Placement(visible=true, transformation(origin={80.0,21.6599}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Math.Add add1 annotation(Placement(visible=true, transformation(origin={118.4873,5.0}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Alpha
        "coefficient of end diastolic pressure-volume curve"                                          annotation(Placement(visible=true, transformation(origin={-67.5,
                37.5},                                                                                                    extent={{-12.5,-12.5},{12.5,12.5}}, rotation=0), iconTransformation(origin={3.6167,116.593}, extent={{-16.5928,-16.3833},{16.5931,16.3833}}, rotation=-90)));
    equation
      connect(Et0,product1.u1) annotation(Line(visible=true, origin={45.8512,-9.9958}, points={{-36.8428,-0.9958},{7.347,-0.9958},{7.347,-0.9958},{22.1488,-1.0042}}, color={0,0,127}));
      connect(Et0,feedback1.u2) annotation(Line(visible=true, origin={34.4762,-2.6642}, points={{-25.4678,-8.3274},{8.3075,-8.3274},{8.3075,8.32732},{8.8527,8.32732}}, color={0,0,127}));
      connect(add1.y,P) annotation(Line(visible=true, origin={144.7437,5.0}, points={{-15.2564,0},{15.2563,0}}, color={0,0,127}));
      connect(product1.y,add1.u2) annotation(Line(visible=true, origin={99.3718,-8.0}, points={{-8.3718,-9.0},{0.6282,-9.0},{0.6282,7.0},{7.1155,7.0}}, color={0,0,127}));
      connect(ESPVR1.Pes,product1.u2) annotation(Line(visible=true, origin={41.9011,-37.3452}, points={{
              -32.2967,-16.3453},{3.0989,-16.3453},{3.0989,14.3452},{26.0989,
              14.3452}},                                                                                                    color={0,0,127}));
      connect(EDPVR1.Ped,product2.u1) annotation(Line(visible=true, origin={48.8168,32.2128}, points={{
              -40.7327,6.62359},{1.1832,6.62359},{1.1832,-4.3471},{19.1832,
              -4.3471},{19.1832,-4.5529}},                                                                                                    color={0,0,127}));
      connect(feedback1.y,product2.u2) annotation(Line(visible=true, origin={62.9582,15.33}, points={{-9.12531,-0.33},{2.0418,-0.33},{2.0418,0.3299},{5.0418,0.3299}}, color={0,0,127}));
      connect(constant1.y,feedback1.u1) annotation(Line(visible=true, origin={27.9269,15.04}, points={{-7.5269,0.04},{0.7309,0.04},{0.7309,-0.04},{6.06512,-0.04}}, color={0,0,127}));
      connect(Alpha,EDPVR1.Alpha) annotation(Line(visible=true, origin={-48.5505,34.5354}, points={{
              -18.9495,2.9646},{6.6675,2.9646},{6.6675,-0.464625},{9.6675,
              -0.464625}},                                                                                                    color={0,0,127}));
      connect(Ees,ESPVR1.Ees) annotation(Line(visible=true, origin={-45.0803,-57.889}, points={{
              -22.4197,0.389},{6.4732,0.389},{6.4732,-0.388948},{9.47318,
              -0.388948}},                                                                                                    color={0,0,127}));
      connect(Beta,EDPVR1.Beta) annotation(Line(visible=true, origin={-50.775,23.6859}, points={{-28.326,
              0.4151},{8.442,0.4151},{8.442,-0.415125},{11.442,-0.415125}},                                                                                            color={0,0,127}));
      connect(product2.y,add1.u1) annotation(Line(visible=true, origin={100.1316,16.3299}, points={{-9.1316,5.33},{1.3879,5.33},{1.3879,-5.3299},{6.3557,-5.3299}}, color={0,0,127}));
      connect(V,EDPVR1.Ved) annotation(Line(visible=true, origin={-75.3253,49.1216}, points={{
              -73.0559,-25.1544},{-24.6747,-25.1544},{-24.6747,15.8784},{
              25.3253,15.8784},{25.3253,5.8784},{35.8772,5.8784},{35.8772,
              5.7626}},                                                                                                    color={0,0,127}));
      connect(V,ESPVR1.Ves) annotation(Line(visible=true, origin={-91.1331,-6.1048}, points={{
              -57.2481,30.072},{-8.8669,30.072},{-8.8669,-32.1377},{54.982,
              -32.1377}},                                                                                                    color={0,0,127}));
      connect(Vu,EDPVR1.Vu) annotation(Line(visible=true, origin={-68.1372,22.2627}, points={{
              -46.4584,-66.8583},{-18.6462,-66.8583},{-18.6462,32.7373},{
              13.1372,32.7373},{13.1372,22.7373},{28.7382,22.7373},{28.7382,
              22.7673}},                                                                                                    color={0,0,127}));
      connect(Vu,ESPVR1.Vu) annotation(Line(visible=true, origin={-65.1748,-46.162}, points={{
              -49.4208,1.5664},{10.1748,1.5664},{10.1748,-1.56639},{29.071,
              -1.56639}},                                                                                                    color={0,0,127}));
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,255}, extent={{-100.0,-100.0},{100.0,100.0}}),Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100,-100},{100,100}}),Text(visible=true, origin={2.451,-127.3412},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-80.0,-22.6588},{80.0,22.6588}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true, origin={-73.4886,5.7298},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-20.0,-17.805},{20.0,17.805}}, textString
                =                                                                                   "V", fontName="Arial"),Text(origin={-85,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-10,-10},{10,10}}, fontName="Arial", textString
                =                                                                                   "Vu", lineColor={0,0,0}),Text(origin={-47.5,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-12.5,-15},{12.5,15}}, fontName="Arial", textString
                =                                                                                   "Ees", lineColor={0,0,0}),Text(origin={85.5241,-45.6705},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-28.0663,-21.0014},{28.0663,21.0014}}, fontName="Arial", textString
                =                                                                                   "P", lineColor={0,0,0}),Text(origin={42.5,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-17.5,-10},{17.5,9.99995}}, fontName="Arial", textString
                =                                                                                   "Beta", lineColor={0,0,0}),Text(origin={-73.7892,-47.805},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-20.0,-17.805},{20.0,17.805}}, fontName="Arial", textString
                =                                                                                   "Et0", lineColor={0,0,0}),Line(points={{-48,-100},{74,16}}, color={255,0,0}, smooth=Smooth.None),Line(points={{-48,-100},{-6,48}}, color={0,0,0}, smooth=Smooth.None),Line(points={{-48,-100},{16,-98},{40,-96},{56,-94},{62,-92},{68,-90},{72,-88},{76,-86}}, color={0,0,0}, smooth=Smooth.None),Line(points={{-48,50},{-48,-100},{76,-100}}, color={0,0,0}, smooth=Smooth.None),Polygon(points={{64,10},{60,18},{68,14},{64,10}}, lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{0,-4},{-4,4},{4,0},{0,-4}}, lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, origin={72,7}, rotation=180),Text(origin={81.4583,84.7002},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-13.5417,-10.2999},{13.5417,10.2998}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "PTH"),Text(origin={-2.5,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-22.5,-9.99999},{22.5,9.99991}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "Alpha")}), Diagram(coordinateSystem(extent={{-160,
                -105},{148.5,105}},                                                                                                    preserveAspectRatio=false,initialScale=0.1, grid={5,5}),
            graphics));
    end VaryingPressure;

    model PulmonaryCirculationBurkhoff
      Modelica.Blocks.Interfaces.RealInput IntrathoracicPresssure "in torr" annotation(Placement(visible=true, transformation(origin={-112,70.0161}, extent={{-12,-11.984},{12,11.9839}}, rotation=0), iconTransformation(origin={12.0,48.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      Constant UVaproxPulm(k=20)
        "Unstressed volume in proximal pulmonary artery [ml]"                          annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-96,34}), visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-144,-6},{-134,6}}), iconTransformation(extent={{-120,-10},{-100,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-6},{110,6}}), iconTransformation(extent={{96,-12},{116,8}})));
      BloodCapacitanceCompartment PulmonaryArteryProximal(V0=30) annotation(Placement(transformation(extent={{-94,-16},{-64,14}})));
      BloodCapacitanceCompartment PulmonaryArtery(V0=810) annotation(Placement(transformation(extent={{-28,-16},{2,14}})));
      BloodCapacitanceCompartment PulmonaryVeins(V0=240) annotation(Placement(transformation(extent={{34,-16},{64,14}})));
      VariableBloodResistor pulmonaryProximalArteryResistance annotation(Placement(transformation(extent={{-53,-8},{-37,8}})));
      VariableBloodResistor pulmonaryArterialResistance annotation(Placement(transformation(extent={{9,-9},{27,9}})));
      VariableBloodResistor pulmonaryVenousResistance annotation(Placement(transformation(extent={{72,-10},{92,10}})));
      Modelica.Blocks.Math.Add3 StressedVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-49,-73})));
      Modelica.Blocks.Interfaces.RealOutput PulmonaryBloodVolume annotation(Placement(transformation(extent={{80,-96},{100,-76}}), iconTransformation(extent={{-7,-7},{7,7}}, rotation=270, origin={-79,-51})));
      Modelica.Blocks.Interfaces.RealOutput PulmonaryStressedVolume annotation(Placement(transformation(extent={{-26,-102},{-6,-82}}), iconTransformation(extent={{-7,-7},{7,7}}, rotation=270, origin={77,-51})));
      Modelica.Blocks.Math.Add3 BloodVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=270, origin={31,-71})));
      Constant CaproxPulm(k=1)
        "Pulmonary Proximal Artery Capacitance [ml/mmHg]"                        annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={-50,32}), visible=true));
      Constant CaPulm(k=20) "Pulmonary Artery Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={10,32}), visible=true));
      Constant CvPulm(k=7) "Pulmonary Venous Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={70,30}), visible=true));
      Constant RcPulm(k=0.02)
        "Pulmonary Proximal Artery Characteristic Impedance [mmHg sec/ml]"                       annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={-36,18}), visible=true));
      Constant RaPulm(k=0.02) "Pulmonary Arterial Resistance [mmHg sec/ml]" annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={24,18}), visible=true));
      Constant RvPulm(k=0.015)
        "Pulmonary Venous Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={96,22}), visible=true));
      Constant UVaPulm(k=600) "Unstressed volume in pulmonary arteries [ml]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-36,33}), visible=true));
      Constant UVvPulm(k=100) "Unstressed volume in pulmonary veins [ml]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={26,33}), visible=true));
      VariableBloodResistor pulmonaryProximalImpedance annotation(Placement(transformation(extent={{-123,-8},{-107,8}})));
      Constant RcsPulm(k=0.02)
        "Pulmonary Proximal Artery Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={-104,18}), visible=true));
    equation
      connect(PulmonaryArteryProximal.StressedVolume,StressedVolume.u3) annotation(Line(points={{-79,
              -16.8473},{-79,-50},{-56.2,-50},{-56.2,-62.2}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryArtery.StressedVolume,StressedVolume.u2) annotation(Line(points={{-13,
              -16.8473},{-13,-48},{-49,-48},{-49,-62.2}},                                                                                color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryVeins.StressedVolume,StressedVolume.u1) annotation(Line(points={{49,
              -16.8473},{49,-54},{-41.8,-54},{-41.8,-62.2}},                                                                              color={0,0,127}, smooth=Smooth.None));
      connect(StressedVolume.y,PulmonaryStressedVolume) annotation(Line(points={{-49,-82.9},{-49,-92},{-16,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u1,PulmonaryVeins.Volume) annotation(Line(points={{38.2,
              -60.2},{38.2,-26},{37.6081,-26},{37.6081,-10.5268}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u2,PulmonaryArtery.Volume) annotation(Line(points={{31,
              -60.2},{31,-38},{-24.3919,-38},{-24.3919,-10.5268}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u3,PulmonaryArteryProximal.Volume) annotation(Line(points={{23.8,
              -60.2},{23.8,-42},{-90.3919,-42},{-90.3919,-10.5268}},                                                                              color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryArteryProximal.ExternalPressure,IntrathoracicPresssure) annotation(Line(points={{-78.242,
              14.9669},{-78.242,70.016},{-112,70.016}},                                                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryArtery.ExternalPressure,IntrathoracicPresssure) annotation(Line(points={{-12.242,
              14.9669},{-12.242,70.016},{-112,70.016}},                                                                                           color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryVeins.ExternalPressure,IntrathoracicPresssure) annotation(Line(points={{49.758,
              14.9669},{49.758,70.016},{-112,70.016}},                                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowOutflow,pulmonaryVenousResistance.Outflow) annotation(Line(points={{105,0},{91,0}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(PulmonaryArteryProximal.bloodFlowOutflow,pulmonaryProximalArteryResistance.Inflow) annotation(Line(points={{-63.125,
              -0.24193},{-62,-0.24193},{-62,0},{-52.2,0}},                                                                                                    color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryProximalArteryResistance.Outflow,PulmonaryArtery.bloodFlowInflow) annotation(Line(points={{-37.8,0},{-28,0},{-28,-0.258775}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(PulmonaryArtery.bloodFlowOutflow,pulmonaryArterialResistance.Inflow) annotation(Line(points={{2.87499,
              -0.24193},{10.4375,-0.24193},{10.4375,0},{9.9,0}},                                                                                                    color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryArterialResistance.Outflow,PulmonaryVeins.bloodFlowInflow) annotation(Line(points={{26.1,0},{34,0},{34,-0.258775}}, color={255,0,0}, smooth=Smooth.None, arrow={Arrow.Filled,Arrow.None}, thickness=1));
      connect(PulmonaryVeins.bloodFlowOutflow,pulmonaryVenousResistance.Inflow) annotation(Line(points={{64.875,
              -0.24193},{74,-0.24193},{74,0},{73,0}},                                                                                                   color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(PulmonaryBloodVolume,BloodVolume.y) annotation(Line(points={{90,-86},{31,-86},{31,-80.9}}, color={0,0,127}, smooth=Smooth.None));
      connect(UVaproxPulm.y,PulmonaryArteryProximal.UnstressedVolume) annotation(Line(points={{-91.6,
              33.92},{-88.7421,33.92},{-88.7421,11.9669}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(UVvPulm.y,PulmonaryVeins.UnstressedVolume) annotation(Line(points={{30.4,
              32.92},{39.258,32.92},{39.258,11.9669}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(UVaPulm.y,PulmonaryArtery.UnstressedVolume) annotation(Line(points={{-31.6,
              32.92},{-22.742,32.92},{-22.742,11.9669}},                                                                            color={0,0,127}, smooth=Smooth.None));
      connect(CaproxPulm.y,PulmonaryArteryProximal.Capacitance) annotation(Line(points={{-54.4,
              32.08},{-69.242,32.08},{-69.242,11.9669}},                                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(CaPulm.y,PulmonaryArtery.Capacitance) annotation(Line(points={{5.6,
              32.08},{-3.24198,32.08},{-3.24198,11.9669}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(PulmonaryVeins.Capacitance,CvPulm.y) annotation(Line(points={{58.758,
              11.9669},{58.758,30.08},{65.6,30.08}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(RcPulm.y,pulmonaryProximalArteryResistance.BloodResistance) annotation(Line(points={{-40.4,17.92},{-45,17.92},{-45,7.40552}}, color={0,0,127}, smooth=Smooth.None));
      connect(RaPulm.y,pulmonaryArterialResistance.BloodResistance) annotation(Line(points={{19.6,17.92},{18,17.92},{18,8.33121}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryVenousResistance.BloodResistance,RvPulm.y) annotation(Line(points={{82,9.2569},{82,21.92},{91.6,21.92}}, color={0,0,127}, smooth=Smooth.None));
      connect(RcsPulm.y,pulmonaryProximalImpedance.BloodResistance) annotation(Line(points={{-108.4,17.92},{-115,17.92},{-115,7.40552}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryProximalImpedance.Inflow,bloodFlowInflow) annotation(Line(points={{-122.2,0},{-139,0}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryProximalImpedance.Outflow,PulmonaryArteryProximal.bloodFlowInflow) annotation(Line(points={{-107.8,0},{-100,0},{-100,-0.258775},{-94,-0.258775}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      annotation(Diagram(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2}), graphics), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{92.0,-44.0},{110.0,46.0}}),Rectangle(visible=true, fillColor={255,170,85}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-44.0},{102.0,46.0}}),Ellipse(visible=true, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-110.0,-44.0},{-92.0,46.0}}),Text(origin={-1.393,75.7326}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-84.607,-91.7326},{89.393,-59.7326}}, fontName="Arial", textString
                =                                                                                   "Pulmonary Circulation"),Text(
                lineThickness =                                                                                                   1, extent={{-92.0,24.0},{110.0,34.0}}, fontName="Arial", textString
                =                                                                                   "intrathoracic pressure", lineColor={0,0,0}),Text(
                lineThickness =                                                                                                   1, extent={{-94,-42},{-42,-32}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "blood volume"),Text(
                lineThickness =                                                                                                   1, extent={{52,-42},{104,-32}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "stressed volume")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end PulmonaryCirculationBurkhoff;

    model BloodCapacitanceCompartment
      "Elastic compartment with unstressed volume"
      Modelica.Blocks.Interfaces.RealInput Capacitance "\"in ml/mmHg\"" annotation(Placement(visible=true, transformation(origin={-120.0,25.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-360), iconTransformation(origin={65.0535,86.446}, extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Volume(start=V0) "volume in ml" annotation(Placement(visible=true, transformation(origin={110.0,83.484}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-360), iconTransformation(origin={-75.9457,-63.5122}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput ExternalPressure "\"in torr\"" annotation(Placement(visible=true, transformation(origin={-122.4202,80.0}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-360), iconTransformation(origin={0.0535,
                106.446},                                                                                                    extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealInput UnstressedVolume "in ml" annotation(Placement(visible=true, transformation(origin={-120.0,52.5332}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=-360), iconTransformation(origin={-64.947,86.446}, extent={{-11.8243,-11.8243},{11.8243,11.8243}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume(start=V0)
        "stressed volume in ml"                                                              annotation(Placement(visible=true, transformation(origin={118.4,75.084}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-360), iconTransformation(origin={0.0,-105.6484}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Pressure "Blood pressure in torr" annotation(Placement(visible=true, transformation(origin={110.0,47.8731}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-360), iconTransformation(origin={83.8647,-64.9987}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      BloodFlowConnector bloodFlowInflow annotation(Placement(transformation(extent={{-10.0,-110.0},{10.0,-90.0}}, origin={-135.0,100.0}, rotation=0), iconTransformation(extent={{-10.0,-110.0},{10.0,-90.0}}, origin={-100.0,104.9415}, rotation=0), visible=true));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(visible=true, transformation(origin={107.8317,0.0}, extent={{-14.85,-10.5},{14.85,10.5}}, rotation=0), iconTransformation(origin={105.8333,5.0538}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      parameter Real V0=1 "initial volume in ml";
      Real TransmuralPressure;
    equation
      bloodFlowInflow.Pressure=bloodFlowOutflow.Pressure;
      bloodFlowInflow.Pressure=Pressure;
      TransmuralPressure=Pressure - ExternalPressure;
      der(Volume)=bloodFlowInflow.Q + bloodFlowOutflow.Q;
      StressedVolume=Volume - UnstressedVolume;
      if StressedVolume > 0 then
        TransmuralPressure=StressedVolume/Capacitance;
      else
        TransmuralPressure=0;
      end if;
      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}},         preserveAspectRatio=false,initialScale=0.1, grid={10,10}), graphics={Ellipse(visible=true, origin={2.9379,0.0}, fillColor={215,215,215},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-102.9379,-100.0},{102.9379,100.0}}),Text(visible=true, origin={-2.3307,97.022}, extent={{-172.4727,-81.0},{177.1341,-41.0}}, textString
                =                                                                                   "%name", fontName="Arial"),Text(visible=true, origin={-79.158,-2.0682},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, textString
                =                                                                                   "Volume", fontName="Arial"),Text(visible=true, origin={
                  -59.158,97.932},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.555,-50.2772},{99.1581,-27.9317}}, textString
                =                                                                                   "UV", fontName="Arial"),Text(visible=true, origin={
                  68.647,102.883},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-85.5943,-45.0001},{84.4058,-25.0002}}, textString
                =                                                                                   "Capacitance", fontName="Arial"),Text(              origin={
                  5.842,127.932},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{-100.555,-50.2772},{99.1581,-27.9317}},
                                                                                                    fontName=
                  "Arial",
              textString="Pext",
              lineColor={0,0,0}),                                                                                                    Text(visible=true, origin={90.5547,-2.0682},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.5547,-50.2773},{99.1581,-27.9318}}, textString
                =                                                                                   "Pressure", fontName="Arial"),Text(visible=true, origin={5.1448,-48.9688},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-79.4963,-45.4577},{78.3922,-25.2542}}, textString
                =                                                                                   "StressedVolume", fontName="Arial")}), Diagram(coordinateSystem(extent={{-148.5,-105.0},{148.5,105.0}}, preserveAspectRatio=true, initialScale=0.1, grid={5,5}), graphics={Text(visible=true, origin={-7.1775,25.0},
                fillPattern=                                                                                                    FillPattern.Solid, extent={{-70.2272,-65.0},{70.2272,65.0}}, textString=
                                                                                                    "equation 
  bloodFlowInflow.Pressure=bloodFlowOutflow.Pressure;
  bloodFlowInflow.Pressure=Pressure;
  TransmuralPressure=Pressure - ExternalPressure;
  der(Volume)=bloodFlowInflow.Q + bloodFlowOutflow.Q;
  StressedVolume=Volume - UnstressedVolume;
  if StressedVolume > 0 then
    TransmuralPressure=Elastance*StressedVolume;
  else
    TransmuralPressure=0;
  end if;", fontSize=14, fontName="Arial", horizontalAlignment=TextAlignment.Left)}));
    end BloodCapacitanceCompartment;

    model SystemicCirculationBurkhoff
      Modelica.Blocks.Interfaces.RealInput IntrathoracicPresssure "in torr" annotation(Placement(visible=true, transformation(origin={-112,70.0161}, extent={{-12,-11.984},{12,11.9839}}, rotation=0), iconTransformation(origin={12.0,48.0}, extent={{-8.0,-8.0},{8.0,8.0}}, rotation=-90)));
      Constant UVaproxSys(k=30) "Unstressed volume in proximal aorta [ml]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-96,34}), visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-138,-6},{-128,6}}), iconTransformation(extent={{106,-10},{126,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-6},{110,6}}), iconTransformation(extent={{-122,-6},{-102,14}})));
      BloodCapacitanceCompartment AortaProximal(V0=35) annotation(Placement(transformation(extent={{-94,-16},{-64,14}})));
      BloodCapacitanceCompartment SystemicArteries(V0=835) annotation(Placement(transformation(extent={{-28,-16},{2,14}})));
      BloodCapacitanceCompartment SystemicVeins(V0=2850) annotation(Placement(transformation(extent={{34,-16},{64,14}})));
      VariableBloodResistor ProximalAortaResistance annotation(Placement(transformation(extent={{-53,-8},{-37,8}})));
      VariableBloodResistor SystemicArterialResistance annotation(Placement(transformation(extent={{9,-9},{27,9}})));
      VariableBloodResistor SystemicVenousResistance annotation(Placement(transformation(extent={{72,-10},{92,10}})));
      Modelica.Blocks.Math.Add3 StressedVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-49,-73})));
      Modelica.Blocks.Interfaces.RealOutput SystemicBloodVolume annotation(Placement(transformation(extent={{80,-96},{100,-76}}), iconTransformation(extent={{-7,-7},{7,7}}, rotation=270, origin={-77,-51})));
      Modelica.Blocks.Interfaces.RealOutput SystemicStressedVolume annotation(Placement(transformation(extent={{-26,-102},{-6,-82}}), iconTransformation(extent={{-7,-7},{7,7}}, rotation=270, origin={87,-51})));
      Modelica.Blocks.Math.Add3 BloodVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=270, origin={31,-71})));
      Constant CaproxSys(k=0.1)
        "Pulmonary Proximal Aortic Capacitance [ml/mmHg]"                         annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={-50,32}), visible=true));
      Constant CaSys(k=1.7) "Systemic Artery Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={10,32}), visible=true));
      Constant CvSys(k=70) "Systemnic Venous Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=0, origin={70,30}), visible=true));
      Constant RcsSys(k=0.024)
        "Proximal Aortic Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={-38,18}), visible=true));
      Constant RaSys(k=0.75) "Systemic Arterial Resistance [mmHg sec/ml]" annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={24,18}), visible=true));
      Constant RvSys(k=0.02)
        "Systemic Venous Characteristic Impedance [mmHg sec/ml]"                      annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={96,22}), visible=true));
      Constant UVaSys(k=700) "Unstressed volume in systemic arteries [ml]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-36,33}), visible=true));
      Constant UVvSys(k=2230) "Unstressed volume in systemic veins [ml]" annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={26,33}), visible=true));
      Constant ExternelPressure(k=0) "External Presseure [mmHg]" annotation(Placement(transformation(extent={{6,-6},{-6,6}}, rotation=0, origin={86,70}), visible=true));
      VariableBloodResistor SystemicProximalImpedance annotation(Placement(transformation(extent={{-117,-8},{-101,8}})));
      Constant RcsProx(k=0.02)
        "Proximal Aortic Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={-100,22}), visible=true));
    equation
      connect(AortaProximal.StressedVolume,StressedVolume.u3) annotation(Line(points={{-79,
              -16.8473},{-79,-50},{-56.2,-50},{-56.2,-62.2}},                                                                              color={0,0,127}, smooth=Smooth.None));
      connect(SystemicArteries.StressedVolume,StressedVolume.u2) annotation(Line(points={{-13,
              -16.8473},{-13,-48},{-49,-48},{-49,-62.2}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(SystemicVeins.StressedVolume,StressedVolume.u1) annotation(Line(points={{49,
              -16.8473},{49,-54},{-41.8,-54},{-41.8,-62.2}},                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(StressedVolume.y,SystemicStressedVolume) annotation(Line(points={{-49,-82.9},{-49,-92},{-16,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u1,SystemicVeins.Volume) annotation(Line(points={{38.2,
              -60.2},{38.2,-26},{37.6081,-26},{37.6081,-10.5268}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u2,SystemicArteries.Volume) annotation(Line(points={{31,
              -60.2},{31,-38},{-24.3919,-38},{-24.3919,-10.5268}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(BloodVolume.u3,AortaProximal.Volume) annotation(Line(points={{23.8,
              -60.2},{23.8,-42},{-90.3919,-42},{-90.3919,-10.5268}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(AortaProximal.ExternalPressure,IntrathoracicPresssure) annotation(Line(points={{-78.992,
              14.9669},{-78.992,70.016},{-112,70.016}},                                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowOutflow,SystemicVenousResistance.Outflow) annotation(Line(points={{105,0},{91,0}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(AortaProximal.bloodFlowOutflow,ProximalAortaResistance.Inflow) annotation(Line(points={{-63.125,
              -0.24193},{-62,-0.24193},{-62,0},{-52.2,0}},                                                                                                 color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(ProximalAortaResistance.Outflow,SystemicArteries.bloodFlowInflow) annotation(Line(points={{-37.8,0},{-28,0},{-28,-0.258775}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(SystemicArteries.bloodFlowOutflow,SystemicArterialResistance.Inflow) annotation(Line(points={{2.87499,
              -0.24193},{10.4375,-0.24193},{10.4375,0},{9.9,0}},                                                                                                    color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(SystemicArterialResistance.Outflow,SystemicVeins.bloodFlowInflow) annotation(Line(points={{26.1,0},{34,0},{34,-0.258775}}, color={0,0,255}, smooth=Smooth.None, arrow={Arrow.Filled,Arrow.None}, thickness=1));
      connect(SystemicVeins.bloodFlowOutflow,SystemicVenousResistance.Inflow) annotation(Line(points={{64.875,
              -0.24193},{74,-0.24193},{74,0},{73,0}},                                                                                                 color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(SystemicBloodVolume,BloodVolume.y) annotation(Line(points={{90,-86},{31,-86},{31,-80.9}}, color={0,0,127}, smooth=Smooth.None));
      connect(UVaproxSys.y,AortaProximal.UnstressedVolume) annotation(Line(points={{-91.6,
              33.92},{-88.7421,33.92},{-88.7421,11.9669}},                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(UVvSys.y,SystemicVeins.UnstressedVolume) annotation(Line(points={{30.4,
              32.92},{39.258,32.92},{39.258,11.9669}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(UVaSys.y,SystemicArteries.UnstressedVolume) annotation(Line(points={{-31.6,
              32.92},{-22.742,32.92},{-22.742,11.9669}},                                                                            color={0,0,127}, smooth=Smooth.None));
      connect(CaproxSys.y,AortaProximal.Capacitance) annotation(Line(points={{-54.4,
              32.08},{-69.242,32.08},{-69.242,11.9669}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(CaSys.y,SystemicArteries.Capacitance) annotation(Line(points={{5.6,
              32.08},{-3.24198,32.08},{-3.24198,11.9669}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(SystemicVeins.Capacitance,CvSys.y) annotation(Line(points={{58.758,
              11.9669},{58.758,30.08},{65.6,30.08}},                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(RcsSys.y,ProximalAortaResistance.BloodResistance) annotation(Line(points={{-42.4,17.92},{-45,17.92},{-45,7.40552}}, color={0,0,127}, smooth=Smooth.None));
      connect(RaSys.y,SystemicArterialResistance.BloodResistance) annotation(Line(points={{19.6,17.92},{18,17.92},{18,8.33121}}, color={0,0,127}, smooth=Smooth.None));
      connect(SystemicVenousResistance.BloodResistance,RvSys.y) annotation(Line(points={{82,9.2569},{82,21.92},{91.6,21.92}}, color={0,0,127}, smooth=Smooth.None));
      connect(SystemicVeins.ExternalPressure,ExternelPressure.y) annotation(Line(points={{49.008,
              14.9669},{49.008,70.12},{79.4,70.12}},                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(SystemicArteries.ExternalPressure,ExternelPressure.y) annotation(Line(points={{-12.992,
              14.9669},{-12.992,70.12},{50,70.12},{49.758,70.12},{79.4,70.12}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(SystemicProximalImpedance.Inflow,bloodFlowInflow) annotation(Line(points={{-116.2,0},{-133,0}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(RcsProx.y,SystemicProximalImpedance.BloodResistance) annotation(Line(points={{-104.4,21.92},{-109,21.92},{-109,7.40552}}, color={0,0,127}, smooth=Smooth.None));
      connect(SystemicProximalImpedance.Outflow,AortaProximal.bloodFlowInflow) annotation(Line(points={{-101.8,0},{-98,0},{-98,-0.258775},{-94,-0.258775}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      annotation(Diagram(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2}), graphics), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{92.0,-44.0},{110.0,46.0}}),Rectangle(visible=true, fillColor={255,170,85}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-44.0},{102.0,46.0}}),Ellipse(visible=true, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-110.0,-44.0},{-92.0,46.0}}),Text(visible=true,
                lineThickness =                                                                                                   1, extent={{-92.0,24.0},{110.0,34.0}}, textString
                =                                                                                   "intrathoracic pressure", fontName="Arial"),Text(origin={8.607,85.7326}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-84.607,-91.7326},{89.393,-59.7326}}, fontName="Arial", textString
                =                                                                                   "Systemic Circulation"),Text(
                lineThickness =                                                                                                   1, extent={{-88,-38},{-36,-28}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "blood volume"),Text(
                lineThickness =                                                                                                   1, extent={{50,-40},{102,-30}}, fontName="Arial", lineColor={0,0,0}, textString
                =                                                                                   "stressed volume")}, coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end SystemicCirculationBurkhoff;

    model BloodVolume
      Modelica.Blocks.Interfaces.RealInput RighHeartBloodVolume annotation(Placement(transformation(extent={{-124,50},{-84,90}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-93,95})));
      Modelica.Blocks.Interfaces.RealInput RighHeartStressedVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-73,95})));
      Modelica.Blocks.Interfaces.RealInput LeftHeartBloodVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-41,95})));
      Modelica.Blocks.Interfaces.RealInput LeftHeartStressedVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={-21,95})));
      Modelica.Blocks.Interfaces.RealInput PulmonaryBloodVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={7,95})));
      Modelica.Blocks.Interfaces.RealInput PulmonaryStressedVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={29,97})));
      Modelica.Blocks.Interfaces.RealInput SystemicBloodVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={69,95})));
      Modelica.Blocks.Interfaces.RealInput SystemicStressedVolume annotation(Placement(transformation(extent={{-134,24},{-94,64}}), iconTransformation(extent={{-9,-9},{9,9}}, rotation=270, origin={89,95})));
      Modelica.Blocks.Interfaces.RealOutput TotalBloodVolume annotation(Placement(transformation(extent={{100,44},{120,64}}), iconTransformation(extent={{100,44},{120,64}})));
      Modelica.Blocks.Interfaces.RealOutput TotalBloodStressedVolume annotation(Placement(transformation(extent={{100,44},{120,64}}), iconTransformation(extent={{100,14},{120,34}})));
      Modelica.Blocks.Interfaces.RealOutput TotalBloodUnstressedVolume annotation(Placement(transformation(extent={{100,44},{120,64}}), iconTransformation(extent={{100,-14},{120,6}})));
    equation
      TotalBloodVolume=RighHeartBloodVolume + LeftHeartBloodVolume + PulmonaryBloodVolume + SystemicBloodVolume;
      TotalBloodStressedVolume=RighHeartStressedVolume + LeftHeartStressedVolume + PulmonaryStressedVolume + SystemicStressedVolume;
      TotalBloodUnstressedVolume=TotalBloodVolume - TotalBloodStressedVolume;
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{22,64},{92,48}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Volume"),Text(extent={{-18,50},{96,0}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Stressed Volume"),Text(extent={{-18,20},{96,-30}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Unstressed Volume")}));
    end BloodVolume;

    model LeftHeartBurkhofWithBusConnector
      Constant VRAU(k=5) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={10,6}, rotation=0), visible=true));
      Constant VRVU(k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={10,12.2054}, rotation=0), visible=true));
      CardiacValve MitralValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={0,32}, rotation=0), visible=true));
      CardiacValve AorticValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-6.5264,32}, rotation=0), visible=true));
      BloodElasticCompartment LeftAtrium(V0=89) annotation(Placement(visible=true, transformation(origin={-54.3077,-48.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment LeftVentricle(V0=140)
                                                   annotation(Placement(visible=true, transformation(origin={27.7449,-49}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{30,58},
                {80,98}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-70,52},{-20,92}})));
      Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent={{-74,3},{-62,15}})));
      Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{-6,-6},{6,6}}, rotation=270, origin={-54,-4})));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-108,-52},{-100,-44}}), iconTransformation(extent={{-112,-8},{-92,12}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-52},{108,-44}}), iconTransformation(extent={{92,-8},{112,12}})));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={14,-90}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={38,-98})));
      Modelica.Blocks.Interfaces.RealOutput Volume annotation(Placement(transformation(extent={{82,-100},
                {102,-80}}),                                                                                         iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={-38,-98})));
      Modelica.Blocks.Math.Add stressedVolume annotation(Placement(transformation(extent={{-42,-96},{-30,-84}})));
      Modelica.Blocks.Math.Add volume annotation(Placement(transformation(extent={{42,-96},{54,-84}})));
      ControlBus controlBus annotation(Placement(transformation(extent={{-128,78},
                {-108,98}}),                                                                   iconTransformation(extent={{-96,36},{-76,56}})));
      Modelica.Blocks.Interfaces.RealOutput EDV
        "Left Ventricle End Diastolic Volume [ml]"         annotation(Placement(transformation(extent={{-5,-5},
                {5,5}},                                                                                                    rotation=0, origin={65,35}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-98,-28})));
      Modelica.Blocks.Interfaces.RealOutput EDP
        "Left Ventricle End Diastolic Pressure [mmHg]"     annotation(Placement(transformation(extent={{-5,-5},
                {5,5}},                                                                                                    rotation=0, origin={69,29}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-88,-52})));
      Modelica.Blocks.Interfaces.RealOutput ESP
        "Left Ventricle End Systolic Pressure [mmHg]"      annotation(Placement(transformation(extent={{-5,-5},
                {5,5}},                                                                                                    rotation=0, origin={59,39}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={86,-54})));
      Modelica.Blocks.Interfaces.RealOutput ESV
        "Left Ventricle End Systolic Volume [ml]"          annotation(Placement(transformation(extent={{-5,-5},
                {5,5}},                                                                                                    rotation=0, origin={53,43}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={98,-30})));
      VentricularEndIntervals ventricularEndIntervals
        annotation (Placement(transformation(extent={{14,22},{38,48}})));
    equation
      connect(LeftVentricle.bloodFlowOutflow,AorticValve.bloodFlowInflow) annotation(Line(visible=true, origin={61.4177,-47.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(MitralValve.bloodFlowOutflow,LeftVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={3.587,-47.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(LeftAtrium.bloodFlowOutflow,MitralValve.bloodFlowInflow) annotation(Line(points={{
              -32.3527,-47.6965},{-20,-47.6965},{-20,-48}},                                                                                   color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(LeftAtrium.StressedVolume,AtrialElastance.Vs) annotation(Line(points={{
              -54.3077,-71.1436},{-54.3077,-82},{-96,-82},{-96,74},{-72.5,74}},                                                      color={0,0,127}, smooth=Smooth.None));
      connect(LeftVentricle.StressedVolume,VentricularElastance.Vs) annotation(Line(points={{27.7449,
              -71.3987},{27.7449,-78},{96,-78},{96,52},{-4,52},{-4,80},{27.5,80}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Et,LeftAtrium.Elastance) annotation(Line(points={{-17.5,
              86},{-10,86},{-10,12},{-40.8124,12},{-40.8124,-29.7745}},                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(VentricularElastance.Et,LeftVentricle.Elastance) annotation(Line(points={{82.5,92},
              {90,92},{90,22},{41.2402,22},{41.2402,-30.0296}},                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(LeftVentricle.Pressure,product.u2) annotation(Line(points={{44.3408,
              -63.1006},{44.3408,-76},{-88,-76},{-88,5.4},{-75.2,5.4}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(product.y,add.u2) annotation(Line(points={{-61.4,9},{-57.6,9},{-57.6,3.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.y,LeftAtrium.ExternalPressure) annotation(Line(points={{-54,
              -10.6},{-54,-25.6255},{-54.2966,-25.6255}},                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowInflow,LeftAtrium.bloodFlowInflow) annotation(Line(points={{-104,
              -48},{-89.5263,-48},{-89.5263,-47.7198},{-75.0526,-47.7198}},                                                                           color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(AorticValve.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(points={{86.8736,-48},{104,-48}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(stressedVolume.u1,VentricularElastance.Vs) annotation(Line(points={{-43.2,
              -86.4},{-46,-86.4},{-46,-78},{96,-78},{96,52},{-4,52},{-4,80},{
              27.5,80}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u2,AtrialElastance.Vs) annotation(Line(points={{-43.2,
              -93.6},{-54,-93.6},{-54,-82},{-96,-82},{-96,74},{-72.5,74}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(LeftAtrium.Volume,volume.u2) annotation(Line(points={{-68.8291,
              -62.8455},{-68.8291,-100},{28,-100},{28,-93.6},{40.8,-93.6}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(volume.u1,LeftVentricle.Volume) annotation(Line(points={{40.8,
              -86.4},{13.2235,-86.4},{13.2235,-63.1006}},                                                               color={0,0,127}, smooth=Smooth.None));
      connect(volume.y,Volume) annotation(Line(points={{54.6,-90},{92,-90}}, color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.y,StressedVolume) annotation(Line(points={{-29.4,
              -90},{14,-90}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Ees,controlBus.LAEes) annotation(Line(points={{-72.25,
              90.2},{-98.4571,90.2},{-98.4571,88},{-118,88}},                                                                               color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AtrialElastance.Alpha,controlBus.LAAlpha) annotation(Line(points={{-72.25,
              85.8},{-106,85.8},{-106,88},{-118,88}},                                                                       color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AtrialElastance.Beta,controlBus.LABeta) annotation(Line(points={{-72.5,
              79.6},{-106,79.6},{-106,88},{-118,88}},                                                                                 color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(product.u1,controlBus.AVGain) annotation(Line(points={{-75.2,12.6},
              {-106,12.6},{-106,88},{-118,88}},                                                                    color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(MitralValve.outflowResistance,controlBus.Rmv) annotation(Line(points={{-15,
              -37.4},{-15,-16},{-106,-16},{-106,88},{-118,88}},                                                                            color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(MitralValve.inflowConductanceValue,controlBus.Cmv) annotation(Line(points={{-6,
              -37.2},{-6,-16},{-106,-16},{-106,88},{-118,88}},                                                                                color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AorticValve.outflowResistance,controlBus.Rav) annotation(Line(points={{72.4736,
              -37.4},{72.4736,-16},{-106,-16},{-106,88},{-118,88}},                                                                                color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AorticValve.inflowConductanceValue,controlBus.Cav) annotation(Line(points={{81.4736,
              -37.2},{81.4736,-16},{-106,-16},{-106,88},{-118,88}},                                                                                     color={0,0,255}, smooth=Smooth.None, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(controlBus.AEt0,AtrialElastance.Et0) annotation(Line(points={{-118,88},
              {-106,88},{-106,64.4},{-72.5,64.4}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.VEt0,VentricularElastance.Et0) annotation(Line(points={{-118,88},
              {-106,88},{-106,96},{10,96},{10,70.4},{27.5,70.4}},                                                                                      color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.LVEes,VentricularElastance.Ees) annotation(Line(points={{-118,88},
              {-106,88},{-106,96},{10,96},{10,96.2},{27.75,96.2}},                                                                                      color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.LVAlpha,VentricularElastance.Alpha) annotation(Line(points={{-118,88},
              {-106,88},{-106,96},{10,96},{10,91.8},{27.75,91.8}},                                                                                          color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.LVBeta,VentricularElastance.Beta) annotation(Line(points={{-118,88},
              {-106,88},{-106,96},{10,96},{10,85.6},{27.5,85.6}},                                                                                         color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,add.u1) annotation(Line(points={{-118,88},{-106,88},
              {-106,20},{-50,20},{-50,12},{-50.4,12},{-50.4,3.2}},                                                  color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,LeftVentricle.ExternalPressure) annotation(Line(points={{-118,88},
              {-106,88},{-106,20},{26,20},{26,-2},{27.756,-2},{27.756,-25.8806}},                                                                  color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(LeftAtrium.UnstressedVolume, VRAU.y) annotation (Line(
          points={{-66.7436,-29.7745},{-66.7436,-10},{-72,-10},{-72,-9.92},{
              -75.6,-9.92}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(VRVU.y, LeftVentricle.UnstressedVolume) annotation (Line(
          points={{6.4,-5.7146},{15.309,-5.7146},{15.309,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.Et, LeftVentricle.Elastance) annotation (
          Line(
          points={{13.76,43.32},{10,43.32},{10,50},{90,50},{90,22},{41.2402,22},
              {41.2402,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.VEt0, ventricularEndIntervals.Et0) annotation (Line(
          points={{-118,88},{-106,88},{-106,96},{6,96},{6,72},{-2,72},{-2,39.94},
              {13.76,39.94}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(ventricularEndIntervals.Vs, VentricularElastance.Vs) annotation (
          Line(
          points={{14,35.78},{6,35.78},{6,38},{-4,38},{-4,80},{27.5,80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.V0, LeftVentricle.UnstressedVolume)
        annotation (Line(
          points={{14,32.14},{10,32.14},{10,-6},{15.309,-6},{15.309,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(controlBus.EDTV, ventricularEndIntervals.EDT) annotation (Line(
          points={{-118,88},{-106,88},{-106,28.24},{14,28.24}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.TmaxVentricular, ventricularEndIntervals.Tmax)
        annotation (Line(
          points={{-118,88},{-106,88},{-106,23.04},{14,23.04}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(ventricularEndIntervals.ESV, ESV) annotation (Line(
          points={{39.2,41.5},{44,41.5},{44,43},{53,43}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.ESP, ESP) annotation (Line(
          points={{39.2,36.56},{48,36.56},{48,39},{59,39}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.EDV, EDV) annotation (Line(
          points={{39.2,31.1},{52,31.1},{52,35},{65,35}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.EDP, EDP) annotation (Line(
          points={{39.2,25.64},{54,25.64},{54,29},{69,29}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(graphics, coordinateSystem(extent={{-100,-100},{100,
                100}},                                                              preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-66,-14},{68,14}}, fontName="Arial", textString
                =                                                                                   "LeftHeart"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{-62,-88},{-10,-72}}, fontName="Arial", textString
                =                                                                                   "Volume"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{2,-112},{94,-50}}, fontName="Arial", textString
                =                                                                                   "Stressed Volume"),              Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  38,-38},{90,-22}},                                                                                                    fontName=
                  "Arial",
              textString="ESV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  26,-64},{78,-48}},                                                                                                    fontName=
                  "Arial",
              textString="ESP"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -82,-60},{-30,-44}},                                                                                                    fontName=
                  "Arial",
              textString="EDP"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -90,-36},{-38,-20}},                                                                                                    fontName=
                  "Arial",
              textString="EDV")},                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end LeftHeartBurkhofWithBusConnector;

    partial connector SignalBusBlue "Icon for signal bus"
      annotation(Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={2,2}, initialScale=0.2), graphics={Rectangle(extent={{-20,2},{20,-2}}, lineColor={255,204,51},
                lineThickness =                                                                                                   0.5),Polygon(points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},{-60,-50},{-80,-40},{-100,30},{-80,50}}, lineColor={0,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-65,25},{-55,15}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-5,25},{5,15}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{55,25},{65,15}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-35,-15},{-25,-25}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{25,-15},{35,-25}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}, grid={2,2}, initialScale=0.2), graphics={Polygon(points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},{-50,15},{-40,25}}, lineColor={0,0,0}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-32.5,7.5},{-27.5,12.5}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-2.5,12.5},{2.5,7.5}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{27.5,12.5},{32.5,7.5}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{-17.5,-7.5},{-12.5,-12.5}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Ellipse(extent={{12.5,-7.5},{17.5,-12.5}}, lineColor={0,0,0}, fillColor={0,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-150,70},{150,40}}, lineColor={0,0,0}, textString
                =                                                                                   "%name")}), Documentation(info="<html>
<p>
This icon is designed for a <b>signal bus</b> connector.
</p>
</html>"));
    end SignalBusBlue;

    expandable connector ControlBus
      "Control bus that is adapted to the signals connected to it"
      extends SignalBusBlue;
      import SI = Modelica.SIunits;
      annotation(Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-22,4},{20,0}}, lineColor={0,0,255},
                lineThickness =                                                                                                   0.5, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid)}), Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics), Documentation(info="<html>
<p>
This connector defines the \"expandable connector\" ControlBus that
is used as bus in the
<a href=\"modelica://Modelica.Blocks.Examples.BusUsage\">BusUsage</a> example.
Note, this connector contains \"default\" signals that might be utilized
in a connection (the input/output causalities of the signals
are determined from the connections to this bus).
</p>
</html>"));
    end ControlBus;

    replaceable model modelInputsBlock
      HeamodynamicsDymola.Parts.BusConnector inputBusConnector annotation(Placement(transformation(extent={{-16.0,-16.0},{16.0,16.0}}, rotation=0, origin={30.0,88.2673}), iconTransformation(extent={{64.0,-14.0},{92.0,14.0}}, origin={0.0,0.0}, rotation=0), visible=true));
      Constant LABeta(k=0.3)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                         annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                92},                                                                                                    rotation=0), visible=true));
      Constant LAAlpha(k=0.04)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                104},                                                                                                    rotation=0), visible=true));
      Constant LAEes(k=0.25) "Left Atrium: End-Systolic Elastance [mmHg/ml]" annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                115},                                                                                                    rotation=0), visible=true));
      Constant LVBeta(k=0.34)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                60},                                                                                                    rotation=0), visible=true));
      Constant LVAlpha(k=0.024)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                70},                                                                                                    rotation=0), visible=true));
      Constant LVEes(k=1.54) "Left Ventricle: End-Systolic Elastance [mmHg/ml]"
                                                                                annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-65.5306,
                82},                                                                                                    rotation=0), visible=true));
      Constant AVGain(k=0.02) annotation(Placement(transformation(extent={{-88,-2},
                {-80,6}})));
      Constant Rav(k=0.002) annotation(Placement(transformation(extent={{74,-52},
                {82,-44}},                                                                            origin={-162,4},   rotation=0), visible=true));
      Constant Cav(k=1e-08) annotation(Placement(transformation(extent={{74,-52},
                {82,-44}},                                                                            origin={-162,16},rotation=0), visible=true));
      Constant Rmv(k=0.0025) annotation(Placement(transformation(extent={{
                -27.9944,-56.7409},{-19.996,-49.6483}},                                                            origin={-60.0056,
                30.7409},                                                                                                    rotation=0), visible=true));
      Constant Cmv(k=1e-08) annotation(Placement(transformation(extent={{-22,-52},
                {-14,-44}},                                                                             origin={-66,36},      rotation=0), visible=true));
      Constant AVDelay(k=160) annotation(Placement(transformation(extent={{-88,-60},
                {-80,-52}})));
      Constant PTH(k=-4) annotation(Placement(transformation(extent={{-88,74},{
                -80,82}})));
      Constant HeartRate(k=70) annotation(Placement(transformation(extent={{-88,84},
                {-80,92}})));
      Constant RAEes(k=0.2) "Right Atrium: End-Systolic Elastance [mmHg/ml] " annotation(Placement(transformation(extent={{
                -20.5411,-52},{-13.0716,-44}},                                                                                                    origin={-19.4589,
                82},                                                                                                    rotation=0), visible=true));
      Constant RAAlpha(k=0.04)
        "Right Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.5306,
                70},                                                                                                    rotation=0), visible=true));
      Constant RABeta(k=0.3)
        "Right Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                          annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.5306,
                58},                                                                                                    rotation=0), visible=true));
      Constant RVEes(k=0.38)
        "Right Ventricle: End-Systolic Elastance [mmHg/ml]"                      annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.531,
                44},                                                                                                    rotation=0), visible=true));
      Constant RVAlpha(k=0.024)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.531,
                32},                                                                                                    rotation=0), visible=true));
      Constant RVBeta(k=0.34)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.531,
                18},                                                                                                    rotation=0), visible=true));
      Constant Rtv(k=0.0025) annotation(Placement(transformation(extent={{
                -28.0018,-56.7416},{-20.0013,-49.6489}},                                                           origin={-11.9987,
                -4.35107},                                                                                                    rotation=0), visible=true));
      Constant Ctv(k=1e-08) annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-17.531,
                4},                                                                                                    rotation=0), visible=true));
      Constant Cpv(k=1e-08) annotation(Placement(transformation(extent={{74,-52},
                {82,-44}},                                                                            origin={-114,-24}, rotation=0), visible=true));
      Constant Rpv(k=0.002) annotation(Placement(transformation(extent={{74,-52},
                {82,-44}},                                                                            origin={-114,-36}, rotation=0), visible=true));
      Constant TmaxAtrial(k=125) "Time to atrial end systole [msec]" annotation(Placement(visible=true, transformation(origin={-36,80}, extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0)));
      Constant TauAtrial(k=20) "Time constant of atrial relaxation [msec]" annotation(Placement(visible=true, transformation(origin={-36,68}, extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0)));
      Constant TauVentricular(k=30)
        "Time constant of ventricular relaxation [msec]"                             annotation(Placement(visible=true, transformation(origin={-36,46}, extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0)));
      Constant TmaxVentricular(k=200) "Time to ventricular end systole [msec]" annotation(Placement(visible=true, transformation(origin={-36,
                56.0089},                                                                                                    extent={{-4,
                -4.0089},{4,4.0089}},                                                                                                    rotation=0)));
      Constant CaproxPulm(k=1)
        "Pulmonary Proximal Artery Capacitance [ml/mmHg]"                        annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,70}),  visible=true));
      Constant CaPulm(k=20) "Pulmonary Artery Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,60}), visible=true));
      Constant CvPulm(k=7) "Pulmonary Venous Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,48}), visible=true));
      Constant RcPulm(k=0.02)
        "Pulmonary Characteristic Impedance [mmHg sec/ml]"                                       annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,12}),  visible=true));
      Constant RaPulm(k=0.02) "Pulmonary Arterial Resistance [mmHg sec/ml]" annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,24}), visible=true));
      Constant RvPulm(k=0.015)
        "Pulmonary Venous Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,36}), visible=true));
      Constant RcproxPulm(k=0.02)
        "Pulmonary Proximal Artery Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                   rotation=180, origin={36,0}),    visible=true));
      Constant RvSys(k=0.02)
        "Systemic Venous Characteristic Impedance [mmHg sec/ml]"                      annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,-84}),visible=true));
      Constant RaSys(k=0.75) "Systemic Arterial Resistance [mmHg sec/ml]" annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,-72}),visible=true));
      Constant RcSys(k=0.024)
        "Proximal Aortic Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,-62}), visible=true));
      Constant RcproxSys(k=0.02)
        "Proximal Aortic Characteristic Impedance [mmHg sec/ml]"                        annotation(Placement(transformation(extent={{4,4},{
                -4,-4}},                                                                                                    rotation=180, origin={36,-50}),  visible=true));
      Constant CaproxSys(k=0.1)
        "Pulmonary Proximal Aortic Capacitance [ml/mmHg]"                         annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,-12}), visible=true));
      Constant CaSys(k=1.7) "Systemic Artery Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,-26}),visible=true));
      Constant CvSys(k=70) "Systemnic Venous Capacitance [ml/mmHg]" annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={36,-38}),visible=true));
      Constant TotalUnstressedVolume(k=3700)
        "total blood unstressed volume [ml]"
                              annotation(Placement(transformation(extent={{-88,-78},
                {-80,-70}})));
      Constant TotalBloodVolume(k=5000) "total blood unstressed volume [ml]"
                              annotation(Placement(transformation(extent={{-88,-94},
                {-80,-86}})));
    equation
      connect(LAEes.y,inputBusConnector.LAEes) annotation(Line(points={{
              -79.1306,67.08},{-48,67.08},{-48,88.2673},{30,88.2673}},                                                color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(LAAlpha.y,inputBusConnector.LAAlpha) annotation(Line(points={{
              -79.1306,56.08},{-48,56.08},{-48,88.2673},{30,88.2673}},                                                    color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(LABeta.y,inputBusConnector.LABeta) annotation(Line(points={{
              -79.1306,44.08},{-48,44.08},{-48,88.2673},{30,88.2673}},                                                  color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(LVEes.y,inputBusConnector.LVEes) annotation(Line(points={{
              -79.1306,34.08},{-48,34.08},{-48,88.2673},{30,88.2673}},                                                color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(LVAlpha.y,inputBusConnector.LVAlpha) annotation(Line(points={{
              -79.1306,22.08},{-48,22.08},{-48,88.2673},{30,88.2673}},                                                    color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(LVBeta.y,inputBusConnector.LVBeta) annotation(Line(points={{
              -79.1306,12.08},{-48,12.08},{-48,88.2673},{30,88.2673}},                                                color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AVGain.y,inputBusConnector.AVGain) annotation(Line(points={{-79.6,
              2.08},{-48,2.08},{-48,88.2673},{30,88.2673}},                                                            color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Cmv.y,inputBusConnector.Cmv) annotation(Line(points={{-79.6,
              -11.92},{-48,-11.92},{-48,88.2673},{30,88.2673}},                                                     color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Rmv.y,inputBusConnector.Rmv) annotation(Line(points={{-79.6017,
              -22.3828},{-48,-22.3828},{-48,88.2673},{30,88.2673}},                                                     color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Cav.y,inputBusConnector.Cav) annotation(Line(points={{-79.6,
              -31.92},{-48,-31.92},{-48,88.2673},{30,88.2673}},                                                  color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Rav.y,inputBusConnector.Rav) annotation(Line(points={{-79.6,
              -43.92},{-48,-43.92},{-48,88.2673},{30,88.2673}},                                                  color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(AVDelay.y,inputBusConnector.AVDelay) annotation(Line(points={{-79.6,
              -55.92},{-48,-55.92},{-48,88.2673},{30,88.2673}},                                                          color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(HeartRate.y,inputBusConnector.HeartRate) annotation(Line(points={{-79.6,
              88.08},{-48,88.08},{-48,88.2673},{30,88.2673}},                                                              color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(PTH.y,inputBusConnector.PTH) annotation(Line(points={{-79.6,78.08},
              {-48,78.08},{-48,88.2673},{30,88.2673}},                                                         color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RAAlpha.y,inputBusConnector.RAAlpha) annotation(Line(points={{
              -32.1306,22.08},{-10,22.08},{-10,88.2673},{30,88.2673}},                                                    color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RABeta.y,inputBusConnector.RABeta) annotation(Line(points={{
              -32.1306,10.08},{-10,10.08},{-10,88.2673},{30,88.2673}},                                                color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RVAlpha.y,inputBusConnector.RVAlpha) annotation(Line(points={{-32.131,
              -15.92},{-10,-15.92},{-10,88.2673},{30,88.2673}},                                                            color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RVBeta.y,inputBusConnector.RVBeta) annotation(Line(points={{-32.131,
              -29.92},{-10,-29.92},{-10,88.2673},{30,88.2673}},                                                          color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Ctv.y,inputBusConnector.Ctv) annotation(Line(points={{-31.131,
              -43.92},{-10,-43.92},{-10,88.2673},{30,88.2673}},                                                    color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Rtv.y,inputBusConnector.Rtv) annotation(Line(points={{-31.6,
              -57.4754},{-10,-57.4754},{-10,88.2673},{30,88.2673}},                                                     color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Cpv.y,inputBusConnector.Cpv) annotation(Line(points={{-31.6,
              -71.92},{-10,-71.92},{-10,88.2673},{30,88.2673}},                                                  color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(Rpv.y,inputBusConnector.Rpv) annotation(Line(points={{-31.6,
              -83.92},{-10,-83.92},{-10,88.2673},{30,88.2673}},                                                  color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(TmaxAtrial.y,inputBusConnector.TmaxAtrial) annotation(Line(points={{-31.6,
              80.08},{-10,80.08},{-10,88.2673},{30,88.2673}},                                                              color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(TauAtrial.y,inputBusConnector.TauAtrial) annotation(Line(points={{-31.6,
              68.08},{-10,68.08},{-10,88.2673},{30,88.2673}},                                                            color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(TmaxVentricular.y,inputBusConnector.TmaxVentricular) annotation(Line(points={{-31.6,
              56.0891},{-10,56.0891},{-10,88.2673},{30,88.2673}},                                                                          color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(TauVentricular.y,inputBusConnector.TauVentricular) annotation(Line(points={{-31.6,
              46.08},{-10,46.08},{-10,88.2673},{30,88.2673}},                                                                      color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RVEes.y,inputBusConnector.RVEes) annotation(Line(points={{-32.131,
              -3.92},{-10,-3.92},{-10,88.2673},{30,88.2673}},                                                        color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(RAEes.y,inputBusConnector.RAEes) annotation(Line(points={{-32.157,
              34.08},{-10,34.08},{-10,88.2673},{30,88.2673}},                                                         color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(CaproxPulm.y, inputBusConnector.CAproxPulm) annotation (Line(
          points={{40.4,70.08},{72,70.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CaPulm.y, inputBusConnector.CaPulm) annotation (Line(
          points={{40.4,60.08},{72,60.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CvPulm.y, inputBusConnector.CvPulm) annotation (Line(
          points={{40.4,48.08},{72,48.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RvPulm.y, inputBusConnector.RvPulm) annotation (Line(
          points={{40.4,36.08},{72,36.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RaPulm.y, inputBusConnector.RaPulm) annotation (Line(
          points={{40.4,24.08},{72,24.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RcPulm.y, inputBusConnector.RcPulm) annotation (Line(
          points={{40.4,12.08},{72,12.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RcproxPulm.y, inputBusConnector.RcproxPulm) annotation (Line(
          points={{40.4,0.08},{72,0.08},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CaproxSys.y, inputBusConnector.CaproxSys) annotation (Line(
          points={{40.4,-11.92},{72,-11.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CaSys.y, inputBusConnector.CaSys) annotation (Line(
          points={{40.4,-25.92},{72,-25.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CvSys.y, inputBusConnector.CvSys) annotation (Line(
          points={{40.4,-37.92},{72,-37.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RcproxSys.y, inputBusConnector.RcproxSys) annotation (Line(
          points={{40.4,-49.92},{72,-49.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RcSys.y, inputBusConnector.RcSys) annotation (Line(
          points={{40.4,-61.92},{72,-61.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RaSys.y, inputBusConnector.RaSys) annotation (Line(
          points={{40.4,-71.92},{72,-71.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(RvSys.y, inputBusConnector.RvSys) annotation (Line(
          points={{40.4,-83.92},{72,-83.92},{72,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(TotalBloodVolume.y, inputBusConnector.TotalBloodVolume)
        annotation (Line(
          points={{-79.6,-89.92},{-48,-89.92},{-48,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(TotalUnstressedVolume.y, inputBusConnector.TotalUnstressedVolume)
        annotation (Line(
          points={{-79.6,-73.92},{-48,-73.92},{-48,88.2673},{30,88.2673}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={Polygon(points={{-80,60},{-80,-60},{40,-60},{40,-80},{100,0},{40,80},{40,60},{-80,60}}, lineColor={0,0,255}, smooth=Smooth.None,
                lineThickness =                                                                                                   0.5, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{-62,16},{36,-10}}, lineColor={0,0,255},
                lineThickness =                                                                                                   0.5, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Inputs")}), Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end modelInputsBlock;

    expandable connector BusConnector
      "Empty control bus that is adapted to the signals connected to it"
      extends SignalBusBlue;
      annotation(Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-20,2},{22,-2}}, lineColor={0,0,255},
                lineThickness =                                                                                                   0.5)}), Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics), Documentation(info="<html>
<p>
This connector defines the \"expandable connector\" ControlBus that
is used as bus in the
<a href=\"Modelica://Modelica.Blocks.Examples.BusUsage\">BusUsage</a> example.
Note, this connector is \"empty\". When using it, the actual content is
constructed by the signals connected to this bus.
</p>
</html>"));
    end BusConnector;

    model StarlingLeftHeart
      LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector annotation(Placement(transformation(extent={{-10,-46},{44,12}})));
      CardiacOutputMeasurement cardiacOutputMeasurementInflow annotation(Placement(transformation(extent={{-34,-32},{-14,-12}})));
      VariableBloodResistor PulmonaryVenousResistance annotation(Placement(transformation(extent={{-58,-32},{-38,-12}})));
      PressureSourceInflow pressureSourceInflow annotation(Placement(transformation(extent={{-96,-40},{-64,-8}})));
      CardiacOutputMeasurement cardiacOutputMeasurementOutflow annotation(Placement(transformation(extent={{48,-26},{68,-6}})));
      PressureSourceOutflow pressureSourceOutflow annotation(Placement(transformation(extent={{82,-34},{114,-2}})));
      Constant RvSys(k=1.5e-06)
        "Systemic Venous Characteristic Impedance [mmHg sec/ml]"                         annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-66,6}), visible=true));
      BusConnector busConnector annotation(Placement(transformation(extent={{-110,80},{-90,100}}), iconTransformation(extent={{-110,80},{-90,100}})));
      Modelica.Blocks.Interfaces.RealInput Preload
        "Pressure in left atrium [mmHg]"                                            annotation(Placement(visible=true, transformation(origin={-103.699,0.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-28.657,95.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput Afterload "Pressure in aorta [mmHg]"
                                                                                annotation(Placement(visible=true, transformation(origin={74.301,10.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-22.657,-98.368}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=90)));
      Modelica.Blocks.Interfaces.RealOutput SV "systolic volume in ml" annotation(Placement(visible=true, transformation(origin={87.7318,-73.3073}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={109.639,-60}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput CO "Cardiac output in L/min" annotation(Placement(visible=true, transformation(origin={88.0156,-52.6458}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110,60.2361}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
    equation
      connect(cardiacOutputMeasurementInflow.Outflow,leftHeartBurkhofWithBusConnector.bloodFlowInflow) annotation(Line(points={{-15,-22},{-12,-22},{-12,-16.42},{-10.54,-16.42}}, color={0,0,0}, smooth=Smooth.None));
      connect(cardiacOutputMeasurementOutflow.Inflow,leftHeartBurkhofWithBusConnector.bloodFlowOutflow) annotation(Line(points={{49,-16},{48,-16},{48,-16.42},{44.54,-16.42}}, color={0,0,0}, smooth=Smooth.None));
      connect(pressureSourceOutflow.bloodFlowInflow,cardiacOutputMeasurementOutflow.Outflow) annotation(Line(points={{82,-18},{76,-18},{76,-16},{67,-16}}, color={0,0,0}, smooth=Smooth.None));
      connect(pressureSourceInflow.bloodFlowOutflow,PulmonaryVenousResistance.Inflow) annotation(Line(points={{-65.6,
              -23.6195},{-61.8,-23.6195},{-61.8,-22},{-57,-22}},                                                                                                    color={0,0,0}, smooth=Smooth.None));
      connect(PulmonaryVenousResistance.Outflow,cardiacOutputMeasurementInflow.Inflow) annotation(Line(points={{-39,-22},{-33,-22}}, color={0,0,0}, smooth=Smooth.None));
      connect(RvSys.y,PulmonaryVenousResistance.BloodResistance) annotation(Line(points={{-61.6,5.92},{-48,5.92},{-48,-12.7431}}, color={0,0,127}, smooth=Smooth.None));
      connect(busConnector,leftHeartBurkhofWithBusConnector.controlBus) annotation(Line(points={{-100,90},{-38,90},{-38,-3.66},{-6.22,-3.66}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,cardiacOutputMeasurementInflow.HR) annotation(Line(points={{-100,90},
              {-100,56},{-26,56},{-26,-15.2253},{-25.9468,-15.2253}},                                                                                             color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,cardiacOutputMeasurementOutflow.HR) annotation(Line(points={{-100,90},
              {-100,56},{56,56},{56,-9.22527},{56.0532,-9.22527}},                                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(Preload,pressureSourceInflow.DesiredPressure) annotation(Line(points={{
              -103.699,0.31405},{-83.2,0.31405},{-83.2,-16}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(Afterload,pressureSourceOutflow.DesiredPressure) annotation(Line(points={{74.3009,
              10.3141},{94.8,10.3141},{94.8,-10}},                                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(CO,cardiacOutputMeasurementOutflow.CO) annotation(Line(points={{88.0156,
              -52.6458},{61.2,-52.6458},{61.2,-22.9764}},                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(SV,cardiacOutputMeasurementOutflow.SV) annotation(Line(points={{87.7318,
              -73.3073},{59.1639,-73.3073},{59.1639,-23}},                                                                         color={0,0,127}, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={255,0,0}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(visible=true, origin={93.5,-60.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "SV", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={91.5,61.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "CO", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(origin={-30.5,77.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, textString
                =                                                                                   "Preload", lineColor={0,0,0}),Text(origin={-18,-70.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-34,-14.5},{34,14.5}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Afterload"),Text(extent={{-76,42},{68,-20}}, lineColor={0,0,255},
                lineThickness =                                                                                                   1, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Left Heart")}), Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end StarlingLeftHeart;

    model StarlingLeftHeartTest
      modelInputsBlock modelInputsBlock1 annotation(Placement(transformation(extent={{-120,66},{-100,86}})));
      Constant DesiredOutflowPressure(k=85) annotation(Placement(transformation(extent={{-120,24},{-112,32}})));
      StarlingLeftHeart starlingLeftHeart0 annotation(Placement(transformation(extent={{-80,22},{-50,60}})));
      StarlingLeftHeart starlingLeftHeart1 annotation(Placement(transformation(extent={{-36,22},{-6,60}})));
      StarlingLeftHeart starlingLeftHeart2 annotation(Placement(transformation(extent={{8,22},{38,60}})));
      StarlingLeftHeart starlingLeftHeart3 annotation(Placement(transformation(extent={{54,22},{84,60}})));
      StarlingLeftHeart starlingLeftHeart4 annotation(Placement(transformation(extent={{-80,-38},{-50,0}})));
      StarlingLeftHeart starlingLeftHeart5 annotation(Placement(transformation(extent={{-36,-38},{-6,0}})));
      StarlingLeftHeart starlingLeftHeart6 annotation(Placement(transformation(extent={{8,-38},{38,0}})));
      StarlingLeftHeart starlingLeftHeart7 annotation(Placement(transformation(extent={{54,-38},{84,0}})));
      StarlingLeftHeart starlingLeftHeart8 annotation(Placement(transformation(extent={{-80,-98},{-50,-60}})));
      StarlingLeftHeart starlingLeftHeart9 annotation(Placement(transformation(extent={{-36,-98},{-6,-60}})));
      StarlingLeftHeart starlingLeftHeart10 annotation(Placement(transformation(extent={{10,-98},{40,-60}})));
      StarlingLeftHeart starlingLeftHeart11 annotation(Placement(transformation(extent={{56,-98},{86,-60}})));
      Constant Preload(k=2) annotation(Placement(transformation(extent={{-34,62},{-28,68}})));
      Constant Preload1(k=1) annotation(Placement(transformation(extent={{-78,62},{-72,68}})));
      Constant Preload2(k=3) annotation(Placement(transformation(extent={{8,62},{14,68}})));
      Constant Preload3(k=4) annotation(Placement(transformation(extent={{50,62},{56,68}})));
      Constant Preload4(k=5) annotation(Placement(transformation(extent={{-84,4},{-78,10}})));
      Constant Preload5(k=6) annotation(Placement(transformation(extent={{-36,4},{-30,10}})));
      Constant Preload6(k=7) annotation(Placement(transformation(extent={{6,2},{12,8}})));
      Constant Preload7(k=8) annotation(Placement(transformation(extent={{54,2},{60,8}})));
      Constant Preload8(k=9) annotation(Placement(transformation(extent={{-82,-54},{-76,-48}})));
      Constant Preload9(k=10) annotation(Placement(transformation(extent={{-38,-56},{-32,-50}})));
      Constant Preload10(k=11) annotation(Placement(transformation(extent={{8,-56},{14,-50}})));
      Constant Preload11(k=12) annotation(Placement(transformation(extent={{54,-56},{60,-50}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-80,82},{-60,102}})));
    equation
      connect(Preload1.y,starlingLeftHeart0.Preload) annotation(Line(points={{-71.7,
              65.06},{-69.2986,65.06},{-69.2986,59.1701}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload.y,starlingLeftHeart1.Preload) annotation(Line(points={{-27.7,
              65.06},{-25.2985,65.06},{-25.2985,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload2.y,starlingLeftHeart2.Preload) annotation(Line(points={{14.3,
              65.06},{18.7015,65.06},{18.7015,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload3.y,starlingLeftHeart3.Preload) annotation(Line(points={{56.3,
              65.06},{64.7014,65.06},{64.7014,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload4.y,starlingLeftHeart4.Preload) annotation(Line(points={{-77.7,
              7.06},{-69.2986,7.06},{-69.2986,-0.82992}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload5.y,starlingLeftHeart5.Preload) annotation(Line(points={{-29.7,
              7.06},{-25.2985,7.06},{-25.2985,-0.82992}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload6.y,starlingLeftHeart6.Preload) annotation(Line(points={{12.3,
              5.06},{18.7015,5.06},{18.7015,-0.82992}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload7.y,starlingLeftHeart7.Preload) annotation(Line(points={{60.3,
              5.06},{64.7014,5.06},{64.7014,-0.82992}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload8.y,starlingLeftHeart8.Preload) annotation(Line(points={{-75.7,
              -50.94},{-69.2986,-50.94},{-69.2986,-60.8299}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload9.y,starlingLeftHeart9.Preload) annotation(Line(points={{-31.7,
              -52.94},{-25.2985,-52.94},{-25.2985,-60.8299}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload10.y,starlingLeftHeart10.Preload) annotation(Line(points={{14.3,
              -52.94},{20.7015,-52.94},{20.7015,-60.8299}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(Preload11.y,starlingLeftHeart11.Preload) annotation(Line(points={{60.3,
              -52.94},{66.7014,-52.94},{66.7014,-60.8299}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingLeftHeart0.Afterload) annotation(Line(points={{-111.6,
              28.08},{-92,28.08},{-92,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart1.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,22.3101},{-24.3986,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart2.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{19.6015,
              22.3101},{19.6015,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart3.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{65.6015,
              22.3101},{65.6015,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart4.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -68.3986,-37.6899},{-68.3986,-44},{-92,-44},{-92,14},{-68.3986,14},
              {-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart5.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,-37.6899},{-24.3986,-44},{-92,-44},{-92,14},{-68.3986,14},
              {-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart6.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{19.6015,
              -37.6899},{19.6015,-44},{-92,-44},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart7.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{65.6015,
              -37.6899},{65.6015,-44},{-92,-44},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart8.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -68.3986,-97.6899},{-68.3986,-102},{-92,-102},{-92,14},{-68.3986,
              14},{-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart9.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,-97.6899},{-24.3986,-102},{-92,-102},{-92,14},{-68.3986,
              14},{-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart10.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{21.6015,
              -97.6899},{21.6015,-102},{-92,-102},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart11.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{67.6015,
              -97.6899},{67.6015,-102},{-92,-102},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart0.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,58.1},{-80,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{-102.2,76},{-42,76},{-42,58.1},{-36,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart2.busConnector) annotation(Line(points={{-102.2,76},{0,76},{0,58.1},{8,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart3.busConnector) annotation(Line(points={{-102.2,76},{46,76},{46,58.1},{54,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart4.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-1.9},{-80,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{-42,12},{-42,-1.9},{-36,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart6.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{2,12},{2,-1.9},{8,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart7.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{48,12},{48,-1.9},{54,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart8.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-61.9},{-80,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart9.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{-44,-46},{-44,-61.9},{-36,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart10.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{0,-46},{0,-61.9},{10,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart11.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{48,-46},{48,-61.9},{56,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-102.2,
              76},{-88,76},{-88,98},{-69.9,98},{-69.9,97}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-80,64},{66,2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Starling Left Heart Test")}),                                                                                              Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end StarlingLeftHeartTest;

    model HeartElasticitiesBurkhoffWithBusConnector
      EtTimingBurkhoff etTimingAtrial annotation(Placement(visible=true, transformation(origin={-51.693,68.3965}, extent={{-20.0652,-20.0652},{20.0652,20.0652}}, rotation=0)));
      EtTimingBurkhoff etTimingVentricular annotation(Placement(visible=true, transformation(origin={46.7708,67.5339}, extent={{-20.4661,-20.4661},{20.4661,20.4661}}, rotation=0)));
      HeartIntervalBurkhoff heartInterval1 annotation(Placement(visible=true, transformation(origin={-11.6372,-20.0}, extent={{-18.3628,-18.3628},{18.3628,18.3628}}, rotation=0)));
      ControlBus controlBus annotation(Placement(transformation(extent={{-124,10},{-104,30}}), iconTransformation(extent={{-9,40},
                {11,60}})));
    equation
      connect(controlBus.HeartRate,heartInterval1.HR) annotation(Line(points={{-114,20},
              {-76,20},{-76,-10.4017},{-33.6726,-10.4017}},                                                                           color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.AVDelay,heartInterval1.AVDelay) annotation(Line(points={{-114,20},
              {-76,20},{-76,-18.1637},{-33.6726,-18.1637}},                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(etTimingAtrial.Et0,controlBus.AEt0) annotation(Line(points={{
              -29.6213,70.403},{-24,70.403},{-24,40},{-114,40},{-114,20}},                                                              color={0,0,127}, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(etTimingVentricular.Et0,controlBus.VEt0) annotation(Line(points={{69.2835,
              69.5805},{84,69.5805},{84,40},{-114,40},{-114,20}},                                                                           color={127,0,2}, smooth=Smooth.
              None,
          thickness=0.5),                                                                                                    Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(controlBus.TmaxAtrial,etTimingAtrial.Tmax) annotation(Line(points={{-114,20},
              {-96,20},{-96,83.4454},{-74.3667,83.4454}},                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.TauAtrial,etTimingAtrial.Tau) annotation(Line(points={{-114,20},
              {-96,20},{-96,73.0115},{-74.3667,73.0115}},                                                                            color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.TauVentricular,etTimingVentricular.Tau) annotation(Line(points={{-114,20},
              {-96,20},{-96,46},{0,46},{0,72.2411},{23.6441,72.2411}},                                                                                      color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.TmaxVentricular,etTimingVentricular.Tmax) annotation(Line(points={{-114,20},
              {-96,20},{-96,46},{0,46},{0,82.8835},{23.6441,82.8835}},                                                                                        color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(heartInterval1.Tasyst,etTimingAtrial.T0) annotation(Line(points={{8.56188,
              -11.6478},{18,-11.6478},{18,28},{-88,28},{-88,60.1698},{-74.3667,
              60.1698}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(heartInterval1.Tvsyst,etTimingVentricular.T0) annotation(Line(points={{8.56188,
              -17.6477},{22,-17.6477},{22,34},{6,34},{6,59.1428},{23.6441,
              59.1428}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(heartInterval1.EDTV, controlBus.EDTV) annotation (Line(
          points={{8.56188,-31.335},{18,-31.335},{18,-54},{-114,-54},{-114,20}},
          color={127,0,2},
          smooth=Smooth.None,
          thickness=0.5),      Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));

      connect(heartInterval1.T0, controlBus.T0) annotation (Line(
          points={{8.56188,-26.7443},{20,-26.7443},{20,-60},{-114,-60},{-114,20}},
          color={127,0,2},
          smooth=Smooth.None,
          thickness=0.5),      Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));

      annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={10,10}), graphics={Rectangle(visible=true, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100,-70},{100,50}}, lineColor={0,0,0}),Text(visible=true, origin={10,-15},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100,-15},{100,15}}, fontName="Arial", textString
                =                                                                                   "HeartElasticities", lineColor={0,0,0})}), Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end HeartElasticitiesBurkhoffWithBusConnector;

    model RightHeartBurkhoffWithBusConnector
      ControlBus controlBus annotation(Placement(transformation(extent={{-132,88},
                {-112,108}}),                                                                   iconTransformation(extent={{-100,34},{-80,54}})));
      Constant VRAU(k=5) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={12,0}, rotation=0), visible=true));
      Constant VRVU(k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={10,
                8.2054},                                                                                              rotation=0), visible=true));
      CardiacValve tricuspidValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={2,32}, rotation=0), visible=true));
      CardiacValve pulmonicValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-4.5264,32}, rotation=0), visible=true));
      BloodElasticCompartment RightAtrium(V0=89) annotation(Placement(visible=true, transformation(origin={-52.3077,-48.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment RightVentricle(V0=140)
                                                    annotation(Placement(visible=true, transformation(origin={29.7449,-49}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{32,58},
                {82,98}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-68,52},{-18,92}})));
      Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent={{-72,3},{-60,15}})));
      Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{-6,-6},{6,6}}, rotation=270, origin={-52,-4})));
      Modelica.Blocks.Math.Add stressedVolume annotation(Placement(transformation(extent={{-38,-98},{-26,-86}})));
      Modelica.Blocks.Math.Add volume annotation(Placement(transformation(extent={{46,-98},{58,-86}})));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-106,-52},{-98,-44}}), iconTransformation(extent={{-112,-8},{-92,12}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{102,-52},{110,-44}}), iconTransformation(extent={{92,-8},{112,12}})));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-8,-92}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={38,-98})));
      Modelica.Blocks.Interfaces.RealOutput Volume annotation(Placement(transformation(extent={{70,-102},
                {90,-82}}),                                                                                          iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={-38,-98})));
      Modelica.Blocks.Interfaces.RealOutput ESP
        "Right Ventricle End Systolic Pressure [mmHg]"     annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={64,38}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={86,-56})));
      Modelica.Blocks.Interfaces.RealOutput ESV
        "Right Ventricle End Systolic Volume [ml]"         annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={58,44}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={98,-32})));
      Modelica.Blocks.Interfaces.RealOutput EDP
        "Right Ventricle End Diastolic Pressure [mmHg]"    annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={76,28}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-88,-54})));
      Modelica.Blocks.Interfaces.RealOutput EDV
        "Right Ventricle End Diastolic Volume [ml]"        annotation(Placement(transformation(extent={{-4,-4},
                {4,4}},                                                                                                    rotation=0, origin={70,34}),  iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-98,-30})));
      VentricularEndIntervals ventricularEndIntervals
        annotation (Placement(transformation(extent={{24,22},{48,48}})));
    equation
      connect(RightVentricle.bloodFlowOutflow,pulmonicValve.bloodFlowInflow) annotation(Line(visible=true, origin={63.4177,-47.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(tricuspidValve.bloodFlowOutflow,RightVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={5.587,-47.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(RightAtrium.bloodFlowOutflow,tricuspidValve.bloodFlowInflow) annotation(Line(points={{
              -30.3527,-47.6965},{-18,-47.6965},{-18,-48}},                                                                                       color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(RightAtrium.StressedVolume,AtrialElastance.Vs) annotation(Line(points={{
              -52.3077,-71.1436},{-52.3077,-82},{-94,-82},{-94,74},{-70.5,74}},                                                      color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.StressedVolume,VentricularElastance.Vs) annotation(Line(points={{29.7449,
              -71.3987},{29.7449,-80},{98,-80},{98,52},{0,52},{0,80},{29.5,80}},                                                    color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Et,RightAtrium.Elastance) annotation(Line(points={{-15.5,
              86},{-6,86},{-6,12},{-38.8124,12},{-38.8124,-29.7745}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(VentricularElastance.Et,RightVentricle.Elastance) annotation(Line(points={{84.5,92},
              {94,92},{94,80},{94,80},{94,16},{43.2402,16},{43.2402,-30.0296}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.Pressure,product.u2) annotation(Line(points={{46.3408,
              -63.1006},{46.3408,-76},{-86,-76},{-86,5.4},{-73.2,5.4}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(product.y,add.u2) annotation(Line(points={{-59.4,9},{-55.6,9},{-55.6,3.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.y,RightAtrium.ExternalPressure) annotation(Line(points={{-52,
              -10.6},{-52,-25.6255},{-52.2966,-25.6255}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowInflow,RightAtrium.bloodFlowInflow) annotation(Line(points={{-102,
              -48},{-87.5263,-48},{-87.5263,-47.7198},{-73.0526,-47.7198}},                                                                            color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonicValve.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(points={{88.8736,-48},{106,-48}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(stressedVolume.u1,VentricularElastance.Vs) annotation(Line(points={{-39.2,
              -88.4},{-44,-88.4},{-44,-80},{98,-80},{98,52},{0,52},{0,80},{29.5,
              80}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u2,AtrialElastance.Vs) annotation(Line(points={{-39.2,
              -95.6},{-52,-95.6},{-52,-82},{-94,-82},{-94,74},{-70.5,74}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(RightAtrium.Volume,volume.u2) annotation(Line(points={{-66.8291,
              -62.8455},{-66.8291,-100},{36,-100},{36,-95.6},{44.8,-95.6}},                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(volume.u1,RightVentricle.Volume) annotation(Line(points={{44.8,
              -88.4},{15.2235,-88.4},{15.2235,-63.1006}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(volume.y,Volume) annotation(Line(points={{58.6,-92},{80,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.y,StressedVolume) annotation(Line(points={{-25.4,-92},{-8,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(controlBus.AEt0,AtrialElastance.Et0) annotation(Line(points={{-122,98},
              {-122,64},{-70.5,64},{-70.5,64.4}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.AVGain,product.u1) annotation(Line(points={{-122,98},{
              -122,12.6},{-73.2,12.6}},                                                                  color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,add.u1) annotation(Line(points={{-122,98},{-122,20},
              {-48.4,20},{-48.4,3.2}},                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,RightVentricle.ExternalPressure) annotation(Line(points={{-122,98},
              {-122,20},{29.756,20},{29.756,-25.8806}},                                                                                   color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAEes,AtrialElastance.Ees) annotation(Line(points={{-122,98},
              {-96,98},{-96,90.2},{-70.25,90.2}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAAlpha,AtrialElastance.Alpha) annotation(Line(points={{-122,98},
              {-96,98},{-96,85.8},{-70.25,85.8}},                                                                                     color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RABeta,AtrialElastance.Beta) annotation(Line(points={{-122,98},
              {-96,98},{-96,79.6},{-70.5,79.6}},                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVEes,VentricularElastance.Ees) annotation(Line(points={{-122,98},
              {0,98},{0,96.2},{29.75,96.2}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVAlpha,VentricularElastance.Alpha) annotation(Line(points={{-122,98},
              {0,98},{0,91.8},{29.75,91.8}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVBeta,VentricularElastance.Beta) annotation(Line(points={{-122,98},
              {0,98},{0,85.6},{29.5,85.6}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Rtv,tricuspidValve.outflowResistance) annotation(Line(points={{-122,98},
              {-122,20},{-24,20},{-24,-37.4},{-13,-37.4}},                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Ctv,tricuspidValve.inflowConductanceValue) annotation(Line(points={{-122,98},
              {-122,20},{-10,20},{-10,-37.2},{-4,-37.2}},                                                                                         color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Rpv,pulmonicValve.outflowResistance) annotation(Line(points={{-122,98},
              {-122,20},{64,20},{64,-37.4},{74.4736,-37.4}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Cpv,pulmonicValve.inflowConductanceValue) annotation(Line(points={{-122,98},
              {-122,20},{78,20},{78,-37.2},{83.4736,-37.2}},                                                                                        color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));

      connect(VRVU.y, RightVentricle.UnstressedVolume) annotation (Line(
          points={{6.4,-9.7146},{17.309,-9.7146},{17.309,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VRAU.y, RightAtrium.UnstressedVolume) annotation (Line(
          points={{-73.6,-15.92},{-64.7436,-15.92},{-64.7436,-29.7745}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VRVU.y, ventricularEndIntervals.V0) annotation (Line(
          points={{6.4,-9.7146},{8,-9.7146},{8,34},{22,34},{22,32.14},{24,32.14}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(ventricularEndIntervals.Vs, VentricularElastance.Vs) annotation (
          Line(
          points={{24,35.78},{0,35.78},{0,80},{29.5,80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.EDTV, ventricularEndIntervals.EDT) annotation (Line(
          points={{-122,98},{-122,28.24},{24,28.24}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.TmaxVentricular, ventricularEndIntervals.Tmax)
        annotation (Line(
          points={{-122,98},{-122,23.04},{24,23.04}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(ventricularEndIntervals.Et, RightVentricle.Elastance) annotation (
         Line(
          points={{23.76,43.32},{20,43.32},{20,50},{94,50},{94,16},{43.2402,16},
              {43.2402,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.ESV, ESV) annotation (Line(
          points={{49.2,41.5},{52,41.5},{52,44},{58,44}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.ESP, ESP) annotation (Line(
          points={{49.2,36.56},{54,36.56},{54,38},{64,38}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.EDV, EDV) annotation (Line(
          points={{49.2,31.1},{56,31.1},{56,34},{70,34}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ventricularEndIntervals.EDP, EDP) annotation (Line(
          points={{49.2,25.64},{68,25.64},{68,28},{76,28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.VEt0, VentricularElastance.Et0) annotation (Line(
          points={{-122,98},{-122,42},{-14,42},{-14,70},{29.5,70},{29.5,70.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(controlBus.VEt0, ventricularEndIntervals.Et0) annotation (Line(
          points={{-122,98},{-122,39.94},{23.76,39.94}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-66,-14},{68,14}}, textString
                =                                                                                   "Right Heart", fontName="Arial"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{-62,-88},{-10,-72}}, fontName="Arial", textString
                =                                                                                   "Volume"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{0,-112},{92,-50}}, fontName="Arial", textString
                =                                                                                   "Stressed Volume"),              Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -88,-38},{-36,-22}},                                                                                                    fontName=
                  "Arial",
              textString="EDV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -80,-62},{-28,-46}},                                                                                                    fontName=
                  "Arial",
              textString="EDP"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  38,-40},{90,-24}},                                                                                                    fontName=
                  "Arial",
              textString="ESV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  26,-66},{78,-50}},                                                                                                    fontName=
                  "Arial",
              textString="ESP")},                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end RightHeartBurkhoffWithBusConnector;

    model Heamodynamics_BurkhoffWitBusConnector
      PressureFlowMeasurement MeasurementAorta annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=270, origin={114,-26})));
      PressureFlowMeasurement MeasurementPulmonaryArtery annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-41,38})));
      PulmonaryCirculationBurkhoff pulmonaryCirculationBurkhoff annotation(Placement(transformation(extent={{-18,14},{28,64}})));
      SystemicCirculationBurkhoff systemicCirculationBurkhoff annotation(Placement(transformation(extent={{-28,-72},{26,-20}})));
      BloodVolume bloodVolume annotation(Placement(transformation(extent={{50,-102},{100,-76}})));
      PressureFlowMeasurement MeasurementPulmonaryArtery1 annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={51,38})));
      PressureFlowMeasurement MeasurementAorta1 annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=90, origin={-108,-22})));
      BusConnector busConnector annotation(Placement(transformation(extent={{-132,82},{-112,102}}), iconTransformation(extent={{-110,50},{-90,70}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-74,58},{-30,98}})));
      RightHeartBurkhoffWithBusConnector rightHeartBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-100,-2},{-62,50}})));
      LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector annotation(Placement(transformation(extent={{70,0},{108,52}})));
    equation
      connect(MeasurementPulmonaryArtery.Outflow,pulmonaryCirculationBurkhoff.bloodFlowInflow) annotation(Line(points={{-32,38},{-32,39},{-20.3,39}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(systemicCirculationBurkhoff.bloodFlowInflow,MeasurementAorta.Outflow) annotation(Line(points={{30.32,-46},{114,-46},{114,-35}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryCirculationBurkhoff.PulmonaryBloodVolume,bloodVolume.PulmonaryBloodVolume) annotation(Line(points={{-13.17,26.25},{-13.17,12},{46,12},{46,-60},{76.75,-60},{76.75,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.PulmonaryStressedVolume,bloodVolume.PulmonaryStressedVolume) annotation(Line(points={{22.71,26.25},{22.71,14},{48,14},{48,-58},{82.25,-58},{82.25,-76.39}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicBloodVolume,bloodVolume.SystemicBloodVolume) annotation(Line(points={{-21.79,-59.26},{-21.79,-66},{92.25,-66},{92.25,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicStressedVolume,bloodVolume.SystemicStressedVolume) annotation(Line(points={{22.49,-59.26},{22.49,-64},{97.25,-64},{97.25,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.bloodFlowOutflow,MeasurementPulmonaryArtery1.Inflow) annotation(Line(points={{29.38,38.5},{36,38.5},{36,38},{42,38}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(systemicCirculationBurkhoff.bloodFlowOutflow,MeasurementAorta1.Inflow) annotation(Line(points={{-31.24,-44.96},{-108,-44.96},{-108,-31}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(busConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-122,92},
              {-51.78,92},{-51.78,88}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(MeasurementAorta1.Outflow,rightHeartBurkhoffWithBusConnector.bloodFlowInflow) annotation(Line(points={{-108,-13},{-108,24.52},{-100.38,24.52}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(rightHeartBurkhoffWithBusConnector.bloodFlowOutflow,MeasurementPulmonaryArtery.Inflow) annotation(Line(points={{-61.62,24.52},{-52.8,24.52},{-52.8,38},{-50,38}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(rightHeartBurkhoffWithBusConnector.Volume,bloodVolume.RighHeartBloodVolume) annotation(Line(points={{-88.22,-1.48},{-88.22,-74},{51.75,-74},{51.75,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.StressedVolume,bloodVolume.RighHeartStressedVolume) annotation(Line(points={{-73.78,-1.48},{-73.78,-70},{56.75,-70},{56.75,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(busConnector.HeartRate,MeasurementAorta1.HR) annotation(Line(points={{-122,92},
              {-122,-23.9468},{-114.775,-23.9468}},                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,MeasurementPulmonaryArtery.HR) annotation(Line(points={{-122,92},
              {-122,58},{-42.9468,58},{-42.9468,44.7747}},                                                                                         color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,MeasurementPulmonaryArtery1.HR) annotation(Line(points={{-122,92},
              {-122,58},{49.0532,58},{49.0532,44.7747}},                                                                                          color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,MeasurementAorta.HR) annotation(Line(points={{-122,92},
              {-122,58},{126,58},{126,-24.0532},{120.775,-24.0532}},                                                                               color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.PTH,pulmonaryCirculationBurkhoff.IntrathoracicPresssure) annotation(Line(points={{-122,92},{-122,58},{7.76,58},{7.76,51}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.PTH,systemicCirculationBurkhoff.IntrathoracicPresssure) annotation(Line(points={{-122,92},{-122,-6},{2.24,-6},{2.24,-33.52}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(MeasurementPulmonaryArtery1.Outflow,leftHeartBurkhofWithBusConnector.bloodFlowInflow) annotation(Line(points={{60,38},{62,38},{62,26.52},{69.62,26.52}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(leftHeartBurkhofWithBusConnector.bloodFlowOutflow,MeasurementAorta.Inflow) annotation(Line(points={{108.38,26.52},{114,26.52},{114,-17}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(busConnector,rightHeartBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-122,92},{-122,35.44},{-98.1,35.44}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector,leftHeartBurkhofWithBusConnector.controlBus) annotation(Line(points={{-122,92},{-122,58},{72.66,58},{72.66,37.96}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(leftHeartBurkhofWithBusConnector.Volume,bloodVolume.LeftHeartBloodVolume) annotation(Line(points={{81.78,0.52},{81.78,-32},{64.75,-32},{64.75,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(leftHeartBurkhofWithBusConnector.StressedVolume,bloodVolume.LeftHeartStressedVolume) annotation(Line(points={{96.22,0.52},{96.22,-38},{69.75,-38},{69.75,-76.65}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(visible=true, origin={-0.0,-85.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-15.0},{100.0,15.0}}, textString
                =                                                                                   "Heamodynamics - version 2", fontName="Arial")}));
    end Heamodynamics_BurkhoffWitBusConnector;

    model Heamodynamics_Meurs_version2
      Constant HeartRate(k=72) annotation(Placement(transformation(extent={{-98,92},{-90,100}})));
      PulmonaryCirculation pulmonaryCirculation annotation(Placement(transformation(extent={{-16,4},{24,44}})));
      SystemicArteries systemicArteries annotation(Placement(transformation(extent={{44,-86},{84,-46}})));
      SystemicVeins systemicVeins annotation(Placement(transformation(extent={{-82,-86},{-42,-46}})));
      SystemicPeripheralVessels systemicPeripheralVessels annotation(Placement(transformation(extent={{-24,-99},{24,-51}})));
      Constant RSP(k=0.8) annotation(Placement(transformation(extent={{-28,-40},{-20,-32}})));
      Constant PTH(k=-4) annotation(Placement(transformation(extent={{-80,-34},{-72,-26}})));
      HeartElasticitiesBurkhoff heartElasticitiesBurkhoff annotation(Placement(transformation(extent={{-52,70},{-22,100}})));
      Constant AVDelay(k=160) annotation(Placement(transformation(extent={{-100,72},{-92,80}})));
      HeamodynamicsDymola.Parts.RightHeartBurkhoff rightHeartBurkhoff annotation(Placement(transformation(extent={{-92.0,-2.0},{-48.0,42.0}}, origin={-2,4}, rotation=0), visible=true));
      LeftHeartBurkhoff leftHeartBurkhoff annotation(Placement(transformation(extent={{42,-2},{90,46}})));
      Constant AVGain(k=0.02) annotation(Placement(transformation(extent={{-10,-24},{-2,-16}})));
      PressureFlowMeasurement MeasurementAorta annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=270, origin={94,-26})));
      PressureFlowMeasurement MeasurementPulmonaryArtery annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-35,24})));
    equation
      connect(rightHeartBurkhoff.AVGain,AVGain.y) annotation(Line(visible=true, points={{
              -90.6245,10.719},{-96,10.719},{-96,-18},{-30,-18},{-30,-4},{4,-4},
              {4,-19.92},{-1.6,-19.92}},                                                                                                    color={0,0,127}));
      connect(heartElasticitiesBurkhoff.AEt0,rightHeartBurkhoff.AEt0) annotation(Line(visible=true, points={{
              -20.2809,86.2809},{12,86.2809},{12,64},{-84.0245,64},{-84.0245,
              42.839}},                                                                                                    color={0,0,127}));
      connect(heartElasticitiesBurkhoff.VEt0,rightHeartBurkhoff.VEt0) annotation(Line(visible=true, points={{
              -20.2809,94},{26,94},{26,60},{-73.0245,60},{-73.0245,46.359}},                                                                                                color={0,0,127}));
      connect(rightHeartBurkhoff.PTH,PTH.y) annotation(Line(visible=true, points={{
              -60.2645,42.839},{-60.2645,54},{-46,54},{-46,-12},{-70,-12},{-70,
              -29.92},{-71.6,-29.92}},                                                                                                    color={0,0,127}));
      connect(systemicVeins.bloodFlowOutflow,rightHeartBurkhoff.bloodFlowInflow) annotation(Line(visible=true, points={{-83.8,-67.4},{-100,-67.4},{-100,24.44},{-94.44,24.44}}, color={0,0,255}, thickness=1));
      connect(RSP.y,systemicPeripheralVessels.PeripheralArteriolarResistance) annotation(Line(points={{-19.6,-35.92},{-2.4,-35.92},{-2.4,-51.48}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,systemicArteries.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{66.4,-29.92},{66.4,-56.4}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicArteries.bloodFlowOutflow,systemicPeripheralVessels.bloodFlowInflow) annotation(Line(points={{42.2,-67.4},{33.1,-67.4},{33.1,-70.44},{22.8,-70.44}}, color={255,0,0}, thickness=1, smooth=Smooth.None));
      connect(systemicPeripheralVessels.bloodFlowOutflow,systemicVeins.bloodFlowInflow) annotation(Line(points={{-22.8,-70.2},{-30.4,-70.2},{-30.4,-67.4},{-40.2,-67.4}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(PTH.y,pulmonaryCirculation.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{-70,-29.92},{-70,-12},{-46,-12},{-46,54},{6.4,54},{6.4,33.6}}, color={0,0,127}, smooth=Smooth.None));
      connect(AVDelay.y,heartElasticitiesBurkhoff.AVDelay) annotation(Line(points={{-91.6,
              76.08},{-68,76.08},{-68,86.0296},{-52.5669,86.0296}},                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculation.bloodFlowOutflow,leftHeartBurkhoff.bloodFlowInflow) annotation(Line(points={{27.4,23.4},{30,23.4},{30,22.48},{41.52,22.48}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(PTH.y,systemicVeins.IntrathoracicPresssure) annotation(Line(points={{-71.6,-29.92},{-59.6,-29.92},{-59.6,-56.4}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,leftHeartBurkhoff.PTH) annotation(Line(points={{-71.6,
              -29.92},{-70,-29.92},{-70,-12},{-46,-12},{-46,54},{78.8023,54},{
              78.8023,42.5517}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoff.VEt0,leftHeartBurkhoff.VEt0) annotation(Line(points={{
              -20.2809,94},{64.8823,94},{64.8823,46.3917}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoff.AEt0,leftHeartBurkhoff.AEt0) annotation(Line(points={{
              -20.2809,86.2809},{52.8823,86.2809},{52.8823,42.5517}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(AVGain.y,leftHeartBurkhoff.AVGain) annotation(Line(points={{-1.6,
              -19.92},{4,-19.92},{4,7.51158},{45.9223,7.51158}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{-89.6,
              96.08},{-72,96.08},{-72,93.2497},{-52.4291,93.2497}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.bloodFlowOutflow,MeasurementPulmonaryArtery.Inflow) annotation(Line(points={{-49.56,24.44},{-44.78,24.44},{-44.78,24},{-44,24}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(MeasurementPulmonaryArtery.Outflow,pulmonaryCirculation.bloodFlowInflow) annotation(Line(points={{-26,24},{-21.8,24},{-21.8,24.2},{-18.6,24.2}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(leftHeartBurkhoff.bloodFlowOutflow,MeasurementAorta.Inflow) annotation(Line(points={{90.48,22.48},{94,22.48},{94,-17}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(systemicArteries.bloodFlowInflow,MeasurementAorta.Outflow) annotation(Line(points={{85.8,-67.4},{94,-67.4},{94,-35}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(HeartRate.y,MeasurementPulmonaryArtery.HR) annotation(Line(points={{-89.6,
              96.08},{-72,96.08},{-72,66},{-36.9468,66},{-36.9468,30.7747}},                                                                           color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,MeasurementAorta.HR) annotation(Line(points={{-89.6,
              96.08},{-72,96.08},{-72,66},{104,66},{104,-24.0532},{100.775,
              -24.0532}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(visible=true, origin={-0.0,-85.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-15.0},{100.0,15.0}}, textString
                =                                                                                   "Heamodynamics - version 2", fontName="Arial")}));
    end Heamodynamics_Meurs_version2;

    model Heamodynamics_Burkhoff
      Constant HeartRate(k=70) annotation(Placement(transformation(extent={{-100,92},{-92,100}})));
      Constant PTH(k=0)  annotation(Placement(transformation(extent={{-64,-24},{-56,-16}})));
      HeartElasticitiesBurkhoff heartElasticitiesBurkhoff annotation(Placement(transformation(extent={{-54,68},{-24,98}})));
      Constant AVDelay(k=160) annotation(Placement(transformation(extent={{-102,72},{-94,80}})));
      Constant AVGain(k=0.02) annotation(Placement(transformation(extent={{-6,-2},{2,6}})));
      PressureFlowMeasurement MeasurementAorta annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=270, origin={108,-26})));
      PressureFlowMeasurement MeasurementPulmonaryArtery annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-39,24})));
      PulmonaryCirculationBurkhoff pulmonaryCirculationBurkhoff annotation(Placement(transformation(extent={{-24,10},{26,60}})));
      SystemicCirculationBurkhoff systemicCirculationBurkhoff(SystemicVeins(V0=
              2830))                                          annotation(Placement(transformation(extent={{-28,-72},{34,-20}})));
      BloodVolume bloodVolume annotation(Placement(transformation(extent={{50,-100},{100,-74}})));
      RightHeartBurkhoff rightHeartBurkhoff(RR(k=0.002)) annotation(Placement(transformation(extent={{-98,-2},{-56,50}})));
      PressureFlowMeasurement MeasurementPulmonaryArtery1 annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={43,24})));
      PressureFlowMeasurement MeasurementAorta1 annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=90, origin={-108,-22})));
      LeftHeartBurkhoff leftHeartBurkhoff annotation(Placement(transformation(extent={{62,-2},{104,50}})));
    equation
      connect(AVDelay.y,heartElasticitiesBurkhoff.AVDelay) annotation(Line(points={{-93.6,
              76.08},{-68,76.08},{-68,84.0296},{-54.5669,84.0296}},                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{-91.6,
              96.08},{-72,96.08},{-72,91.2497},{-54.4291,91.2497}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,MeasurementPulmonaryArtery.HR) annotation(Line(points={{-91.6,
              96.08},{-72,96.08},{-72,64},{-40.9468,64},{-40.9468,30.7747}},                                                                           color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,MeasurementAorta.HR) annotation(Line(points={{-91.6,
              96.08},{-60,96.08},{-60,100},{116,100},{116,-24.0532},{114.775,
              -24.0532}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(MeasurementPulmonaryArtery.Outflow,pulmonaryCirculationBurkhoff.bloodFlowInflow) annotation(Line(points={{-30,24},{-30,35},{-26.5,35}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(systemicCirculationBurkhoff.bloodFlowInflow,MeasurementAorta.Outflow) annotation(Line(points={{38.96,-46},{108,-46},{108,-35}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryCirculationBurkhoff.PulmonaryBloodVolume,bloodVolume.PulmonaryBloodVolume) annotation(Line(points={{-18.75,22.25},{-18.75,12},{46,12},{46,-60},{76.75,-60},{76.75,-74.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.PulmonaryStressedVolume,bloodVolume.PulmonaryStressedVolume) annotation(Line(points={{20.25,22.25},{20.25,14},{48,14},{48,-58},{82.25,-58},{82.25,-74.39}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicBloodVolume,bloodVolume.SystemicBloodVolume) annotation(Line(points={{-20.87,-59.26},{-20.87,-66},{92.25,-66},{92.25,-74.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicStressedVolume,bloodVolume.SystemicStressedVolume) annotation(Line(points={{29.97,-59.26},{29.97,-64},{97.25,-64},{97.25,-74.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.bloodFlowOutflow,MeasurementPulmonaryArtery.Inflow) annotation(Line(points={{-55.58,24.52},{-49.79,24.52},{-49.79,24},{-48,24}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(bloodVolume.RighHeartBloodVolume,rightHeartBurkhoff.Volume) annotation(Line(points={{51.75,-74.65},{51.75,-70},{-84.98,-70},{-84.98,-1.48}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.StressedVolume,bloodVolume.RighHeartStressedVolume) annotation(Line(points={{-69.02,-1.48},{-69.02,-68},{56.75,-68},{56.75,-74.65}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,systemicCirculationBurkhoff.IntrathoracicPresssure) annotation(Line(points={{-55.6,-19.92},{6.72,-19.92},{6.72,-33.52}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,rightHeartBurkhoff.PTH) annotation(Line(points={{-55.6,
              -19.92},{-50,-19.92},{-50,52},{-65.798,52},{-65.798,46.2643}},                                                              color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.IntrathoracicPresssure,rightHeartBurkhoff.PTH) annotation(Line(points={{4,47},{
              4,52},{-65.798,52},{-65.798,46.2643}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoff.AEt0,rightHeartBurkhoff.AEt0) annotation(Line(points={{
              -22.2809,84.2809},{-10,84.2809},{-10,60},{-88.478,60},{-88.478,
              46.2643}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.bloodFlowOutflow,MeasurementPulmonaryArtery1.Inflow) annotation(Line(points={{27.5,34.5},{30,34.5},{30,34},{32,34},{32,24},{34,24}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(systemicCirculationBurkhoff.bloodFlowOutflow,MeasurementAorta1.Inflow) annotation(Line(points={{-31.72,-44.96},{-108,-44.96},{-108,-31}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(MeasurementAorta1.Outflow,rightHeartBurkhoff.bloodFlowInflow) annotation(Line(points={{-108,-13},{-108,24.52},{-98.42,24.52}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(MeasurementAorta1.HR,MeasurementPulmonaryArtery.HR) annotation(Line(points={{
              -114.775,-23.9468},{-128,-23.9468},{-128,64},{-40.9468,64},{
              -40.9468,30.7747}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(MeasurementPulmonaryArtery1.HR,MeasurementPulmonaryArtery.HR) annotation(Line(points={{41.0532,
              30.7747},{41.0532,64},{-40.9468,64},{-40.9468,30.7747}},                                                                                                color={0,0,127}, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoff.VEt0,leftHeartBurkhoff.VEt0) annotation(Line(points={{
              -22.2809,92},{82.022,92},{82.022,50.4243}},                                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.VEt0,leftHeartBurkhoff.VEt0) annotation(Line(points={{-77.978,
              50.4243},{-77.978,56},{4,56},{4,92},{82.022,92},{82.022,50.4243}},                                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(leftHeartBurkhoff.AEt0,rightHeartBurkhoff.AEt0) annotation(Line(points={{71.522,
              46.2643},{71.522,84},{-10,84},{-10,60},{-88.478,60},{-88.478,
              46.2643}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(leftHeartBurkhoff.PTH,rightHeartBurkhoff.PTH) annotation(Line(points={{94.202,
              46.2643},{94.202,52},{-65.798,52},{-65.798,46.2643}},                                                                               color={0,0,127}, smooth=Smooth.None));
      connect(MeasurementPulmonaryArtery1.Outflow,leftHeartBurkhoff.bloodFlowInflow) annotation(Line(points={{52,24},{56,24},{56,24.52},{61.58,24.52}}, color={0,0,0}, smooth=Smooth.None));
      connect(leftHeartBurkhoff.bloodFlowOutflow,MeasurementAorta.Inflow) annotation(Line(points={{104.42,24.52},{108,24.52},{108,-17}}, color={0,0,0}, smooth=Smooth.None));
      connect(bloodVolume.LeftHeartBloodVolume,leftHeartBurkhoff.Volume) annotation(Line(points={{64.75,-74.65},{64.75,-14},{75.02,-14},{75.02,-1.48}}, color={0,0,127}, smooth=Smooth.None));
      connect(bloodVolume.LeftHeartStressedVolume,leftHeartBurkhoff.StressedVolume) annotation(Line(points={{69.75,-74.65},{69.75,-20},{90.98,-20},{90.98,-1.48}}, color={0,0,127}, smooth=Smooth.None));
      connect(AVGain.y,rightHeartBurkhoff.AVGain) annotation(Line(points={{2.4,
              2.08},{8,2.08},{8,-12},{-100,-12},{-100,8.30422},{-94.778,8.30422}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(AVGain.y,leftHeartBurkhoff.AVGain) annotation(Line(points={{2.4,
              2.08},{58,2.08},{58,8.30422},{65.432,8.30422}},                                                                 color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(visible=true, origin={-0.0,-85.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-15.0},{100.0,15.0}}, textString
                =                                                                                   "Heamodynamics - version 2", fontName="Arial")}));
    end Heamodynamics_Burkhoff;

    model StarlingRightHeart
      CardiacOutputMeasurement cardiacOutputMeasurementInflow annotation(Placement(transformation(extent={{-34,-32},{-14,-12}})));
      VariableBloodResistor PulmonaryVenousResistance annotation(Placement(transformation(extent={{-58,-32},{-38,-12}})));
      PressureSourceInflow pressureSourceInflow annotation(Placement(transformation(extent={{-96,-40},{-64,-8}})));
      CardiacOutputMeasurement cardiacOutputMeasurementOutflow annotation(Placement(transformation(extent={{48,-26},{68,-6}})));
      PressureSourceOutflow pressureSourceOutflow annotation(Placement(transformation(extent={{82,-34},{114,-2}})));
      Constant RvSys(k=1.5e-06)
        "Systemic Venous Characteristic Impedance [mmHg sec/ml]"                         annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-66,6}), visible=true));
      BusConnector busConnector annotation(Placement(transformation(extent={{-110,80},{-90,100}}), iconTransformation(extent={{-110,80},{-90,100}})));
      Modelica.Blocks.Interfaces.RealInput Preload
        "Pressure in left atrium [mmHg]"                                            annotation(Placement(visible=true, transformation(origin={-103.699,0.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-28.657,95.632}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput Afterload "Pressure in aorta [mmHg]"
                                                                                annotation(Placement(visible=true, transformation(origin={74.301,10.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-22.657,-98.368}, extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=90)));
      Modelica.Blocks.Interfaces.RealOutput SV "systolic volume in ml" annotation(Placement(visible=true, transformation(origin={87.7318,-73.3073}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={109.639,-60}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput CO "Cardiac output in L/min" annotation(Placement(visible=true, transformation(origin={88.0156,-52.6458}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={110,60.2361}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0)));
      RightHeartBurkhoffWithBusConnector rightHeartBurkhoffWithBusConnector
        annotation (Placement(transformation(extent={{-6,-44},{32,2}})));
    equation
      connect(pressureSourceOutflow.bloodFlowInflow,cardiacOutputMeasurementOutflow.Outflow) annotation(Line(points={{82,-18},{76,-18},{76,-16},{67,-16}}, color={0,0,0}, smooth=Smooth.None));
      connect(pressureSourceInflow.bloodFlowOutflow,PulmonaryVenousResistance.Inflow) annotation(Line(points={{-65.6,
              -23.6195},{-61.8,-23.6195},{-61.8,-22},{-57,-22}},                                                                                                    color={0,0,0}, smooth=Smooth.None));
      connect(PulmonaryVenousResistance.Outflow,cardiacOutputMeasurementInflow.Inflow) annotation(Line(points={{-39,-22},{-33,-22}}, color={0,0,0}, smooth=Smooth.None));
      connect(RvSys.y,PulmonaryVenousResistance.BloodResistance) annotation(Line(points={{-61.6,5.92},{-48,5.92},{-48,-12.7431}}, color={0,0,127}, smooth=Smooth.None));
      connect(busConnector.HeartRate,cardiacOutputMeasurementInflow.HR) annotation(Line(points={{-100,90},
              {-100,56},{-26,56},{-26,-15.2253},{-25.9468,-15.2253}},                                                                                             color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,cardiacOutputMeasurementOutflow.HR) annotation(Line(points={{-100,90},
              {-100,56},{56,56},{56,-9.22527},{56.0532,-9.22527}},                                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(Preload,pressureSourceInflow.DesiredPressure) annotation(Line(points={{
              -103.699,0.31405},{-83.2,0.31405},{-83.2,-16}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(Afterload,pressureSourceOutflow.DesiredPressure) annotation(Line(points={{74.3009,
              10.3141},{94.8,10.3141},{94.8,-10}},                                                                                   color={0,0,127}, smooth=Smooth.None));
      connect(CO,cardiacOutputMeasurementOutflow.CO) annotation(Line(points={{88.0156,
              -52.6458},{61.2,-52.6458},{61.2,-22.9764}},                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(SV,cardiacOutputMeasurementOutflow.SV) annotation(Line(points={{87.7318,
              -73.3073},{59.1639,-73.3073},{59.1639,-23}},                                                                         color={0,0,127}, smooth=Smooth.None));
      connect(cardiacOutputMeasurementInflow.Outflow,
        rightHeartBurkhoffWithBusConnector.bloodFlowInflow) annotation (Line(
          points={{-15,-22},{-10,-22},{-10,-20.54},{-6.38,-20.54}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.bloodFlowOutflow,
        cardiacOutputMeasurementOutflow.Inflow) annotation (Line(
          points={{32.38,-20.54},{40.19,-20.54},{40.19,-16},{49,-16}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.controlBus, busConnector)
        annotation (Line(
          points={{-4.1,-10.88},{-4.1,56},{-100,56},{-100,90},{-100,90}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={255,0,0}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(visible=true, origin={93.5,-60.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "SV", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={91.5,61.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "CO", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(origin={-30.5,77.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, textString
                =                                                                                   "Preload", lineColor={0,0,0}),Text(origin={-18,-70.5}, rotation=180,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-34,-14.5},{34,14.5}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Afterload"),Text(extent={{-76,42},{68,-20}}, lineColor={0,0,255},
                lineThickness =                                                                                                   1, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Right Heart")}), Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end StarlingRightHeart;

    model StarlingRightHeartTest
      Constant DesiredOutflowPressure(k=14) annotation(Placement(transformation(extent={{-118,16},{-110,24}})));
      Constant Preload1(k=0) annotation(Placement(transformation(extent={{-74,62},
                {-68,68}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-90,74},
                {-70,94}})));
      StarlingRightHeart starlingRightHeart annotation(Placement(transformation(extent={{-68,30},{-48,50}})));
      StarlingRightHeart starlingRightHeart1
                                            annotation(Placement(transformation(extent={{-34,30},
                {-14,50}})));
      Constant Preload2(k=2) annotation(Placement(transformation(extent={{-48,62},
                {-42,68}})));
      modelInputsBlock modelInputsBlock1
        annotation (Placement(transformation(extent={{-136,54},{-116,74}})));
      StarlingRightHeart starlingRightHeart2
                                            annotation(Placement(transformation(extent={{0,30},{
                20,50}})));
      StarlingRightHeart starlingRightHeart3
                                            annotation(Placement(transformation(extent={{40,30},
                {60,50}})));
      StarlingRightHeart starlingRightHeart4
                                            annotation(Placement(transformation(extent={{78,30},
                {98,50}})));
      StarlingRightHeart starlingRightHeart5
                                            annotation(Placement(transformation(extent={{-68,-28},
                {-48,-8}})));
      StarlingRightHeart starlingRightHeart6
                                            annotation(Placement(transformation(extent={{-34,-28},
                {-14,-8}})));
      StarlingRightHeart starlingRightHeart7
                                            annotation(Placement(transformation(extent={{0,-28},
                {20,-8}})));
      StarlingRightHeart starlingRightHeart8
                                            annotation(Placement(transformation(extent={{40,-28},
                {60,-8}})));
      StarlingRightHeart starlingRightHeart9
                                            annotation(Placement(transformation(extent={{80,-28},
                {100,-8}})));
      Constant Preload3(k=4) annotation(Placement(transformation(extent={{-12,62},
                {-6,68}})));
      Constant Preload4(k=6) annotation(Placement(transformation(extent={{22,62},
                {28,68}})));
      Constant Preload5(k=8) annotation(Placement(transformation(extent={{60,62},
                {66,68}})));
      Constant Preload6(k=10)
                             annotation(Placement(transformation(extent={{-72,2},
                {-66,8}})));
      Constant Preload7(k=14)
                             annotation(Placement(transformation(extent={{-40,2},
                {-34,8}})));
      Constant Preload8(k=17)
                             annotation(Placement(transformation(extent={{-6,2},{
                0,8}})));
      Constant Preload9(k=20)
                             annotation(Placement(transformation(extent={{28,2},{
                34,8}})));
      Constant Preload10(k=23)
                             annotation(Placement(transformation(extent={{66,2},{
                72,8}})));
    equation
      connect(Preload1.y,starlingRightHeart.Preload) annotation(Line(points={{-67.7,
              65.06},{-60.8657,65.06},{-60.8657,49.5632}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingRightHeart.Afterload) annotation(Line(points={{-109.6,20.08},{-60.2657,20.08},{-60.2657,30.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{-109.6,20.08},{-26.2657,20.08},{-26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart1.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-34,49},{-34,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,
              89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(Preload2.y, starlingRightHeart1.Preload) annotation (Line(
          points={{-41.7,65.06},{-26.8657,65.06},{-26.8657,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-118.2,64},{-94,64},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(Preload6.y, starlingRightHeart5.Preload) annotation (Line(
          points={{-65.7,5.06},{-60.8657,5.06},{-60.8657,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload7.y, starlingRightHeart6.Preload) annotation (Line(
          points={{-33.7,5.06},{-26.8657,5.06},{-26.8657,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload8.y, starlingRightHeart7.Preload) annotation (Line(
          points={{0.3,5.06},{7.1343,5.06},{7.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload9.y, starlingRightHeart8.Preload) annotation (Line(
          points={{34.3,5.06},{47.1343,5.06},{47.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload10.y, starlingRightHeart9.Preload) annotation (Line(
          points={{72.3,5.06},{87.1343,5.06},{87.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart2.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{7.7343,30.1632},{7.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart3.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{47.7343,30.1632},{47.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart4.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{85.7343,30.1632},{85.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload3.y, starlingRightHeart2.Preload) annotation (Line(
          points={{-5.7,65.06},{7.1343,65.06},{7.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload4.y, starlingRightHeart3.Preload) annotation (Line(
          points={{28.3,65.06},{47.1343,65.06},{47.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload5.y, starlingRightHeart4.Preload) annotation (Line(
          points={{66.3,65.06},{85.1343,65.06},{85.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart5.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-60.2657,-27.8368},{-60.2657,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart6.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-26.2657,-27.8368},{-26.2657,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart7.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{7.7343,-27.8368},{7.7343,-42},{-96,-42},{-96,20},{-98,20},{
              -60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart8.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{47.7343,-27.8368},{47.7343,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart9.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{87.7343,-27.8368},{87.7343,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart5.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-68,-9},{-68,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-68,49},{-68,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,
              89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart2.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{0,49},{-2,49},{-2,58},{-94,58},{-94,96},{-80,96},{-80,89},{
              -79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart3.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,49},{40,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart4.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{78,49},{78,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart6.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-34,-9},{-34,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart7.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{0,-9},{0,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart8.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,-9},{40,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart9.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{80,-9},{80,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},
                lineThickness=0.5,                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-84,82},{78,-22}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Starling Right Heart Test")}),                                                                                               Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end StarlingRightHeartTest;

    model Heamodynamics_BurkhoffWitBusConnector_new
      PressureFlowMeasurement MeasurementAorta annotation(Placement(transformation(extent={{-14,14},{14,-14}}, rotation=270, origin={124,-28})));
      PressureFlowMeasurement MeasurementPulmonaryArtery annotation(Placement(transformation(extent={{-13.5,-14},{13.5,14}}, rotation=0, origin={-39.5,24})));
      PulmonaryCirculationBurkhoff pulmonaryCirculationBurkhoff annotation(Placement(transformation(extent={{-16,-12},{30,38}})));
      PressureFlowMeasurement MeasurementPulmonaryVeins annotation(Placement(transformation(extent={{-12.5,-13},{12.5,13}}, rotation=0, origin={50.5,23})));
      PressureFlowMeasurement MeasurementCentraSystemicVeins annotation(Placement(transformation(extent={{-13,-13},{13,13}}, rotation=90, origin={-107,-31})));
      BusConnector busConnector annotation(Placement(transformation(extent={{-130,80},{-110,100}}), iconTransformation(extent={{-110,50},{-90,70}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-74,52},{-30,92}})));
      RightHeartBurkhoffWithBusConnector rightHeartBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-100,-6},{-62,46}})));
      LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector annotation(Placement(transformation(extent={{70,-4},{108,48}})));
      SystemicCirculationBurkhoff systemicCirculationBurkhoff annotation(Placement(transformation(extent={{-26,-76},{36,-24}})));
      modelInputsBlock modelInputsBlock1 annotation(Placement(transformation(extent={{-192,74},{-138,124}})));
      BloodVolume bloodVolume annotation(Placement(transformation(extent={{62,-110},{110,-76}})));
    equation
      connect(MeasurementPulmonaryArtery.Outflow,pulmonaryCirculationBurkhoff.bloodFlowInflow) annotation(Line(points={{-27.35,24},{-27.35,13},{-18.3,13}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryCirculationBurkhoff.bloodFlowOutflow,MeasurementPulmonaryVeins.Inflow) annotation(Line(points={{31.38,12.5},{36,12.5},{36,23},{39.25,23}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(busConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-120,90},
              {-51.78,90},{-51.78,82}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(MeasurementCentraSystemicVeins.Outflow,rightHeartBurkhoffWithBusConnector.bloodFlowInflow) annotation(Line(points={{-107,-19.3},{-107,20.52},{-100.38,20.52}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(rightHeartBurkhoffWithBusConnector.bloodFlowOutflow,MeasurementPulmonaryArtery.Inflow) annotation(Line(points={{-61.62,20.52},{-52.8,20.52},{-52.8,24},{-51.65,24}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(busConnector.HeartRate,MeasurementCentraSystemicVeins.HR) annotation(Line(points={{-120,90},
              {-120,-33.5308},{-115.807,-33.5308}},                                                                                             color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,MeasurementPulmonaryArtery.HR) annotation(Line(points={{-120,90},
              {-120,54},{-42.1282,54},{-42.1282,33.4846}},                                                                                         color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.HeartRate,MeasurementPulmonaryVeins.HR) annotation(Line(points={{-120,90},
              {-120,54},{48.0665,54},{48.0665,31.8071}},                                                                                        color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector.PTH,pulmonaryCirculationBurkhoff.IntrathoracicPresssure) annotation(Line(points={{-120,90},{-120,54},{9.76,54},{9.76,25}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(MeasurementPulmonaryVeins.Outflow,leftHeartBurkhofWithBusConnector.bloodFlowInflow) annotation(Line(points={{61.75,23},{62,23},{62,22.52},{69.62,22.52}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(leftHeartBurkhofWithBusConnector.bloodFlowOutflow,MeasurementAorta.Inflow) annotation(Line(points={{108.38,22.52},{124,22.52},{124,-15.4}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(busConnector,rightHeartBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-120,90},{-120,31.44},{-98.1,31.44}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(busConnector,leftHeartBurkhofWithBusConnector.controlBus) annotation(Line(points={{-120,90},{-120,54},{72.66,54},{72.66,33.96}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(MeasurementCentraSystemicVeins.Inflow,systemicCirculationBurkhoff.bloodFlowOutflow) annotation(Line(points={{-107,-42.7},{-107,-48.96},{-29.72,-48.96}}, color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(systemicCirculationBurkhoff.bloodFlowInflow,MeasurementAorta.Outflow) annotation(Line(points={{40.96,-50},{124,-50},{124,-40.6}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(busConnector.PTH,systemicCirculationBurkhoff.IntrathoracicPresssure) annotation(Line(points={{-120,90},{-120,-14},{8.72,-14},{8.72,-37.52}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(modelInputsBlock1.inputBusConnector,busConnector) annotation(Line(points={{-143.94,99},{-129.97,99},{-129.97,90},{-120,90}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%second", index=1, extent={{6,3},{6,3}}));
      connect(busConnector.HeartRate,MeasurementAorta.HR) annotation(Line(points={{-120,90},
              {-120,-14},{74,-14},{74,-26},{114.515,-26},{114.515,-25.2745}},                                                                               color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(pulmonaryCirculationBurkhoff.PulmonaryBloodVolume,bloodVolume.PulmonaryBloodVolume) annotation(Line(points={{-11.17,0.25},{-11.17,-32},{87.68,-32},{87.68,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoff.PulmonaryStressedVolume,bloodVolume.PulmonaryStressedVolume) annotation(Line(points={{24.71,0.25},{24.71,-30},{92.96,-30},{92.96,-76.51}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicStressedVolume,bloodVolume.SystemicStressedVolume) annotation(Line(points={{31.97,-63.26},{31.97,-68},{107.36,-68},{107.36,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(systemicCirculationBurkhoff.SystemicBloodVolume,bloodVolume.SystemicBloodVolume) annotation(Line(points={{-18.87,-63.26},{-18.87,-70},{102.56,-70},{102.56,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(leftHeartBurkhofWithBusConnector.StressedVolume,bloodVolume.LeftHeartStressedVolume) annotation(Line(points={{96.22,-3.48},{96.22,-40},{80.96,-40},{80.96,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(leftHeartBurkhofWithBusConnector.Volume,bloodVolume.LeftHeartBloodVolume) annotation(Line(points={{81.78,-3.48},{81.78,-38},{76.16,-38},{76.16,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.StressedVolume,bloodVolume.RighHeartStressedVolume) annotation(Line(points={{-73.78,-5.48},{-73.78,-72},{68.48,-72},{68.48,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.Volume,bloodVolume.RighHeartBloodVolume) annotation(Line(points={{-88.22,-5.48},{-88.22,-74},{63.68,-74},{63.68,-76.85}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(visible=true, origin={-0.0,-85.0},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-15.0},{100.0,15.0}}, textString
                =                                                                                   "Heamodynamics - version 2", fontName="Arial")}));
    end Heamodynamics_BurkhoffWitBusConnector_new;

    model RightHeartTest
      modelInputsBlock modelInputsBlock1
        annotation (Placement(transformation(extent={{-232,42},{-212,62}})));
      StarlingRightHeart starlingRightHeart
        annotation (Placement(transformation(extent={{-38,30},{-18,50}})));
      modelInputsBlock modelInputsBlock2
        annotation (Placement(transformation(extent={{-82,44},{-62,64}})));
      Constant Preload1(k=5) annotation(Placement(transformation(extent={{-64,72},
                {-58,78}})));
      Constant DesiredOutflowPressure(k=14) annotation(Placement(transformation(extent={{-52,12},
                {-44,20}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-6,60},
                {14,80}})));
    equation
      connect(modelInputsBlock2.inputBusConnector, starlingRightHeart.busConnector)
        annotation (Line(
          points={{-64.2,54},{-51.1,54},{-51.1,49},{-38,49}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(DesiredOutflowPressure.y, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-43.6,16.08},{-30.2657,16.08},{-30.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload1.y, starlingRightHeart.Preload) annotation (Line(
          points={{-57.7,75.06},{-30.8657,75.06},{-30.8657,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heartElasticitiesBurkhoffWithBusConnector.controlBus,
        starlingRightHeart.busConnector) annotation (Line(
          points={{4.1,75},{4.1,88},{-66,88},{-66,62},{-52,62},{-52,54},{-51.1,
              54},{-51.1,49},{-38,49}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},
                lineThickness=0.5,                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-58,42},{60,-2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Right Heart")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics));
    end RightHeartTest;

    model HaedynamicsBurkhoffModel
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-46,48},
                {-12,80}})));
      RightHeartBurkhoffWithBusConnector rightHeartBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-100,-6},
                {-62,46}})));
      LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector annotation(Placement(transformation(extent={{64,-7},
                {102,45}})));
      modelInputsBlock modelInputsBlock1(PTH(k=0))
                                         annotation(Placement(transformation(extent={{-108,60},
                {-54,110}})));
      PulmonaryCirculationBurkhoffWithBusConnector
        pulmonaryCirculationBurkhoffWithBusConnector(PulmonaryArteryProximal(V0=
             12))
        annotation (Placement(transformation(extent={{-24,-10},{30,50}})));
      SystemicCirculationBurkhoffWithBusConnector
        systemicCirculationBurkhoffWithBusConnector(
        AortaProximal(V0=8),
        SystemicArteries(V0=124),
        SystemicVeins(V0=392))
        annotation (Placement(transformation(extent={{-26,-108},{28,-54}})));
      PressureFlowMeasurementWithBusConnector MeasurementPulmonaryArtery
        annotation (Placement(transformation(extent={{-56,10},{-36,30}})));
      PressureFlowMeasurementWithBusConnector MeasurementPulmonaryVeins
        annotation (Placement(transformation(extent={{38,10},{58,30}})));
      PressureFlowMeasurementWithBusConnector MeasurementAorta
        annotation (Placement(transformation(extent={{72,-79},{52,-53}})));
      PressureFlowMeasurementWithBusConnector MeasurementCentralVeins
        annotation (Placement(transformation(extent={{-54,-79},{-74,-53}})));
      BloodVolumeWithBusConnector bloodVolumeWithBusConnector
        annotation (Placement(transformation(extent={{-30,-46},{22,-2}})));
    equation
      connect(systemicCirculationBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementCentralVeins.Inflow)                  annotation (Line(
          points={{-29.24,-79.92},{-41.62,-79.92},{-41.62,-66},{-55,-66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementCentralVeins.Outflow,
        rightHeartBurkhoffWithBusConnector.bloodFlowInflow) annotation (Line(
          points={{-73,-66},{-114,-66},{-114,20.52},{-100.38,20.52}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(rightHeartBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementPulmonaryArtery.Inflow)              annotation (Line(
          points={{-61.62,20.52},{-57.81,20.52},{-57.81,20},{-55,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementPulmonaryArtery.Outflow,
        pulmonaryCirculationBurkhoffWithBusConnector.bloodFlowInflow)
        annotation (Line(
          points={{-37,20},{-26.7,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(pulmonaryCirculationBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementPulmonaryVeins.Inflow)                annotation (Line(
          points={{31.62,20},{39,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementPulmonaryVeins.Outflow,
        leftHeartBurkhofWithBusConnector.bloodFlowInflow) annotation (Line(
          points={{57,20},{60,20},{60,19.52},{63.62,19.52}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(leftHeartBurkhofWithBusConnector.bloodFlowOutflow,
        MeasurementAorta.Inflow)                         annotation (Line(
          points={{102.38,19.52},{106,19.52},{106,-66},{71,-66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementAorta.Outflow,
        systemicCirculationBurkhoffWithBusConnector.bloodFlowInflow)
        annotation (Line(
          points={{53,-66},{42,-66},{42,-81},{32.32,-81}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(modelInputsBlock1.inputBusConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-59.94,85},{-28.83,85},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,
        leftHeartBurkhofWithBusConnector.controlBus) annotation (Line(
          points={{-59.94,85},{66.66,85},{66.66,30.96}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.controlBus,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-98.1,31.44},{-98.1,48},{-52,48},{-52,80},{-28.83,80},{
              -28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoffWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-16.98,31.4},{-16.98,48},{-52,48},{-52,80},{-28.83,80},{
              -28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementPulmonaryVeins.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,25},{40,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementPulmonaryArtery.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-54,25},{-54,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(MeasurementCentralVeins.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-56,-59.5},{-56,-48},{-120,-48},{-120,48},{-52,48},{-52,80},
              {-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculationBurkhoffWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-20.6,-71.28},{-20.6,-60},{-20,-60},{-20,-48},{-120,-48},{
              -120,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementAorta.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{70,-59.5},{70,-48},{-120,-48},{-120,48},{-52,48},{-52,80},{
              -28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeWithBusConnector.stressedVolumeInflow,
        MeasurementCentralVeins.Inflow) annotation (Line(
          points={{-30,-33.68},{-36,-33.68},{-36,-34},{-42,-34},{-42,-66},{-55,
              -66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(bloodVolumeWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-26.88,-12.56},{-56,-12.56},{-56,-48},{-120,-48},{-120,48},{
              -52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.Volume,
        bloodVolumeWithBusConnector.RightHeartVolume) annotation (Line(
          points={{-88.22,-5.48},{-88.22,-10},{-52,-10},{-52,0},{-18.7308,0},{
              -18.7308,-6.04096}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(leftHeartBurkhofWithBusConnector.Volume,
        bloodVolumeWithBusConnector.LeftHeartVolume) annotation (Line(
          points={{75.78,-6.48},{75.78,-12},{44,-12},{44,0},{-4.69082,0},{
              -4.69082,-6.48096}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                    graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100.0,-100.0},{100.0,100.0}}, initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(              origin={0,
                  -85},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{-100.0,-15.0},{100.0,15.0}},                                         fontName=
                  "Arial",
              lineColor={0,0,0},
              textString="Heamodynamics - version 3")}));
    end HaedynamicsBurkhoffModel;

    model PulmonaryCirculationBurkhoffWithBusConnector
      Constant UVaproxPulm(k=0)
        "Unstressed volume in proximal pulmonary artery [ml]"                          annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-102,16}),visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-144,-6},{-134,6}}), iconTransformation(extent={{-120,-10},{-100,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-6},{110,6}}), iconTransformation(extent={{96,-10},
                {116,10}})));
      BloodCapacitanceCompartment PulmonaryArteryProximal(V0=12) annotation(Placement(transformation(extent={{-96,-18},
                {-64,14}})));
      BloodCapacitanceCompartment PulmonaryArtery(V0=235) annotation(Placement(transformation(extent={{-28,-16},{2,14}})));
      BloodCapacitanceCompartment PulmonaryVeins(V0=71)  annotation(Placement(transformation(extent={{32,-16},
                {62,14}})));
      VariableBloodResistor pulmonaryProximalArteryResistance annotation(Placement(transformation(extent={{-53,-8},{-37,8}})));
      VariableBloodResistor pulmonaryArterialResistance annotation(Placement(transformation(extent={{9,-9},{27,9}})));
      VariableBloodResistor pulmonaryVenousResistance annotation(Placement(transformation(extent={{76,-10},
                {96,10}})));
      Modelica.Blocks.Math.Add3 StressedVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=180, origin={-31,-63})));
      Constant UVaPulm(k=0) "Unstressed volume in pulmonary arteries [ml]"   annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-34,15}), visible=true));
      Constant UVvPulm(k=0) "Unstressed volume in pulmonary veins [ml]"   annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={28,15}), visible=true));
      VariableBloodResistor pulmonaryProximalImpedance annotation(Placement(transformation(extent={{-127,
                -10},{-111,6}})));
      BusConnector busConnector annotation (Placement(transformation(extent={{-148,64},
                {-124,88}}),          iconTransformation(extent={{-84,28},{-64,
                48}})));
    equation
      connect(bloodFlowOutflow,pulmonaryVenousResistance.Outflow) annotation(Line(points={{105,0},
              {95,0}},                                                                                     color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(PulmonaryArteryProximal.bloodFlowOutflow,
        pulmonaryProximalArteryResistance.Inflow)                                                annotation(Line(points={{
              -63.0667,-1.19139},{-62,-1.19139},{-62,0},{-52.2,0}},                                                                                           color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryProximalArteryResistance.Outflow, PulmonaryArtery.bloodFlowInflow)
                                                                                         annotation(Line(points={{-37.8,0},
              {-28,0},{-28,-0.258775}},                                                                                                    color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(PulmonaryArtery.bloodFlowOutflow, pulmonaryArterialResistance.Inflow)
                                                                                   annotation(Line(points={{2.87499,
              -0.24193},{10.4375,-0.24193},{10.4375,0},{9.9,0}},                                                                                                    color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryArterialResistance.Outflow, PulmonaryVeins.bloodFlowInflow)
                                                                                  annotation(Line(points={{26.1,0},
              {32,0},{32,-0.258775}},                                                                                                    color={255,0,0}, smooth=Smooth.None, arrow={Arrow.Filled,Arrow.None}, thickness=1));
      connect(PulmonaryVeins.bloodFlowOutflow,pulmonaryVenousResistance.Inflow) annotation(Line(points={{62.875,
              -0.24193},{74,-0.24193},{74,0},{77,0}},                                                                                                   color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(UVaproxPulm.y,PulmonaryArteryProximal.UnstressedVolume) annotation(Line(points={{-97.6,
              15.92},{-90.3915,15.92},{-90.3915,11.8314}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(UVvPulm.y,PulmonaryVeins.UnstressedVolume) annotation(Line(points={{32.4,
              14.92},{37.258,14.92},{37.258,11.9669}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(UVaPulm.y,PulmonaryArtery.UnstressedVolume) annotation(Line(points={{-29.6,
              14.92},{-22.742,14.92},{-22.742,11.9669}},                                                                            color={0,0,127}, smooth=Smooth.None));
      connect(pulmonaryProximalImpedance.Inflow,bloodFlowInflow) annotation(Line(points={{-126.2,
              -2},{-132,-2},{-132,0},{-139,0}},                                                                color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonaryProximalImpedance.Outflow,PulmonaryArteryProximal.bloodFlowInflow) annotation(Line(points={{-111.8,
              -2},{-100,-2},{-100,-1.20936},{-96,-1.20936}},                                                                                                    color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(busConnector.PTH, PulmonaryArtery.ExternalPressure) annotation (
          Line(
          points={{-136,76},{-12.992,76},{-12.992,14.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.PTH, PulmonaryVeins.ExternalPressure) annotation (
          Line(
          points={{-136,76},{47.008,76},{47.008,14.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CaPulm, PulmonaryArtery.Capacitance) annotation (
          Line(
          points={{-136,76},{-3.24198,76},{-3.24198,11.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(busConnector.PTH, PulmonaryArteryProximal.ExternalPressure)
        annotation (Line(
          points={{-136,76},{-79.9914,76},{-79.9914,15.0314}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CAproxPulm, PulmonaryArteryProximal.Capacitance)
        annotation (Line(
          points={{-136,76},{-69.5914,76},{-69.5914,11.8314}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RcPulm, pulmonaryProximalArteryResistance.BloodResistance)
        annotation (Line(
          points={{-136,76},{-45,76},{-45,7.40552}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RcproxPulm, pulmonaryProximalImpedance.BloodResistance)
        annotation (Line(
          points={{-136,76},{-119,76},{-119,5.40552}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RaPulm, pulmonaryArterialResistance.BloodResistance)
        annotation (Line(
          points={{-136,76},{18,76},{18,8.33121}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RvPulm, pulmonaryVenousResistance.BloodResistance)
        annotation (Line(
          points={{-136,76},{86,76},{86,9.2569}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CvPulm, PulmonaryVeins.Capacitance) annotation (Line(
          points={{-136,76},{56.758,76},{56.758,11.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(StressedVolume.y, busConnector.PulmonaryStressedVolume)
        annotation (Line(
          points={{-40.9,-63},{-148,-63},{-148,76},{-136,76}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(StressedVolume.u3, PulmonaryArteryProximal.StressedVolume)
        annotation (Line(
          points={{-20.2,-55.8},{-2,-55.8},{-2,-40},{-80,-40},{-80,-18.9037}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(PulmonaryArtery.StressedVolume, StressedVolume.u2) annotation (
          Line(
          points={{-13,-16.8473},{-13,-34},{6,-34},{6,-63},{-20.2,-63}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(PulmonaryVeins.StressedVolume, StressedVolume.u1) annotation (
          Line(
          points={{47,-16.8473},{47,-70.2},{-20.2,-70.2}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2}), graphics), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{92.0,-44.0},{110.0,46.0}}),Rectangle(visible=true, fillColor={255,170,85}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-44.0},{102.0,46.0}}),Ellipse(visible=true, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-110.0,-44.0},{-92.0,46.0}}),Text(origin={-1.393,75.7326}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-84.607,-91.7326},{89.393,-59.7326}}, fontName="Arial", textString
                =                                                                                   "Pulmonary Circulation")},
                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end PulmonaryCirculationBurkhoffWithBusConnector;

    model SystemicCirculationBurkhoffWithBusConnector
      Constant UVaproxSys(k=0) "Unstressed volume in proximal aorta [ml]"  annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-96,24}), visible=true));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-138,-6},{-128,6}}), iconTransformation(extent={{106,-10},{126,10}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{100,-6},{110,6}}), iconTransformation(extent={{-122,-6},{-102,14}})));
      BloodCapacitanceCompartment AortaProximal(V0=8)  annotation(Placement(transformation(extent={{-94,-16},{-64,14}})));
      BloodCapacitanceCompartment SystemicArteries(V0=124) annotation(Placement(transformation(extent={{-28,-16},{2,14}})));
      BloodCapacitanceCompartment SystemicVeins(V0=392)  annotation(Placement(transformation(extent={{34,-16},{64,14}})));
      VariableBloodResistor ProximalAortaResistance annotation(Placement(transformation(extent={{-53,-8},{-37,8}})));
      VariableBloodResistor SystemicArterialResistance annotation(Placement(transformation(extent={{9,-9},{27,9}})));
      VariableBloodResistor SystemicVenousResistance annotation(Placement(transformation(extent={{74,-10},
                {94,10}})));
      Modelica.Blocks.Math.Add3 StressedVolume annotation(Placement(transformation(extent={{-9,-9},{9,9}}, rotation=180, origin={-45,-73})));
      Constant UVaSys(k=0) "Unstressed volume in systemic arteries [ml]"   annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={-30,21}), visible=true));
      Constant UVvSys(k=0) "Unstressed volume in systemic veins [ml]"    annotation(Placement(transformation(extent={{4,-4},{-4,4}}, rotation=180, origin={30,19}), visible=true));
      Constant ExternelPressure(k=0) "External Presseure [mmHg]" annotation(Placement(transformation(extent={{5,-5},{
                -5,5}},                                                                                                    rotation=0, origin={47,49}), visible=true));
      VariableBloodResistor SystemicProximalImpedance annotation(Placement(transformation(extent={{-117,-8},{-101,8}})));
      BusConnector busConnector annotation (Placement(transformation(extent={{
                -138,78},{-118,98}}), iconTransformation(extent={{-90,26},{-70,
                46}})));
    equation
      connect(bloodFlowOutflow,SystemicVenousResistance.Outflow) annotation(Line(points={{105,0},
              {93,0}},                                                                                    color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(AortaProximal.bloodFlowOutflow,ProximalAortaResistance.Inflow) annotation(Line(points={{-63.125,
              -0.24193},{-62,-0.24193},{-62,0},{-52.2,0}},                                                                                                 color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(ProximalAortaResistance.Outflow,SystemicArteries.bloodFlowInflow) annotation(Line(points={{-37.8,0},{-28,0},{-28,-0.258775}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(SystemicArteries.bloodFlowOutflow,SystemicArterialResistance.Inflow) annotation(Line(points={{2.87499,
              -0.24193},{10.4375,-0.24193},{10.4375,0},{9.9,0}},                                                                                                    color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(SystemicArterialResistance.Outflow,SystemicVeins.bloodFlowInflow) annotation(Line(points={{26.1,0},{34,0},{34,-0.258775}}, color={0,0,255}, smooth=Smooth.None, arrow={Arrow.Filled,Arrow.None}, thickness=1));
      connect(SystemicVeins.bloodFlowOutflow,SystemicVenousResistance.Inflow) annotation(Line(points={{64.875,
              -0.24193},{74,-0.24193},{74,0},{75,0}},                                                                                                 color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(UVaproxSys.y,AortaProximal.UnstressedVolume) annotation(Line(points={{-91.6,
              23.92},{-88.7421,23.92},{-88.7421,11.9669}},                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(UVvSys.y,SystemicVeins.UnstressedVolume) annotation(Line(points={{34.4,
              18.92},{39.258,18.92},{39.258,11.9669}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(UVaSys.y,SystemicArteries.UnstressedVolume) annotation(Line(points={{-25.6,
              20.92},{-22.742,20.92},{-22.742,11.9669}},                                                                            color={0,0,127}, smooth=Smooth.None));
      connect(SystemicArteries.ExternalPressure,ExternelPressure.y) annotation(Line(points={{-12.992,
              14.9669},{-12.992,49.1},{41.5,49.1}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(SystemicProximalImpedance.Inflow,bloodFlowInflow) annotation(Line(points={{-116.2,0},{-133,0}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(SystemicProximalImpedance.Outflow,AortaProximal.bloodFlowInflow) annotation(Line(points={{-101.8,0},{-98,0},{-98,-0.258775},{-94,-0.258775}}, color={255,0,0}, smooth=Smooth.None, thickness=1));
      connect(busConnector.PTH, AortaProximal.ExternalPressure) annotation (
          Line(
          points={{-128,88},{-78.992,88},{-78.992,14.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RcproxSys, SystemicProximalImpedance.BloodResistance)
        annotation (Line(
          points={{-128,88},{-109,88},{-109,7.40552}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RcSys, ProximalAortaResistance.BloodResistance)
        annotation (Line(
          points={{-128,88},{-45,88},{-45,7.40552}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RaSys, SystemicArterialResistance.BloodResistance)
        annotation (Line(
          points={{-128,88},{18,88},{18,8.33121}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.RvSys, SystemicVenousResistance.BloodResistance)
        annotation (Line(
          points={{-128,88},{84,88},{84,9.2569}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CaproxSys, AortaProximal.Capacitance) annotation (
          Line(
          points={{-128,88},{-69.242,88},{-69.242,11.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CaSys, SystemicArteries.Capacitance) annotation (
          Line(
          points={{-128,88},{-3.24198,88},{-3.24198,11.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CvSys, SystemicVeins.Capacitance) annotation (Line(
          points={{-128,88},{58.758,88},{58.758,11.9669}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(ExternelPressure.y, SystemicVeins.ExternalPressure) annotation (
          Line(
          points={{41.5,49.1},{36,49.1},{36,36},{49.008,36},{49.008,14.9669}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(StressedVolume.u3, AortaProximal.StressedVolume) annotation (Line(
          points={{-34.2,-65.8},{-26,-65.8},{-26,-46},{-79,-46},{-79,-16.8473}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(StressedVolume.u2, SystemicArteries.StressedVolume) annotation (
          Line(
          points={{-34.2,-73},{-13,-73},{-13,-16.8473}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(StressedVolume.y, busConnector.SystemicStressedVolume)
        annotation (Line(
          points={{-54.9,-73},{-142,-73},{-142,88},{-128,88}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(SystemicVeins.StressedVolume, StressedVolume.u1) annotation (Line(
          points={{49,-16.8473},{49,-80.2},{-34.2,-80.2}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=false, initialScale=0.1, grid={2,2}), graphics), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,85},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{92.0,-44.0},{110.0,46.0}}),Rectangle(visible=true, fillColor={255,170,85}, pattern=LinePattern.None,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-44.0},{102.0,46.0}}),Ellipse(visible=true, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-110.0,-44.0},{-92.0,46.0}}),
                                                                                                    Text(origin={8.607,85.7326}, lineColor={0,0,255}, fillColor={0,0,255},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-84.607,-91.7326},{89.393,-59.7326}}, fontName="Arial", textString
                =                                                                                   "Systemic Circulation")},
                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end SystemicCirculationBurkhoffWithBusConnector;

    model PressureFlowMeasurementWithBusConnector

      Modelica.Blocks.Interfaces.RealOutput Pmean
        "Mean pressure during heart cycle in mmHg"                                           annotation(Placement(visible=true, transformation(origin={21.219,
                -52},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-30,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput SV "systolic volume in ml" annotation(Placement(visible=true, transformation(origin={15.7318,
                -43.3073},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={11.6389,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput CO "Cardiac output in L/min" annotation(Placement(visible=true, transformation(origin={12.0156,
                -34.6458},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={32,-69.7639}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      BloodFlowInflow Inflow annotation(Placement(transformation(extent={{-112,-10},{-92,10}}), iconTransformation(extent={{-100,-10},{-80,10}})));
      BloodFlowOutflow Outflow annotation(Placement(transformation(extent={{82,-10},{102,10}}), iconTransformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Interfaces.RealOutput Ps
        "Systolic pressure during heart cycle in mmHg"                                        annotation(Placement(visible=true, transformation(origin={31.219,
                -72},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-70,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));
      Modelica.Blocks.Interfaces.RealOutput Pd
        "Diastolic pressure during heart cycle in mmHg"                                        annotation(Placement(visible=true, transformation(origin={25.219,
                -62},                                                                                                    extent={{-10.0,-10.0},{10.0,10.0}}, rotation=0), iconTransformation(origin={-50,-70}, extent={{-10.0,-10.0},{10.0,10.0}}, rotation=-90)));

      BusConnector busConnector annotation (Placement(transformation(extent={{-90,40},
                {-70,60}}), iconTransformation(extent={{-90,40},{-70,60}})));

      PressureFlowMeasurement pressureFlowMeasurement
        annotation (Placement(transformation(extent={{-48,-35},{22,35}})));
    equation
      connect(Inflow, pressureFlowMeasurement.Inflow) annotation (Line(
          points={{-102,0},{-44.5,0}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(pressureFlowMeasurement.Outflow, Outflow) annotation (Line(
          points={{18.5,0},{92,0}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(CO, pressureFlowMeasurement.CO) annotation (Line(
          points={{12.0156,-34.6458},{-1.8,-34.6458},{-1.8,-24.4174}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(SV, pressureFlowMeasurement.SV) annotation (Line(
          points={{15.7318,-43.3073},{-8.92638,-43.3073},{-8.92638,-24.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Pmean, pressureFlowMeasurement.Pmean) annotation (Line(
          points={{21.219,-52},{-23.5,-52},{-23.5,-24.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Pd, pressureFlowMeasurement.Pd) annotation (Line(
          points={{25.219,-62},{-30.5,-62},{-30.5,-24.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Ps, pressureFlowMeasurement.Ps) annotation (Line(
          points={{31.219,-72},{-37.5,-72},{-37.5,-24.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector.HeartRate, pressureFlowMeasurement.HR) annotation (
          Line(
          points={{-80,50},{-19.8138,50},{-19.8138,23.7115}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}),
                         graphics), Icon(graphics={Polygon(visible=true, fillColor={255,255,0},
                fillPattern =                                                                               FillPattern.Solid, points={{-100.0,60.0},{-100.0,-60.0},{60.0,-60.0},{100.0,0.0},{60.0,60.0},{-100.0,60.0}}),Text(visible=true, origin={-70,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Ps"),Text(visible=true, origin={11.5,-20.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "SV", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),Text(visible=true, origin={31.5,-20.5}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-27.5,-12.5},{27.5,12.5}}, textString
                =                                                                                   "CO", fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left),
                                                                                                    Text(visible=true, origin={-50,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Pd"),Text(visible=true, origin={-30,-12.3919}, rotation=90,
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-39.5,-13.0},{39.5,13.0}}, fontName="Arial",
                horizontalAlignment =                                                                                                   TextAlignment.Left, lineColor={0,0,0}, textString
                =                                                                                   "Pmean")}, coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false,initialScale=0.1, grid={10,10})));
    end PressureFlowMeasurementWithBusConnector;

    model bloodflowPump

      BloodFlowOutflow bloodFlowOutflow annotation (Placement(transformation(extent=
               {{-110,-10},{-90,10}}), iconTransformation(extent={{-110,-10},{-90,10}})));
      Modelica.Blocks.Interfaces.RealInput DesiredFlow
        "Desired blood flow [ml/sec]"                                               annotation(Placement(visible=true, transformation(origin={-103.699,0.3141}, extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={3.343,
                63.632},                                                                                                    extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
    equation
      bloodFlowOutflow.Q=-DesiredFlow;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Polygon(
              points={{-100,0},{-60,60},{100,60},{100,-60},{-60,-60},{-100,0}},
              lineColor={0,0,255},
              smooth=Smooth.None,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-72,44},{94,-42}},
              lineColor={255,0,0},
              lineThickness=1,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Blod Flow Pump")}));
    end bloodflowPump;

    model BloodVolumeWithBusConnector

      Modelica.Blocks.Interfaces.RealOutput TotalBloodVolume annotation(Placement(transformation(extent={{-6,-74},
                {14,-54}}),                                                                                                   iconTransformation(extent={{-10,-10},
                {10,10}},
            rotation=0,
            origin={110,54})));
      Modelica.Blocks.Interfaces.RealOutput TotalBloodStressedVolume annotation(Placement(transformation(extent={{98,24},
                {118,44}}),                                                                                                    iconTransformation(extent={{100,16},
                {120,36}})));
      Modelica.Blocks.Interfaces.RealOutput TotalBloodUnstressedVolume annotation(Placement(transformation(extent={{6,-58},
                {26,-38}}),                                                                                                    iconTransformation(extent={{100,-18},
                {120,2}})));
      BusConnector busConnector annotation (Placement(transformation(extent={{-98,42},
                {-78,62}}),         iconTransformation(extent={{-98,42},{-78,62}})));
      Modelica.Blocks.Math.Add vascularStressedVolume
                                      annotation(Placement(transformation(extent={{-18,56},
                {4,78}})));
      Modelica.Blocks.Math.Add heartBloodVolume
                                      annotation(Placement(transformation(extent={{-16,10},
                {6,32}})));
      Modelica.Blocks.Math.Add StressedVolume
                                      annotation(Placement(transformation(extent={{46,22},
                {68,44}})));
      Modelica.Blocks.Math.Feedback desiredStressedVolume
        annotation (Placement(transformation(extent={{-20,-26},{0,-6}})));
      Modelica.Blocks.Math.Feedback desiredStressedVolume1 annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={20,-16})));
      Modelica.Blocks.Math.Gain gain(k=1) annotation (Placement(transformation(
            extent={{-5,-5},{5,5}},
            rotation=270,
            origin={80,-49})));
      bloodflowPump bloodflowPump1
        annotation (Placement(transformation(extent={{52,-96},{76,-74}})));
      BloodFlowOutflow stressedVolumeInflow annotation (Placement(
            transformation(extent={{-110,-90},{-100,-80}}), iconTransformation(
              extent={{-110,-54},{-90,-34}})));
      Modelica.Blocks.Interfaces.RealInput RightHeartVolume
        "BloodVolume in Left Heart [ml]"                                            annotation(Placement(visible=true, transformation(origin={-41.699,
                12.3141},                                                                                                    extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-56.657,
                81.632},                                                                                                    extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
      Modelica.Blocks.Interfaces.RealInput LeftHeartVolume
        "BloodVolume in Left Heart [ml]"                                            annotation(Placement(visible=true, transformation(origin={-41.699,
                30.3141},                                                                                                    extent={{-9.69911,-9.686},{9.69893,9.6859}}, rotation=0), iconTransformation(origin={-2.657,
                79.632},                                                                                                    extent={{-8.657,-8.3684},{8.657,8.3684}}, rotation=270)));
    equation

      connect(StressedVolume.y, TotalBloodStressedVolume) annotation (Line(
          points={{69.1,33},{83.55,33},{83.55,34},{108,34}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heartBloodVolume.y, StressedVolume.u2)    annotation (Line(
          points={{7.1,21},{30,21},{30,26.4},{43.8,26.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vascularStressedVolume.y, StressedVolume.u1) annotation (Line(
          points={{5.1,67},{22,67},{22,39.6},{43.8,39.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector.PulmonaryStressedVolume, vascularStressedVolume.u1)
        annotation (Line(
          points={{-88,52},{-52,52},{-52,73.6},{-20.2,73.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.SystemicStressedVolume, vascularStressedVolume.u2)
        annotation (Line(
          points={{-88,52},{-52,52},{-52,60.4},{-20.2,60.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.TotalUnstressedVolume, TotalBloodUnstressedVolume)
        annotation (Line(
          points={{-88,52},{-52,52},{-52,-48},{16,-48}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.TotalBloodVolume, TotalBloodVolume) annotation (Line(
          points={{-88,52},{-52,52},{-52,-64},{4,-64}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.TotalBloodVolume, desiredStressedVolume.u1)
        annotation (Line(
          points={{-88,52},{-52,52},{-52,-70},{-44,-70},{-44,-16},{-18,-16}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.TotalUnstressedVolume, desiredStressedVolume.u2)
        annotation (Line(
          points={{-88,52},{-52,52},{-52,-48},{-34,-48},{-34,-28},{-10,-28},{
              -10,-24}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(gain.u, desiredStressedVolume1.y) annotation (Line(
          points={{80,-43},{80,-16},{27.2,-16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(desiredStressedVolume.y, desiredStressedVolume1.u1) annotation (
          Line(
          points={{-1,-16},{13.6,-16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(desiredStressedVolume1.u2, StressedVolume.y) annotation (Line(
          points={{20,-9.6},{20,6},{78,6},{78,33},{69.1,33}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodflowPump1.DesiredFlow, gain.y) annotation (Line(
          points={{64.4012,-78.0005},{64.4012,-62.8184},{80,-62.8184},{80,-54.5}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(bloodflowPump1.bloodFlowOutflow, stressedVolumeInflow)
        annotation (Line(
          points={{52,-85},{-105,-85}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(heartBloodVolume.u1, LeftHeartVolume) annotation (Line(
          points={{-18.2,27.6},{-25.1,27.6},{-25.1,30.3141},{-41.6991,30.3141}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(RightHeartVolume, heartBloodVolume.u2) annotation (Line(
          points={{-41.6991,12.3141},{-26,12.3141},{-26,14.4},{-18.2,14.4}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                    graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                                                    graphics={Rectangle(extent={{
                  -100,80},{100,-80}},                                                                                                    lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Text(extent={{22,64},{92,48}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Volume"),Text(extent={{-18,50},{96,0}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Stressed Volume"),Text(extent={{-18,20},{96,-30}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Total Blood Unstressed Volume"),
                                                                                                    Text(extent={{
                  -82,-18},{32,-68}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid,
              textString="Stressed Volume Inflow")}));
    end BloodVolumeWithBusConnector;

    model LeftHeartTest
      modelInputsBlock modelInputsBlock1 annotation(Placement(transformation(extent={{-120,66},{-100,86}})));
      Constant DesiredOutflowPressure(k=85) annotation(Placement(transformation(extent={{-120,24},{-112,32}})));
      StarlingLeftHeart starlingLeftHeart0 annotation(Placement(transformation(extent={{-80,22},{-50,60}})));
      Constant Preload1(k=36)
                             annotation(Placement(transformation(extent={{-78,62},{-72,68}})));
      HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-80,82},{-60,102}})));
    equation
      connect(Preload1.y,starlingLeftHeart0.Preload) annotation(Line(points={{-71.7,
              65.06},{-69.2986,65.06},{-69.2986,59.1701}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingLeftHeart0.Afterload) annotation(Line(points={{-111.6,
              28.08},{-92,28.08},{-92,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart0.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,58.1},{-80,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-102.2,
              76},{-88,76},{-88,98},{-69.9,98},{-69.9,97}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-80,64},{66,2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Left Heart Test")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end LeftHeartTest;

    model RightHeartBurkhoff_BusConnector
      ControlBus controlBus annotation(Placement(transformation(extent={{-132,90},
                {-112,110}}),                                                                   iconTransformation(extent={{-100,34},{-80,54}})));
      Constant VRAU(k=5) annotation(Placement(transformation(extent={{-94.0,-20.0},{-86.0,-12.0}}, origin={12,0}, rotation=0), visible=true));
      Constant VRVU(k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={14,8.2054}, rotation=0), visible=true));
      CardiacValve tricuspidValve annotation(Placement(transformation(extent={{-20.0,-90.0},{0.0,-70.0}}, origin={2,32}, rotation=0), visible=true));
      CardiacValve pulmonicValve annotation(Placement(transformation(extent={{74.0,-90.0},{94.0,-70.0}}, origin={-4.5264,32}, rotation=0), visible=true));
      BloodElasticCompartment RightAtrium(V0=89) annotation(Placement(visible=true, transformation(origin={-52.3077,-48.7449}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      BloodElasticCompartment RightVentricle(V0=140)
                                                    annotation(Placement(visible=true, transformation(origin={29.7449,-49}, extent={{-20.7449,-20.7449},{20.7449,20.7449}}, rotation=0)));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{32,52},{82,92}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-68,52},{-18,92}})));
      Modelica.Blocks.Math.Product product annotation(Placement(transformation(extent={{-72,3},{-60,15}})));
      Modelica.Blocks.Math.Add add annotation(Placement(transformation(extent={{-6,-6},{6,6}}, rotation=270, origin={-52,-4})));
      Modelica.Blocks.Math.Add stressedVolume annotation(Placement(transformation(extent={{-38,-98},{-26,-86}})));
      Modelica.Blocks.Math.Add volume annotation(Placement(transformation(extent={{46,-98},{58,-86}})));
      BloodFlowInflow bloodFlowInflow annotation(Placement(transformation(extent={{-106,-52},{-98,-44}}), iconTransformation(extent={{-112,-8},{-92,12}})));
      BloodFlowOutflow bloodFlowOutflow annotation(Placement(transformation(extent={{102,-52},{110,-44}}), iconTransformation(extent={{92,-8},{112,12}})));
      Modelica.Blocks.Interfaces.RealOutput StressedVolume annotation(Placement(transformation(extent={{-10,-10},{10,10}}, rotation=0, origin={-8,-92}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={38,-98})));
      Modelica.Blocks.Interfaces.RealOutput Volume annotation(Placement(transformation(extent={{70,-102},
                {90,-82}}),                                                                                          iconTransformation(extent={{-10,-10},{10,10}}, rotation=270, origin={-38,-98})));
      Modelica.Blocks.Interfaces.RealOutput ESP
        "Right Ventricle End Systolic Pressure [mmHg]"     annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={117,51}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={86,-56})));
      Modelica.Blocks.Interfaces.RealOutput ESV
        "Right Ventricle End Systolic Volume [ml]"         annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={121,63}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={98,-32})));
      Modelica.Blocks.Interfaces.RealOutput EDP
        "Right Ventricle End Diastolic Pressure [mmHg]"    annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={119,73}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-88,-54})));
      Modelica.Blocks.Interfaces.RealOutput EDV
        "Right Ventricle End Diastolic Volume [ml]"        annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={105,79}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=180, origin={-98,-30})));
      Constant VRVU1(
                    k=5) annotation(Placement(transformation(extent={{-12.0,-22.0},{-4.0,-14.0}}, origin={66,
                50.2054},                                                                                             rotation=0), visible=true));
    equation
      connect(RightVentricle.bloodFlowOutflow,pulmonicValve.bloodFlowInflow) annotation(Line(visible=true, origin={63.4177,-47.9758}, points={{
              -11.7178,0.0242058},{2.8309,0.0242058},{2.8309,-0.0242},{6.0559,
              -0.0242}},                                                                                                    color={0,0,255}, thickness=1));
      connect(tricuspidValve.bloodFlowOutflow,RightVentricle.bloodFlowInflow) annotation(Line(visible=true, origin={5.587,-47.9874}, points={{-4.187,
              -0.0126},{0.387,-0.0126},{0.387,0.0125092},{3.413,0.0125092}},                                                                                                    color={0,0,255}, thickness=1));
      connect(RightAtrium.bloodFlowOutflow,tricuspidValve.bloodFlowInflow) annotation(Line(points={{
              -30.3527,-47.6965},{-18,-47.6965},{-18,-48}},                                                                                       color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(RightAtrium.StressedVolume,AtrialElastance.Vs) annotation(Line(points={{
              -52.3077,-71.1436},{-52.3077,-82},{-94,-82},{-94,74},{-70.5,74}},                                                      color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.StressedVolume,VentricularElastance.Vs) annotation(Line(points={{29.7449,
              -71.3987},{29.7449,-80},{98,-80},{98,40},{-2,40},{-2,74},{29.5,74}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(AtrialElastance.Et,RightAtrium.Elastance) annotation(Line(points={{-15.5,
              86},{-8,86},{-8,12},{-38.8124,12},{-38.8124,-29.7745}},                                                                          color={0,0,127}, smooth=Smooth.None));
      connect(VentricularElastance.Et,RightVentricle.Elastance) annotation(Line(points={{84.5,86},
              {88,86},{88,84},{92,84},{92,22},{43.2402,22},{43.2402,-30.0296}},                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(RightVentricle.Pressure,product.u2) annotation(Line(points={{46.3408,
              -63.1006},{46.3408,-76},{-86,-76},{-86,5.4},{-73.2,5.4}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(product.y,add.u2) annotation(Line(points={{-59.4,9},{-55.6,9},{-55.6,3.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.y,RightAtrium.ExternalPressure) annotation(Line(points={{-52,
              -10.6},{-52,-25.6255},{-52.2966,-25.6255}},                                                                  color={0,0,127}, smooth=Smooth.None));
      connect(bloodFlowInflow,RightAtrium.bloodFlowInflow) annotation(Line(points={{-102,
              -48},{-87.5263,-48},{-87.5263,-47.7198},{-73.0526,-47.7198}},                                                                            color={0,0,255}, smooth=Smooth.None, thickness=1));
      connect(pulmonicValve.bloodFlowOutflow,bloodFlowOutflow) annotation(Line(points={{88.8736,-48},{106,-48}}, color={0,0,255}, thickness=1, smooth=Smooth.None));
      connect(stressedVolume.u1,VentricularElastance.Vs) annotation(Line(points={{-39.2,
              -88.4},{-44,-88.4},{-44,-80},{98,-80},{98,40},{-2,40},{-2,74},{
              29.5,74}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.u2,AtrialElastance.Vs) annotation(Line(points={{-39.2,
              -95.6},{-52,-95.6},{-52,-82},{-94,-82},{-94,74},{-70.5,74}},                                                  color={0,0,127}, smooth=Smooth.None));
      connect(RightAtrium.Volume,volume.u2) annotation(Line(points={{-66.8291,
              -62.8455},{-66.8291,-100},{36,-100},{36,-95.6},{44.8,-95.6}},                                                                 color={0,0,127}, smooth=Smooth.None));
      connect(volume.u1,RightVentricle.Volume) annotation(Line(points={{44.8,
              -88.4},{15.2235,-88.4},{15.2235,-63.1006}},                                                                color={0,0,127}, smooth=Smooth.None));
      connect(volume.y,Volume) annotation(Line(points={{58.6,-92},{80,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(stressedVolume.y,StressedVolume) annotation(Line(points={{-25.4,-92},{-8,-92}}, color={0,0,127}, smooth=Smooth.None));
      connect(controlBus.AEt0,AtrialElastance.Et0) annotation(Line(points={{-122,
              100},{-122,64},{-70.5,64},{-70.5,64.4}},                                                                            color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.VEt0,VentricularElastance.Et0) annotation(Line(points={{-122,
              100},{-122,46},{2,46},{2,64.4},{29.5,64.4}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.AVGain,product.u1) annotation(Line(points={{-122,100},
              {-122,12.6},{-73.2,12.6}},                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,add.u1) annotation(Line(points={{-122,100},{-122,
              24},{-48.4,24},{-48.4,3.2}},                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.PTH,RightVentricle.ExternalPressure) annotation(Line(points={{-122,
              100},{-122,24},{29.756,24},{29.756,-25.8806}},                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAEes,AtrialElastance.Ees) annotation(Line(points={{-122,
              100},{-96,100},{-96,90.2},{-70.25,90.2}},                                                                           color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAAlpha,AtrialElastance.Alpha) annotation(Line(points={{-122,
              100},{-96,100},{-96,85.8},{-70.25,85.8}},                                                                               color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RABeta,AtrialElastance.Beta) annotation(Line(points={{-122,
              100},{-96,100},{-96,79.6},{-70.5,79.6}},                                                                              color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVEes,VentricularElastance.Ees) annotation(Line(points={{-122,
              100},{0,100},{0,90.2},{29.75,90.2}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVAlpha,VentricularElastance.Alpha) annotation(Line(points={{-122,
              100},{0,100},{0,85.8},{29.75,85.8}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVBeta,VentricularElastance.Beta) annotation(Line(points={{-122,
              100},{0,100},{0,79.6},{29.5,79.6}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Rtv,tricuspidValve.outflowResistance) annotation(Line(points={{-122,
              100},{-122,24},{-24,24},{-24,-37.4},{-13,-37.4}},                                                                               color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Ctv,tricuspidValve.inflowConductanceValue) annotation(Line(points={{-122,
              100},{-122,24},{-10,24},{-10,-37.2},{-4,-37.2}},                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Rpv,pulmonicValve.outflowResistance) annotation(Line(points={{-122,
              100},{-122,24},{64,24},{64,-37.4},{74.4736,-37.4}},                                                                                                  color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.Cpv,pulmonicValve.inflowConductanceValue) annotation(Line(points={{-122,
              100},{-122,24},{78,24},{78,-37.2},{83.4736,-37.2}},                                                                                   color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));

      connect(VentricularElastance.ESP, ESP) annotation (Line(
          points={{84.5,54},{96,54},{96,51},{117,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VRVU.y, RightVentricle.UnstressedVolume) annotation (Line(
          points={{10.4,-9.7146},{17.309,-9.7146},{17.309,-30.0296}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VRAU.y, RightAtrium.UnstressedVolume) annotation (Line(
          points={{-73.6,-15.92},{-64.7436,-15.92},{-64.7436,-29.7745}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VRVU1.y, ESP) annotation (Line(
          points={{62.4,32.2854},{84,32.2854},{84,54},{96,54},{96,51},{117,51}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(ESV, ESP) annotation (Line(
          points={{121,63},{94,63},{94,54},{96,54},{96,51},{117,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EDP, ESP) annotation (Line(
          points={{119,73},{94,73},{94,54},{96,54},{96,51},{117,51}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EDV, ESP) annotation (Line(
          points={{105,79},{94,79},{94,54},{96,54},{96,51},{117,51}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={Ellipse(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-100.0,-100.0},{100.0,100.0}}),Text(visible=true, lineColor={0,0,255}, fillColor={255,170,170},
                fillPattern =                                                                                                   FillPattern.Solid, extent={{-66,-14},{68,14}}, textString
                =                                                                                   "Right Heart", fontName="Arial"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{-62,-88},{-10,-72}}, fontName="Arial", textString
                =                                                                                   "Volume"),Text(lineColor={0,0,255}, fillColor={0,0,255}, extent={{0,-112},{92,-50}}, fontName="Arial", textString
                =                                                                                   "Stressed Volume"),              Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -88,-38},{-36,-22}},                                                                                                    fontName=
                  "Arial",
              textString="EDV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  -80,-62},{-28,-46}},                                                                                                    fontName=
                  "Arial",
              textString="EDP"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  38,-40},{90,-24}},                                                                                                    fontName=
                  "Arial",
              textString="ESV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  26,-66},{78,-50}},                                                                                                    fontName=
                  "Arial",
              textString="ESP")},                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end RightHeartBurkhoff_BusConnector;

    model HeartElastanceBurkhoffEDVESV
      "Elastance of heart artia and ventricules by Burkhoff"

      Modelica.Blocks.Interfaces.RealInput Et0
        "Relative elastance value (Elastance/EndSystolic Elastance)"                                        annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,-38},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vs "Stressed volume in ml" annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,10},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Alpha
        "coefficient eo end diastolic pressure-volume curve"                                          annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-109,
                69.0001},                                                                                                    extent={{
                -8.99991,-9.0001},{9.00027,8.99992}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Beta
        "coefficient eo end diastolic pressure-volume curve"                                         annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,38},         extent={{
                -9.99994,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Ees
        "coefficient eo end-systolic elastance in mmHg/ml"                                        annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-109,91},          extent={{
                -8.99994,-9},{9.00018,9}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Et "elasticity (torr/ml)" annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,40},  rotation=0), visible=true));

      Modelica.Blocks.Interfaces.RealInput EDT "End Diastolic Time"                                         annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,-62},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput EDV "End diastolic volume [ml]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-36}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealOutput EDP "End Diastolic Pressure [mmHg]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-58}, rotation=0), visible=true));

      Modelica.Blocks.Interfaces.RealInput V0 "Unstressed volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,-14},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput ESV "End diastolic volume [ml]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-98}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealOutput ESP "End Diastolic Pressure [mmHg]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-120},rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealInput Tmax "Duration of systole [msec]"                                annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-110,-90},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));

    Real EST "End Systolic Time";
    Boolean b;
    Boolean bb;
    equation
      b=(time - EDT) >= 0 "b=true when new cdiastole cycle begins";
      EST=EDT+Tmax/1000 "time of end systole in sec";
     // bb=(time-EST)>=0 "bb=true when current systole ended";
      bb=abs(Et0-1)<0.001;
      Et=(1 - Et0)*(Beta*(exp(Alpha*Vs) - 1))/Vs + Et0*Ees;

      when {b} then
        EDV=Vs+V0;
        EDP=Et*Vs;
      end when;
      when {bb} then
        ESV = Vs+V0;
        ESP=Et*Vs;
      end when;

      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                      graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}, fillColor={255,255,0},
                fillPattern =                                                                                                   FillPattern.Solid),Line(points={{
                  -44,90},{-44,-60},{80,-60}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-58},{24,-56},{48,-54},{64,-52},{70,-50},{76,-48},{80,-46},{84,
                  -44}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-60},{2,88}},                                                                                                    color={0,0,0}, smooth=Smooth.None),Line(points={{
                  -40,-60},{82,56}},                                                                                                    color={255,0,0}, smooth=Smooth.None),Polygon(points={{
                  70,48},{66,56},{74,52},{70,48}},                                                                                                    lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid),Polygon(points={{0,-4},{-4,4},{4,0},{0,-4}}, lineColor={255,0,0}, smooth=Smooth.None, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, origin={78,
                  45},                                                                                                    rotation=180),Text(extent={{
                  -100,102},{-50,76}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Ees"),Text(extent={{
                  -100,54},{-40,24}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Beta"),Text(extent={{
                  -106,78},{-34,54}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Alpha"),Text(extent={{
                  -118,24},{-42,-8}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Vs"),Text(extent={{
                  -114,-24},{-44,-52}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Et0"),                                                                                            Text(extent={{
                  56,90},{110,52}},                                                                                                    lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Et"),Text(extent={{-100,-104},{102,-126}}, lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "%name"),
                                                                                                    Text(extent={{
                  -108,-48},{-40,-76}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDT"),                                                                                           Text(extent={{
                  40,8},{108,-18}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDV"),                                                                                           Text(extent={{
                  42,-14},{108,-40}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDP"),                                                                                              Text(extent={{
                  -116,0},{-40,-32}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="V0"),                                                                                            Text(extent={{
                  40,-56},{108,-82}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="ESV"),                                                                                           Text(extent={{
                  40,-76},{112,-104}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="ESP"),                                                                    Text(extent={{
                  -104,-74},{-36,-102}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Tmax")}),Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics));
    end HeartElastanceBurkhoffEDVESV;

    model VentricularEndIntervals

      Modelica.Blocks.Interfaces.RealInput EDT "End Diastolic Time"                                         annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-100,-52},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Tmax "Duration of systole [msec]"                                annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-100,-92},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput V0 "Unstressed volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-100,-22},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Vs "Stressed volume in ml" annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-100,6},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Et
        "Ventricular Elastance in ml/mmHg"                            annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-102,64},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Et0
        "Relative elastance value (Elastance/EndSystolic Elastance)"                                        annotation(Placement(visible=true, transformation(origin={-167.3974,74.6281}, extent={{-20.0,-20.0},{20.0,20.0}}, rotation=0), iconTransformation(origin={-102,38},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput ESV
        "Right Ventricle End Systolic Volume [ml]"         annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={121,63}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,50})));
      Modelica.Blocks.Interfaces.RealOutput ESP
        "Right Ventricle End Systolic Pressure [mmHg]"     annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={117,51}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,12})));
      Modelica.Blocks.Interfaces.RealOutput EDV "End diastolic volume [ml]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-60}, rotation=0), visible=true));
      Modelica.Blocks.Interfaces.RealOutput EDP "End Diastolic Pressure [mmHg]"
                                                                      annotation(Placement(transformation(extent={{94.0,16.0},{114.0,36.0}}, origin={0.0,0.0}, rotation=0), iconTransformation(extent={{100.0,20.0},{120.0,40.0}}, origin={0,-102},rotation=0), visible=true));

    Real EST "End Systolic Time";
    Boolean b;
    Boolean bb;
    equation
     b=(time - EDT) >= 0 "b=true when new cdiastole cycle begins";
      EST=EDT+Tmax/1000 "time of end systole in sec";
      bb=abs(Et0-1)<0.001;
        when {b} then
        EDV=Vs+V0;
        EDP=Et*Vs;
      end when;
      when {bb} then
        ESV = Vs+V0;
        ESP=Et*Vs;
      end when;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-94,114},{92,60}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Ventricular End Intervals"),                                              Text(extent={{
                  -98,-38},{-30,-66}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDT"),                                                                    Text(extent={{
                  -96,-76},{-28,-104}},                                                                                                   lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Tmax"),                                                                                             Text(extent={{
                  -106,-6},{-30,-38}},                                                                                                   lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="V0"),                                                                                               Text(extent={{
                  -108,22},{-32,-10}},                                                                                                   lineColor={0,0,255}, fillColor={255,0,0},
                fillPattern =                                                                                                   FillPattern.Solid, textString
                =                                                                                   "Vs"),   Text(extent={{
                  -112,80},{-36,48}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Et"),                                                                                            Text(extent={{
                  -106,48},{-36,20}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="Et0"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  34,36},{96,62}},                                                                                                    fontName=
                  "Arial",
              textString="ESV"),                                                                                                    Text(lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {0,0,255},                                                                                                    extent={{
                  40,-2},{102,24}},                                                                                                    fontName=
                  "Arial",
              textString="ESP"),                                                                                           Text(extent={{
                  38,-60},{104,-86}},                                                                                                    lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDP"),                                                                                           Text(extent={{
                  36,-18},{104,-44}},                                                                                                  lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,0,0},
                fillPattern=FillPattern.Solid,
              textString="EDV")}));
    end VentricularEndIntervals;

    model RightHeartElastance
      ControlBus controlBus annotation(Placement(transformation(extent={{-132,88},
                {-112,108}}),                                                                   iconTransformation(extent={{-96,78},
                {-76,98}})));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{16,56},
                {66,96}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-58,4},
                {-8,44}})));
      Modelica.Blocks.Interfaces.RealInput AtrialVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-110.699,
                15.3141},                                                                                                    extent={{-8.6991,
                -8.68598},{8.69893,8.68591}},                                                                                                    rotation=0), iconTransformation(origin={-98,18},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VentricularVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-70.699,
                77.3141},                                                                                                    extent={{-8.699,
                -8.6859},{8.699,8.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-16},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "Atrial Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-101.699,
                0.3141},                                                                                                    extent={{
                -9.69916,-9.68588},{9.69886,9.68589}},                                                                                                    rotation=0), iconTransformation(origin={-98,-44},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-74.699,
                61.3141},                                                                                                    extent={{
                -10.6989,-10.6859},{10.6989,10.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-74},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput AtrialPressure
        "Atrial Pressure [mmHg]"                           annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={81,-27}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,40})));
      Modelica.Blocks.Interfaces.RealOutput VentricularPressure
        "Ventricular pressure [mmHg]"                      annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={103,29}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,-6})));
      PressureFromElastance pressureFromElastance
        annotation (Placement(transformation(extent={{14,-42},{56,-8}})));
      PressureFromElastance pressureFromElastance1
        annotation (Placement(transformation(extent={{44,12},{86,46}})));
    equation
      connect(controlBus.RAEes,AtrialElastance.Ees) annotation(Line(points={{-122,98},
              {-96,98},{-96,42.2},{-60.25,42.2}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAAlpha,AtrialElastance.Alpha) annotation(Line(points={{-122,98},
              {-96,98},{-96,37.8},{-60.25,37.8}},                                                                                     color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RABeta,AtrialElastance.Beta) annotation(Line(points={{-122,98},
              {-96,98},{-96,31.6},{-60.5,31.6}},                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVEes,VentricularElastance.Ees) annotation(Line(points={{-122,98},
              {-48,98},{-48,94.2},{13.75,94.2}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVAlpha,VentricularElastance.Alpha) annotation(Line(points={{-122,98},
              {-48,98},{-48,89.8},{13.75,89.8}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVBeta,VentricularElastance.Beta) annotation(Line(points={{-122,98},
              {-48,98},{-48,83.6},{13.5,83.6}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));

      connect(AtrialElastance.Vs, AtrialVolume) annotation (Line(
          points={{-60.5,26},{-92,26},{-92,15.3141},{-110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VentricularElastance.Vs, VentricularVolume) annotation (Line(
          points={{13.5,78},{-26,78},{-26,77.3141},{-70.699,77.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VEt0, VentricularElastance.Et0) annotation (Line(
          points={{-74.699,61.3141},{-28,61.3141},{-28,68.4},{13.5,68.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AEt0, AtrialElastance.Et0) annotation (Line(
          points={{-101.699,0.314105},{-82,0.314105},{-82,16.4},{-60.5,16.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,-13.1},{12.74,-13.1}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(pressureFromElastance.Volume, AtrialVolume) annotation (Line(
          points={{13.16,-25.34},{-88,-25.34},{-88,16},{-92,16},{-92,15.3141},{
              -110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AtrialElastance.Et, pressureFromElastance.Elastance) annotation (
          Line(
          points={{-5.5,38},{-2,38},{-2,-30.1},{13.16,-30.1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance.Pressure, AtrialPressure) annotation (Line(
          points={{58.1,-26.02},{67.05,-26.02},{67.05,-27},{81,-27}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance1.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,40.9},{42.74,40.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(VentricularVolume, pressureFromElastance1.Volume) annotation (
          Line(
          points={{-70.699,77.3141},{4,77.3141},{4,28.66},{43.16,28.66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Elastance, VentricularElastance.Et)
        annotation (Line(
          points={{43.16,23.9},{22,23.9},{22,52},{78,52},{78,90},{68.5,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Pressure, VentricularPressure) annotation (
         Line(
          points={{88.1,27.98},{93.05,27.98},{93.05,29},{103,29}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-102}},
              lineColor={255,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -54,68},{80,96}},                                                                                                 fontName=
                  "Arial",
              textString="Right Heart Elastance"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,6},{-42,28}},                                                                                                 fontName=
                  "Arial",
              textString="AtrialVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -86,-42},{-28,8}},                                                                                                fontName=
                  "Arial",
              textString="VentricularVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -84,-80},{18,-10}},                                                                                               fontName=
                  "Arial",
              textString="AEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,-110},{20,-40}},                                                                                              fontName=
                  "Arial",
              textString="VEt0 (atrial elasticity from 0 to 1)")},                                                                   coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end RightHeartElastance;

    model PressureFromElastance

      Modelica.Blocks.Interfaces.RealInput IntrapleuralPressure
        "intrapleural pressure in mmHg"                               annotation(Placement(visible=true, transformation(origin={-110.699,
                15.3141},                                                                                                    extent={{-8.6991,
                -8.68598},{8.69893,8.68591}},                                                                                                    rotation=0), iconTransformation(origin={-106,70},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Volume "Volume in ml"      annotation(Placement(visible=true, transformation(origin={-70.699,
                77.3141},                                                                                                    extent={{-8.699,
                -8.6859},{8.699,8.6859}},                                                                                                    rotation=0), iconTransformation(origin={-104,-2},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput Elastance "in mmHg/ml"                                           annotation(Placement(visible=true, transformation(origin={-101.699,
                0.3141},                                                                                                    extent={{
                -9.69916,-9.68588},{9.69886,9.68589}},                                                                                                    rotation=0), iconTransformation(origin={-104,-30},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput Pressure "Pressure [mmHg]"
                                                           annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={121,63}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,-6})));
     parameter Real UnstressedVolume=5 "initial volume in ml";
      Real TransmuralPressure;
      Real StressedVolume;

    equation
      TransmuralPressure=Pressure - IntrapleuralPressure;
      StressedVolume=Volume - UnstressedVolume;
      if StressedVolume > 0 then
        TransmuralPressure=Elastance*StressedVolume;
      else
        TransmuralPressure=0;
      end if;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-64,60},{82,-12}},
              lineColor={255,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Pressure = Funct (Volume, Elastance)"),
            Text(
              extent={{-90,92},{8,50}},
              lineColor={0,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="IntrapleuralPressure"),
            Text(
              extent={{-94,6},{-36,-8}},
              lineColor={0,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Volume"),
            Text(
              extent={{-98,-24},{-40,-38}},
              lineColor={0,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Elastance"),
            Text(
              extent={{34,4},{92,-10}},
              lineColor={0,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Pressure")}));
    end PressureFromElastance;

    model LeftHeartElastance
      ControlBus controlBus annotation(Placement(transformation(extent={{-132,88},
                {-112,108}}),                                                                   iconTransformation(extent={{-96,78},
                {-76,98}})));
      HeartElastanceBurkhoff VentricularElastance annotation(Placement(transformation(extent={{16,56},
                {66,96}})));
      HeartElastanceBurkhoff AtrialElastance annotation(Placement(transformation(extent={{-58,4},
                {-8,44}})));
      Modelica.Blocks.Interfaces.RealInput AtrialVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-110.699,
                15.3141},                                                                                                    extent={{-8.6991,
                -8.68598},{8.69893,8.68591}},                                                                                                    rotation=0), iconTransformation(origin={-98,18},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VentricularVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-70.699,
                77.3141},                                                                                                    extent={{-8.699,
                -8.6859},{8.699,8.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-16},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "Atrial Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-101.699,
                0.3141},                                                                                                    extent={{
                -9.69916,-9.68588},{9.69886,9.68589}},                                                                                                    rotation=0), iconTransformation(origin={-98,-44},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-74.699,
                61.3141},                                                                                                    extent={{
                -10.6989,-10.6859},{10.6989,10.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-74},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput AtrialPressure
        "Atrial Pressure [mmHg]"                           annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={81,-27}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,40})));
      Modelica.Blocks.Interfaces.RealOutput VentricularPressure
        "Ventricular pressure [mmHg]"                      annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={103,29}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,-6})));
      PressureFromElastance pressureFromElastance
        annotation (Placement(transformation(extent={{14,-42},{56,-8}})));
      PressureFromElastance pressureFromElastance1
        annotation (Placement(transformation(extent={{44,12},{86,46}})));
    equation

      connect(AtrialElastance.Vs, AtrialVolume) annotation (Line(
          points={{-60.5,26},{-92,26},{-92,15.3141},{-110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VentricularElastance.Vs, VentricularVolume) annotation (Line(
          points={{13.5,78},{-26,78},{-26,77.3141},{-70.699,77.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VEt0, VentricularElastance.Et0) annotation (Line(
          points={{-74.699,61.3141},{-28,61.3141},{-28,68.4},{13.5,68.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AEt0, AtrialElastance.Et0) annotation (Line(
          points={{-101.699,0.314105},{-82,0.314105},{-82,16.4},{-60.5,16.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,-13.1},{12.74,-13.1}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(pressureFromElastance.Volume, AtrialVolume) annotation (Line(
          points={{13.16,-25.34},{-88,-25.34},{-88,16},{-92,16},{-92,15.3141},{
              -110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AtrialElastance.Et, pressureFromElastance.Elastance) annotation (
          Line(
          points={{-5.5,38},{-2,38},{-2,-30.1},{13.16,-30.1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance.Pressure, AtrialPressure) annotation (Line(
          points={{58.1,-26.02},{67.05,-26.02},{67.05,-27},{81,-27}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance1.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,40.9},{42.74,40.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(VentricularVolume, pressureFromElastance1.Volume) annotation (
          Line(
          points={{-70.699,77.3141},{4,77.3141},{4,28.66},{43.16,28.66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Elastance, VentricularElastance.Et)
        annotation (Line(
          points={{43.16,23.9},{22,23.9},{22,52},{78,52},{78,90},{68.5,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Pressure, VentricularPressure) annotation (
         Line(
          points={{88.1,27.98},{93.05,27.98},{93.05,29},{103,29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.LAEes, AtrialElastance.Ees) annotation (Line(
          points={{-122,98},{-92,98},{-92,42.2},{-60.25,42.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LAAlpha, AtrialElastance.Alpha) annotation (Line(
          points={{-122,98},{-94,98},{-94,37.8},{-60.25,37.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LABeta, AtrialElastance.Beta) annotation (Line(
          points={{-122,98},{-96,98},{-96,31.6},{-60.5,31.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVEes, VentricularElastance.Ees) annotation (Line(
          points={{-122,98},{-48,98},{-48,94.2},{13.75,94.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVAlpha, VentricularElastance.Alpha) annotation (Line(
          points={{-122,98},{-48,98},{-48,89.8},{13.75,89.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVBeta, VentricularElastance.Beta) annotation (Line(
          points={{-122,98},{-48,98},{-48,83.6},{13.5,83.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-102}},
              lineColor={255,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -54,68},{80,96}},                                                                                                 fontName=
                  "Arial",
              textString="Left Heart Elastance"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,6},{-42,28}},                                                                                                 fontName=
                  "Arial",
              textString="AtrialVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -86,-42},{-28,8}},                                                                                                fontName=
                  "Arial",
              textString="VentricularVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -84,-80},{18,-10}},                                                                                               fontName=
                  "Arial",
              textString="AEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,-110},{20,-40}},                                                                                              fontName=
                  "Arial",
              textString="VEt0 (atrial elasticity from 0 to 1)")},                                                                   coordinateSystem(extent={{-100,
                -100},{100,100}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end LeftHeartElastance;

  end Parts;

  package Test
    model TestHemodynamics
      HeamodynamicsDymola.Parts.Heamodynamics_Meurs_version2 heamodynamics_version2_1(PTH(k=0)) annotation(Placement(transformation(extent={{-88.0,-26.0},{20.0,78.0}}, origin={20.0,-8.0}, rotation=0), visible=true));
    end TestHemodynamics;

    model testRightHeart
      HeamodynamicsDymola.Parts.PressureSourceInflow inflowPressureSource annotation(Placement(transformation(extent={{-84,6},{-64,26}})));
      Parts.RightHeartBurkhoff rightHeartBurkhoff annotation(Placement(transformation(extent={{-30,-10},{24,44}})));
      Parts.PressureSourceOutflow pressureSourceOutflow annotation(Placement(transformation(extent={{62,4},{82,24}})));
      Parts.Constant Pinflow(k=7) annotation(Placement(transformation(extent={{-92,60},{-84,68}})));
      Parts.Constant AVGain(k=0.02) annotation(Placement(transformation(extent={{-66,-44},{-58,-36}})));
      Parts.HeartElasticitiesBurkhoff heartElasticitiesBurkhoff annotation(Placement(transformation(extent={{-54,68},{-26,96}})));
      Parts.Constant HeartRate(k=72) annotation(Placement(transformation(extent={{-86,88},{-78,96}})));
      Parts.Constant AVDelay(k=160) annotation(Placement(transformation(extent={{-90,74},{-82,82}})));
      Parts.Constant Pinflow1(k=25) annotation(Placement(transformation(extent={{52,36},{60,44}})));
      Parts.Constant Pinflow2(k=0) annotation(Placement(transformation(extent={{34,54},{26,62}})));
      Parts.VariableBloodResistor centralVenousResistance annotation(Placement(transformation(extent={{6,-6},{-6,6}}, rotation=180, origin={-46,16}), visible=true));
      Parts.Constant RRAIN(k=1e-05) annotation(Placement(transformation(extent={{-4.0,-4.0},{4.0,4.0}}, rotation=0, origin={-80,-12}), visible=true));
      Parts.Constant AEt0(k=0.02) annotation(Placement(transformation(extent={{-42,48},{-34,56}})));
    equation
      connect(inflowPressureSource.DesiredPressure,Pinflow.y) annotation(Line(points={{-76,21},{-76,64.08},{-83.6,64.08}}, color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{-77.6,92.08},{-64.8,92.08},{-64.8,89.6997},{-54.4005,89.6997}}, color={0,0,127}, smooth=Smooth.None));
      connect(AVDelay.y,heartElasticitiesBurkhoff.AVDelay) annotation(Line(points={{-81.6,78.08},{-67.8,78.08},{-67.8,82.961},{-54.5291,82.961}}, color={0,0,127}, smooth=Smooth.None));
      connect(Pinflow1.y,pressureSourceOutflow.DesiredPressure) annotation(Line(points={{60.4,40.08},{60.4,30.04},{70,30.04},{70,19}}, color={0,0,127}, smooth=Smooth.None));
      connect(AVGain.y,rightHeartBurkhoff.AVGain) annotation(Line(points={{-57.6,-39.92},{-44,-39.92},{-44,0.700532},{-25.8574,0.700532}}, color={0,0,127}, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoff.VEt0,rightHeartBurkhoff.VEt0) annotation(Line(points={{-24.3955,90.4},{-4.25739,90.4},{-4.25739,44.4406}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.PTH,Pinflow2.y) annotation(Line(points={{11.4026,40.1206},{11.4026,58.08},{25.6,58.08}}, color={0,0,127}, smooth=Smooth.None));
      connect(rightHeartBurkhoff.bloodFlowOutflow,pressureSourceOutflow.bloodFlowInflow) annotation(Line(points={{24.54,17.54},{42.27,17.54},{42.27,14},{62,14}}, color={0,0,0}, smooth=Smooth.None));
      connect(RRAIN.y,centralVenousResistance.BloodResistance) annotation(Line(visible=true, origin={-52.5333,-5.3656}, points={{-23.0667,-6.5544},{6.5333,-6.5544},{6.5333,15.8115}}, color={0,0,127}));
      connect(AEt0.y,rightHeartBurkhoff.AEt0) annotation(Line(points={{-33.6,52.08},{-17.7574,52.08},{-17.7574,40.1206}}, color={0,0,127}, smooth=Smooth.None));
      connect(inflowPressureSource.bloodFlowOutflow,centralVenousResistance.Inflow) annotation(Line(points={{-65,16.2378},{-57.5,16.2378},{-57.5,16},{-51.4,16}}, color={0,0,0}, smooth=Smooth.None));
      connect(centralVenousResistance.Outflow,rightHeartBurkhoff.bloodFlowInflow) annotation(Line(points={{-40.6,16},{-36,16},{-36,17.54},{-30.54,17.54}}, color={0,0,0}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end testRightHeart;

    model testStarling
      Parts.PressureSourceInflow pressureSourceInflow annotation(Placement(transformation(extent={{-106,-50},{-74,-18}})));
      Parts.PressureSourceOutflow pressureSourceOutflow annotation(Placement(transformation(extent={{72,-44},{104,-12}})));
      Parts.Constant HeartRate(k=70) annotation(Placement(transformation(extent={{-90,90},{-82,98}})));
      Parts.Constant AVDelay(k=160) annotation(Placement(transformation(extent={{-92,70},{-84,78}})));
      Parts.HeartElasticitiesBurkhoff heartElasticitiesBurkhoff annotation(Placement(transformation(extent={{-44,68},{-14,98}})));
      Parts.CardiacOutputMeasurement cardiacOutputMeasurement annotation(Placement(transformation(extent={{40,-38},{60,-18}})));
      Parts.CardiacOutputMeasurement cardiacOutputMeasurement1 annotation(Placement(transformation(extent={{-44,-42},{-24,-22}})));
      Parts.Constant PTH(k=-4) annotation(Placement(transformation(extent={{36,2},{28,10}})));
      Parts.Constant AVGain(k=0.02) annotation(Placement(transformation(extent={{-38,-58},{-30,-50}})));
      Parts.Constant DesiredInflowPressure(k=4) annotation(Placement(transformation(extent={{-116,-12},{-108,-4}})));
      Parts.Constant DesiredOutflowPressure(k=80) annotation(Placement(transformation(extent={{56,22},{64,30}})));
      Parts.VariableBloodResistor PulmonaryVenousResistance annotation(Placement(transformation(extent={{-68,-42},{-48,-22}})));
      Parts.Constant RvSys(k=1.5e-06)
        "Systemic Venous Characteristic Impedance [mmHg sec/ml]"                               annotation(Placement(transformation(extent={{-4,-4},{4,4}}, rotation=180, origin={-46,-12}), visible=true));
      Parts.LeftHeartBurkhofWithBusConnector leftHeartBurkhoffNew annotation(Placement(transformation(extent={{-10,-54},{28,-12}})));
      Parts.Constant LAEes(k=0.25)
        "Left Atrium: End-Systolic Elastance [mmHg/ml]"                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-126.531,110}, rotation=0), visible=true));
      Parts.Constant LAAlpha(k=0.04)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-128.531,62}, rotation=0), visible=true));
      Parts.Constant LABeta(k=0.3)
        "Left Atrium: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-126.531,86}, rotation=0), visible=true));
      Parts.Constant LVAlpha(k=0.024)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-126.531,74}, rotation=0), visible=true));
      Parts.Constant LVBeta(k=0.34)
        "Left Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-128.531,50}, rotation=0), visible=true));
      Parts.Constant LVEes(k=1.54)
        "Left Ventricle: End-Systolic Elastance [mmHg/ml]"                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-126.531,98}, rotation=0), visible=true));
    equation
      connect(AVDelay.y,heartElasticitiesBurkhoff.AVDelay) annotation(Line(points={{-83.6,74.08},{-66,74.08},{-66,84.0296},{-44.5669,84.0296}}, color={0,0,127}, smooth=Smooth.None));
      connect(HeartRate.y,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{-81.6,94.08},{-66,94.08},{-66,91.2497},{-44.4291,91.2497}}, color={0,0,127}, smooth=Smooth.None));
      connect(pressureSourceOutflow.bloodFlowInflow,cardiacOutputMeasurement.Outflow) annotation(Line(points={{72,-28},{59,-28}}, color={0,0,0}, smooth=Smooth.None));
      connect(cardiacOutputMeasurement1.HR,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{-35.9468,-25.2253},{-35.9468,48},{-60,48},{-60,92},{-66,92},{-66,91.2497},{-44.4291,91.2497}}, color={0,0,127}, smooth=Smooth.None));
      connect(cardiacOutputMeasurement.HR,heartElasticitiesBurkhoff.HeartRate) annotation(Line(points={{48.0532,-21.2253},{48.0532,48},{-60,48},{-60,92},{-66,92},{-66,91.2497},{-44.4291,91.2497}}, color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,pressureSourceOutflow.DesiredPressure) annotation(Line(points={{64.4,26.08},{84.8,26.08},{84.8,-20}}, color={0,0,127}, smooth=Smooth.None));
      connect(RvSys.y,PulmonaryVenousResistance.BloodResistance) annotation(Line(points={{-50.4,-12.08},{-58,-12.08},{-58,-22.7431}}, color={0,0,127}, smooth=Smooth.None));
      connect(pressureSourceInflow.bloodFlowOutflow,PulmonaryVenousResistance.Inflow) annotation(Line(points={{-75.6,-33.6195},{-70.8,-33.6195},{-70.8,-32},{-67,-32}}, color={0,0,0}, smooth=Smooth.None));
      connect(PulmonaryVenousResistance.Outflow,cardiacOutputMeasurement1.Inflow) annotation(Line(points={{-49,-32},{-43,-32}}, color={0,0,0}, smooth=Smooth.None));
      connect(DesiredInflowPressure.y,pressureSourceInflow.DesiredPressure) annotation(Line(points={{-107.6,-7.92},{-93.2,-7.92},{-93.2,-26}}, color={0,0,127}, smooth=Smooth.None));
      connect(AVGain.y,leftHeartBurkhoffNew.AVGain) annotation(Line(points={{-29.6,-53.92},{-17.8,-53.92},{-17.8,-45.6774},{-6.89483,-45.6774}}, color={0,0,127}, smooth=Smooth.None));
      connect(cardiacOutputMeasurement1.Outflow,leftHeartBurkhoffNew.bloodFlowInflow) annotation(Line(points={{-25,-32},{-16,-32},{-16,-32.58},{-10.38,-32.58}}, color={0,0,0}, smooth=Smooth.None));
      connect(leftHeartBurkhoffNew.bloodFlowOutflow,cardiacOutputMeasurement.Inflow) annotation(Line(points={{28.38,-32.58},{32.16,-32.58},{32.16,-28},{41,-28}}, color={0,0,0}, smooth=Smooth.None));
      connect(leftHeartBurkhoffNew.PTH,PTH.y) annotation(Line(points={{19.1352,-15.0173},{19.1352,6.08},{27.6,6.08}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end testStarling;

    model testEDPVR "test diastolic pressure volume relationship"
      Parts.EDPVR eDPVR annotation(Placement(transformation(extent={{-4,42},{46,92}})));
      Parts.ESPVR eSPVR annotation(Placement(transformation(extent={{4,-58},{54,-8}})));
      Parts.Constant RVAlpha(k=0.04)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-16.5306,110}, rotation=0), visible=true));
      Parts.Constant RVBeta(k=0.34)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-16.5306,98}, rotation=0), visible=true));
      Parts.Constant RVEes(k=0.83)
        "Right Ventricle: End-Systolic Elastance [mmHg/ml]"                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-10.5306,10}, rotation=0), visible=true));
      Parts.Constant VU(k=5)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-18.5306,60}, rotation=0), visible=true));
      Modelica.Blocks.Sources.Ramp Volume(height=150, duration=150) annotation(Placement(transformation(extent={{-90,0},{-70,20}})));
    equation
      connect(RVAlpha.y,eDPVR.Alpha) annotation(Line(points={{-30.1306,62.08},{-19.0653,62.08},{-19.0653,63.1898},{-4.70078,63.1898}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVBeta.y,eDPVR.Beta) annotation(Line(points={{-30.1306,50.08},{-20.0653,50.08},{-20.0653,51.1898},{-5.20078,51.1898}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVEes.y,eSPVR.Ees) annotation(Line(points={{-24.1306,-37.92},{-12.0653,-37.92},{-12.0653,-36.8102},{3.29922,-36.8102}}, color={0,0,127}, smooth=Smooth.None));
      connect(VU.y,eSPVR.Vu) annotation(Line(points={{-32.1306,12.08},{-16,12.08},{-16,-24.6334},{2.7259,-24.6334}}, color={0,0,127}, smooth=Smooth.None));
      connect(VU.y,eDPVR.Vu) annotation(Line(points={{-32.1306,12.08},{-16,12.08},{-16,75.3666},{-5.2741,75.3666}}, color={0,0,127}, smooth=Smooth.None));
      connect(Volume.y,eDPVR.Ved) annotation(Line(points={{-69,10},{-60,10},{-60,86.3158},{-5.32862,86.3158}}, color={0,0,127}, smooth=Smooth.None));
      connect(Volume.y,eSPVR.Ves) annotation(Line(points={{-69,10},{-60,10},{-60,-13.6842},{2.67138,-13.6842}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end testEDPVR;

    model TestElasticCurveCompare
      Parts.HeartElastanceBurkhoff heartElastanceBurkhoff annotation(Placement(transformation(extent={{60,18},{130,84}})));
      Parts.Constant RVAlpha(k=0.04)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-60.5306,114}, rotation=0), visible=true));
      Parts.Constant RVBeta(k=0.34)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-64.5306,98}, rotation=0), visible=true));
      Parts.Constant RVEes(k=0.83)
        "Right Ventricle: End-Systolic Elastance [mmHg/ml]"                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-62.5306,130}, rotation=0), visible=true));
      Parts.VaryingPressure varyingPressure annotation(Placement(transformation(extent={{-30,-76},{40,0}})));
      Parts.Constant VRVU(k=5)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-58.5306,72}, rotation=0), visible=true));
      Modelica.Blocks.Math.Add add(k2=-1) annotation(Placement(transformation(extent={{-34,30},{-20,44}})));
      Parts.Constant Et0(k=0)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-68.5306,-16}, rotation=0), visible=true));
      Modelica.Blocks.Sources.Ramp Volume(height=150, duration=150, offset=0) annotation(Placement(transformation(extent={{-96,-14},{-76,6}})));
      Modelica.Blocks.Math.Product product1 annotation(Placement(transformation(extent={{152,-18},{172,2}})));
    equation
      connect(RVEes.y,heartElastanceBurkhoff.Ees) annotation(Line(points={{-76.1306,82.08},{-3.0653,82.08},{-3.0653,78.9284},{55.9201,78.9284}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVAlpha.y,heartElastanceBurkhoff.Alpha) annotation(Line(points={{-74.1306,66.08},{-3.0653,66.08},{-3.0653,65.7284},{55.9201,65.7284}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVBeta.y,heartElastanceBurkhoff.Beta) annotation(Line(points={{-78.1306,50.08},{-4.0653,50.08},{-4.0653,51.2084},{55.9201,51.2084}}, color={0,0,127}, smooth=Smooth.None));
      connect(VRVU.y,varyingPressure.Vu) annotation(Line(points={{-72.1306,24.08},{-24.75,24.08},{-24.75,6.29432}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVAlpha.y,varyingPressure.Alpha) annotation(Line(points={{-74.1306,66.08},{6.26584,66.08},{6.26584,6.30528}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVBeta.y,varyingPressure.Beta) annotation(Line(points={{-78.1306,50.08},{20.3394,50.08},{20.3394,6.3426}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVEes.y,varyingPressure.Ees) annotation(Line(points={{-76.1306,82.08},{-11.2342,82.08},{-11.2342,6.30528}}, color={0,0,127}, smooth=Smooth.None));
      connect(VRVU.y,add.u2) annotation(Line(points={{-72.1306,24.08},{-48,24.08},{-48,32.8},{-35.4,32.8}}, color={0,0,127}, smooth=Smooth.None));
      connect(add.y,heartElastanceBurkhoff.Vs) annotation(Line(points={{-19.3,37},{17.35,37},{17.35,37.3484},{55.9201,37.3484}}, color={0,0,127}, smooth=Smooth.None));
      connect(Et0.y,varyingPressure.Et0) annotation(Line(points={{-82.1306,-63.92},{-66,-63.92},{-66,-57},{-37,-57}}, color={0,0,127}, smooth=Smooth.None));
      connect(Et0.y,heartElastanceBurkhoff.Et0) annotation(Line(points={{-82.1306,-63.92},{-60,-63.92},{-60,24.8084},{55.9201,24.8084}}, color={0,0,127}, smooth=Smooth.None));
      connect(Volume.y,varyingPressure.V) annotation(Line(points={{-75,-4},{-64,-4},{-64,-35.6483},{-37,-35.6483}}, color={0,0,127}, smooth=Smooth.None));
      connect(Volume.y,add.u1) annotation(Line(points={{-75,-4},{-70,-4},{-70,41.2},{-35.4,41.2}}, color={0,0,127}, smooth=Smooth.None));
      connect(product1.u1,heartElastanceBurkhoff.Et) annotation(Line(points={{150,-2},{144,-2},{144,57.6},{133.5,57.6}}, color={0,0,127}, smooth=Smooth.None));
      connect(product1.u2,heartElastanceBurkhoff.Vs) annotation(Line(points={{150,-14},{46,-14},{46,37.3484},{55.9201,37.3484}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end TestElasticCurveCompare;

    model pressureFromStressedVolume
      Modelica.Blocks.Interfaces.RealInput Elastance annotation(Placement(transformation(extent={{-134,4},{-94,44}}), iconTransformation(extent={{-134,4},{-94,44}})));
      Modelica.Blocks.Interfaces.RealOutput Pressure annotation(Placement(transformation(extent={{100,-12},{120,8}}), iconTransformation(extent={{100,-12},{120,8}})));
      Modelica.Blocks.Interfaces.RealInput StressedVolume annotation(Placement(transformation(extent={{-136,-58},{-96,-18}}), iconTransformation(extent={{-136,-58},{-96,-18}})));
    equation
      if StressedVolume > 0 then
        Pressure=Elastance*StressedVolume;
      else
        Pressure=0;
      end if;
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255}),Text(extent={{-86,42},{8,8}}, lineColor={0,0,255}, textString=
                                                                                                    "Elastance"),Text(extent={{-88,4},{74,-80}}, lineColor={0,0,255}, textString=
                                                                                                    "StressedVolume"),Text(extent={{-2,16},{92,-18}}, lineColor={0,0,255}, textString=
                                                                                                    "Pressure")}));
    end pressureFromStressedVolume;

    model TestElasticCurve
      Parts.Constant RVAlpha(k=0.04)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [1/mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-60.5306,114}, rotation=0), visible=true));
      Parts.Constant RVBeta(k=0.34)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-64.5306,98}, rotation=0), visible=true));
      Parts.Constant RVEes(k=0.83)
        "Right Ventricle: End-Systolic Elastance [mmHg/ml]"                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-62.5306,130}, rotation=0), visible=true));
      Parts.VaryingPressure varyingPressure annotation(Placement(transformation(extent={{8,-70},{78,6}})));
      Parts.Constant VRVU(k=5)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-58.5306,72}, rotation=0), visible=true));
      Parts.Constant Et0(k=0)
        "Right Ventricle: Index of RA Compliance in Ped=Beta*(exp(Alpha*Vs)-1) [mmHg] "
                                                                                                            annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={-68.5306,-16}, rotation=0), visible=true));
      Modelica.Blocks.Sources.Ramp Volume(height=150, duration=150, offset=0) annotation(Placement(transformation(extent={{-96,-14},{-76,6}})));
      Parts.Constant PTH(k=-4) "intrathoracic pressire " annotation(Placement(transformation(extent={{-22.0,-52.0},{-14.0,-44.0}}, origin={67.4694,130}, rotation=0), visible=true));
    equation
      connect(VRVU.y,varyingPressure.Vu) annotation(Line(points={{-72.1306,24.08},{13.25,24.08},{13.25,12.2943}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVAlpha.y,varyingPressure.Alpha) annotation(Line(points={{-74.1306,66.08},{44.2658,66.08},{44.2658,12.3053}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVBeta.y,varyingPressure.Beta) annotation(Line(points={{-78.1306,50.08},{58.3394,50.08},{58.3394,12.3426}}, color={0,0,127}, smooth=Smooth.None));
      connect(RVEes.y,varyingPressure.Ees) annotation(Line(points={{-76.1306,82.08},{26.7658,82.08},{26.7658,12.3053}}, color={0,0,127}, smooth=Smooth.None));
      connect(Et0.y,varyingPressure.Et0) annotation(Line(points={{-82.1306,-63.92},{-66,-63.92},{-66,-51},{1,-51}}, color={0,0,127}, smooth=Smooth.None));
      connect(Volume.y,varyingPressure.V) annotation(Line(points={{-75,-4},{-64,-4},{-64,-29.6483},{1,-29.6483}}, color={0,0,127}, smooth=Smooth.None));
      connect(PTH.y,varyingPressure.PTH) annotation(Line(points={{53.8694,82.08},{72.3394,82.08},{72.3394,12.3426}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end TestElasticCurve;

    model TestBusConnector
      Parts.LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector annotation(Placement(transformation(extent={{-12,-34},{58,36}})));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end TestBusConnector;

    model testStarling0
      Parts.StarlingLeftHeart starlingLeftHeart annotation(Placement(transformation(extent={{-46,22},{-26,42}})));
      Parts.Constant DesiredOutflowPressure(k=14) annotation(Placement(transformation(extent={{-86,8},{-78,16}})));
      Parts.Constant Preload1(k=1) annotation(Placement(transformation(extent={{-62,54},{-56,60}})));
      Parts.modelInputsBlock modelInputsBlock1 annotation(Placement(transformation(extent={{-108,76},{-88,96}})));
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector annotation(Placement(transformation(extent={{-24,74},{-4,94}})));
      Parts.StarlingLeftHeart starlingLeftHeart1 annotation(Placement(transformation(extent={{-4,22},{16,42}})));
      Parts.Constant Preload2(k=2) annotation(Placement(transformation(extent={{-14,52},{-8,58}})));
      Parts.StarlingLeftHeart starlingLeftHeart2 annotation(Placement(transformation(extent={{36,20},{56,40}})));
      Parts.StarlingLeftHeart starlingLeftHeart3 annotation(Placement(transformation(extent={{78,20},{98,40}})));
      Parts.Constant Preload3(k=3) annotation(Placement(transformation(extent={{30,48},{36,54}})));
      Parts.Constant Preload4(k=4) annotation(Placement(transformation(extent={{66,46},{72,52}})));
      Parts.StarlingLeftHeart starlingLeftHeart4 annotation(Placement(transformation(extent={{112,22},{132,42}})));
      Parts.Constant Preload5(k=5) annotation(Placement(transformation(extent={{100,48},{106,54}})));
      Parts.StarlingLeftHeart starlingLeftHeart5 annotation(Placement(transformation(extent={{-36,-64},{-16,-44}})));
      Parts.Constant Preload6(k=6) annotation(Placement(transformation(extent={{-52,-32},{-46,-26}})));
      Parts.StarlingLeftHeart starlingLeftHeart6 annotation(Placement(transformation(extent={{6,-64},{26,-44}})));
      Parts.Constant Preload7(k=8) annotation(Placement(transformation(extent={{-4,-34},{2,-28}})));
      Parts.StarlingLeftHeart starlingLeftHeart7 annotation(Placement(transformation(extent={{46,-66},{66,-46}})));
      Parts.StarlingLeftHeart starlingLeftHeart8 annotation(Placement(transformation(extent={{88,-66},{108,-46}})));
      Parts.Constant Preload8(k=10) annotation(Placement(transformation(extent={{40,-38},{46,-32}})));
      Parts.Constant Preload9(k=12) annotation(Placement(transformation(extent={{76,-40},{82,-34}})));
      Parts.StarlingLeftHeart starlingLeftHeart9 annotation(Placement(transformation(extent={{122,-64},{142,-44}})));
      Parts.Constant Preload10(k=14) annotation(Placement(transformation(extent={{110,-38},{116,-32}})));
    equation
      connect(DesiredOutflowPressure.y,starlingLeftHeart.Afterload) annotation(Line(points={{-77.6,12.08},{-38.2657,12.08},{-38.2657,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload1.y,starlingLeftHeart.Preload) annotation(Line(points={{-55.7,57.06},{-38.8657,57.06},{-38.8657,41.5632}}, color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart.busConnector) annotation(Line(points={{-90.2,86},{-68,86},{-68,41},{-46,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(heartElasticitiesBurkhoffWithBusConnector.controlBus,starlingLeftHeart.busConnector) annotation(Line(points={{-13.4,87},{-13.4,92},{-68,92},{-68,41},{-46,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingLeftHeart1.Afterload) annotation(Line(points={{-77.6,12.08},{3.7343,12.08},{3.7343,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload2.y,starlingLeftHeart1.Preload) annotation(Line(points={{-7.7,55.06},{3.1343,55.06},{3.1343,41.5632}}, color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{-90.2,86},{-24,86},{-24,41},{-4,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(Preload3.y,starlingLeftHeart2.Preload) annotation(Line(points={{36.3,51.06},{43.1343,51.06},{43.1343,39.5632}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload4.y,starlingLeftHeart3.Preload) annotation(Line(points={{72.3,49.06},{85.1343,49.06},{85.1343,39.5632}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart2.busConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{36,39},{20,39},{20,70},{-24,70},{-24,41},{-4,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart3.busConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{78,39},{72,39},{72,38},{58,38},{58,70},{-24,70},{-24,41},{-4,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart2.Afterload,starlingLeftHeart1.Afterload) annotation(Line(points={{43.7343,20.1632},{43.7343,12},{3.7343,12},{3.7343,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart3.Afterload,starlingLeftHeart1.Afterload) annotation(Line(points={{85.7343,20.1632},{85.7343,12},{3.7343,12},{3.7343,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload5.y,starlingLeftHeart4.Preload) annotation(Line(points={{106.3,51.06},{119.134,51.06},{119.134,41.5632}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart4.Afterload,starlingLeftHeart1.Afterload) annotation(Line(points={{119.734,22.1632},{119.734,12},{3.7343,12},{3.7343,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart4.busConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{112,41},{106,41},{106,42},{88,42},{88,72},{58,72},{58,70},{-24,70},{-24,41},{-4,41}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(Preload6.y,starlingLeftHeart5.Preload) annotation(Line(points={{-45.7,-28.94},{-28.8657,-28.94},{-28.8657,-44.4368}}, color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{-90.2,86},{-58,86},{-58,-45},{-36,-45}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(Preload7.y,starlingLeftHeart6.Preload) annotation(Line(points={{2.3,-30.94},{13.1343,-30.94},{13.1343,-44.4368}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload8.y,starlingLeftHeart7.Preload) annotation(Line(points={{46.3,-34.94},{53.1343,-34.94},{53.1343,-46.4368}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload9.y,starlingLeftHeart8.Preload) annotation(Line(points={{82.3,-36.94},{95.1343,-36.94},{95.1343,-46.4368}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart7.Afterload,starlingLeftHeart6.Afterload) annotation(Line(points={{53.7343,-65.8368},{53.7343,-74},{13.7343,-74},{13.7343,-63.8368}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart8.Afterload,starlingLeftHeart6.Afterload) annotation(Line(points={{95.7343,-65.8368},{95.7343,-74},{13.7343,-74},{13.7343,-63.8368}}, color={0,0,127}, smooth=Smooth.None));
      connect(Preload10.y,starlingLeftHeart9.Preload) annotation(Line(points={{116.3,-34.94},{129.134,-34.94},{129.134,-44.4368}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart9.Afterload,starlingLeftHeart6.Afterload) annotation(Line(points={{129.734,-63.8368},{129.734,-74},{13.7343,-74},{13.7343,-63.8368}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart6.busConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{6,-45},{0,-45},{0,-44},{-8,-44},{-8,-8},{-58,-8},{-58,-45},{-36,-45}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart7.busConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{46,-47},{44,-47},{44,-48},{34,-48},{34,-8},{-58,-8},{-58,-45},{-36,-45}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart8.busConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{88,-47},{86,-47},{86,-46},{74,-46},{74,-8},{-58,-8},{-58,-45},{-36,-45}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart9.busConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{122,-45},{112,-45},{112,-38},{102,-38},{102,-8},{-58,-8},{-58,-40},{-58,-40},{-58,-45},{-36,-45}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(starlingLeftHeart6.Afterload,starlingLeftHeart5.Afterload) annotation(Line(points={{13.7343,-63.8368},{13.7343,-74},{-28.2657,-74},{-28.2657,-63.8368}}, color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart5.Afterload,starlingLeftHeart.Afterload) annotation(Line(points={{-28.2657,-63.8368},{-28.2657,-76},{-68,-76},{-68,12},{-38.2657,12.08},{-38.2657,22.1632}}, color={0,0,127}, smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end testStarling0;

  end Test;

  package Models
    model HaedynamicsBurkhoffModel
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector
                                                                                          annotation(Placement(transformation(extent={{-46,48},
                {-12,80}})));
      Parts.RightHeartBurkhoffWithBusConnector rightHeartBurkhoffWithBusConnector
                                                                            annotation(Placement(transformation(extent={{-100,-6},
                {-62,46}})));
      Parts.LeftHeartBurkhofWithBusConnector leftHeartBurkhofWithBusConnector
                                                                        annotation(Placement(transformation(extent={{64,-7},
                {102,45}})));
      Parts.modelInputsBlock modelInputsBlock1(PTH(k=0))
                                         annotation(Placement(transformation(extent={{-108,60},
                {-54,110}})));
      Parts.PulmonaryCirculationBurkhoffWithBusConnector pulmonaryCirculationBurkhoffWithBusConnector(
          PulmonaryArteryProximal(V0=12))
        annotation (Placement(transformation(extent={{-24,-10},{30,50}})));
      Parts.SystemicCirculationBurkhoffWithBusConnector systemicCirculationBurkhoffWithBusConnector(
        AortaProximal(V0=8),
        SystemicArteries(V0=124),
        SystemicVeins(V0=392))
        annotation (Placement(transformation(extent={{-26,-108},{28,-54}})));
      Parts.PressureFlowMeasurementWithBusConnector MeasurementPulmonaryArtery
        annotation (Placement(transformation(extent={{-56,10},{-36,30}})));
      Parts.PressureFlowMeasurementWithBusConnector MeasurementPulmonaryVeins
        annotation (Placement(transformation(extent={{38,10},{58,30}})));
      Parts.PressureFlowMeasurementWithBusConnector MeasurementAorta
        annotation (Placement(transformation(extent={{72,-79},{52,-53}})));
      Parts.PressureFlowMeasurementWithBusConnector MeasurementCentralVeins
        annotation (Placement(transformation(extent={{-54,-79},{-74,-53}})));
      Parts.BloodVolumeWithBusConnector bloodVolumeWithBusConnector
        annotation (Placement(transformation(extent={{-30,-46},{22,-2}})));
    equation
      connect(systemicCirculationBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementCentralVeins.Inflow)                  annotation (Line(
          points={{-29.24,-79.92},{-41.62,-79.92},{-41.62,-66},{-55,-66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementCentralVeins.Outflow,
        rightHeartBurkhoffWithBusConnector.bloodFlowInflow) annotation (Line(
          points={{-73,-66},{-114,-66},{-114,20.52},{-100.38,20.52}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(rightHeartBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementPulmonaryArtery.Inflow)              annotation (Line(
          points={{-61.62,20.52},{-57.81,20.52},{-57.81,20},{-55,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementPulmonaryArtery.Outflow,
        pulmonaryCirculationBurkhoffWithBusConnector.bloodFlowInflow)
        annotation (Line(
          points={{-37,20},{-26.7,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(pulmonaryCirculationBurkhoffWithBusConnector.bloodFlowOutflow,
        MeasurementPulmonaryVeins.Inflow)                annotation (Line(
          points={{31.62,20},{39,20}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementPulmonaryVeins.Outflow,
        leftHeartBurkhofWithBusConnector.bloodFlowInflow) annotation (Line(
          points={{57,20},{60,20},{60,19.52},{63.62,19.52}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(leftHeartBurkhofWithBusConnector.bloodFlowOutflow,
        MeasurementAorta.Inflow)                         annotation (Line(
          points={{102.38,19.52},{106,19.52},{106,-66},{71,-66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(MeasurementAorta.Outflow,
        systemicCirculationBurkhoffWithBusConnector.bloodFlowInflow)
        annotation (Line(
          points={{53,-66},{42,-66},{42,-81},{32.32,-81}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(modelInputsBlock1.inputBusConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-59.94,85},{-28.83,85},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,
        leftHeartBurkhofWithBusConnector.controlBus) annotation (Line(
          points={{-59.94,85},{66.66,85},{66.66,30.96}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.controlBus,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-98.1,31.44},{-98.1,48},{-52,48},{-52,80},{-28.83,80},{
              -28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(pulmonaryCirculationBurkhoffWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-16.98,31.4},{-16.98,48},{-52,48},{-52,80},{-28.83,80},{
              -28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementPulmonaryVeins.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,25},{40,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementPulmonaryArtery.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-54,25},{-54,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(MeasurementCentralVeins.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-56,-59.5},{-56,-48},{-120,-48},{-120,48},{-52,48},{-52,80},
              {-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(systemicCirculationBurkhoffWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-20.6,-71.28},{-20.6,-60},{-20,-60},{-20,-48},{-120,-48},{
              -120,48},{-52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(MeasurementAorta.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{70,-59.5},{70,-48},{-120,-48},{-120,48},{-52,48},{-52,80},{
              -28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(bloodVolumeWithBusConnector.stressedVolumeInflow,
        MeasurementCentralVeins.Inflow) annotation (Line(
          points={{-30,-33.68},{-36,-33.68},{-36,-34},{-42,-34},{-42,-66},{-55,
              -66}},
          color={255,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(bloodVolumeWithBusConnector.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-26.88,-12.56},{-56,-12.56},{-56,-48},{-120,-48},{-120,48},{
              -52,48},{-52,80},{-28.83,80},{-28.83,72}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(rightHeartBurkhoffWithBusConnector.Volume,
        bloodVolumeWithBusConnector.RightHeartVolume) annotation (Line(
          points={{-88.22,-5.48},{-88.22,-10},{-52,-10},{-52,0},{-18.7308,0},{
              -18.7308,-6.04096}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(leftHeartBurkhofWithBusConnector.Volume,
        bloodVolumeWithBusConnector.LeftHeartVolume) annotation (Line(
          points={{75.78,-6.48},{75.78,-12},{44,-12},{44,0},{-4.69082,0},{
              -4.69082,-6.48096}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                -100},{120,120}}),                                                                    graphics), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                -100},{120,120}},                                                                                                    initialScale=0.1, grid={10,10}), graphics={Bitmap(visible=true, origin={-10,15}, extent={{-100.0,-85.0},{100.0,85.0}}, fileName="modelica://HeamodynamicsDymola/ICON/krevniReciste.png"),Text(              origin={0,
                  -85},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{-100.0,-15.0},{100.0,15.0}},                                         fontName=
                  "Arial",
              lineColor={0,0,0},
              textString="Heamodynamics - version 3")}));
    end HaedynamicsBurkhoffModel;

    model RightHeartTest
      Parts.modelInputsBlock modelInputsBlock1
        annotation (Placement(transformation(extent={{-232,42},{-212,62}})));
      Parts.StarlingRightHeart starlingRightHeart
        annotation (Placement(transformation(extent={{-38,30},{-18,50}})));
      Parts.modelInputsBlock modelInputsBlock2
        annotation (Placement(transformation(extent={{-82,44},{-62,64}})));
      Parts.Constant Preload1(k=5)
                             annotation(Placement(transformation(extent={{-64,72},
                {-58,78}})));
      Parts.Constant DesiredOutflowPressure(k=14)
                                            annotation(Placement(transformation(extent={{-52,12},
                {-44,20}})));
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector
                                                                                          annotation(Placement(transformation(extent={{-6,60},
                {14,80}})));
    equation
      connect(modelInputsBlock2.inputBusConnector, starlingRightHeart.busConnector)
        annotation (Line(
          points={{-64.2,54},{-51.1,54},{-51.1,49},{-38,49}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(DesiredOutflowPressure.y, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-43.6,16.08},{-30.2657,16.08},{-30.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload1.y, starlingRightHeart.Preload) annotation (Line(
          points={{-57.7,75.06},{-30.8657,75.06},{-30.8657,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(heartElasticitiesBurkhoffWithBusConnector.controlBus,
        starlingRightHeart.busConnector) annotation (Line(
          points={{4.1,75},{4.1,88},{-66,88},{-66,62},{-52,62},{-52,54},{-51.1,
              54},{-51.1,49},{-38,49}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-90,0},
                {20,100}},
            grid={1,1}),                                                                           graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-58,42},{60,-2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Right Heart")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-90,0},
                {20,100}},
            grid={1,1}),                                                                                                    graphics));
    end RightHeartTest;

    model LeftHeartTest
      Parts.modelInputsBlock modelInputsBlock1
                                         annotation(Placement(transformation(extent={{-120,66},{-100,86}})));
      Parts.Constant DesiredOutflowPressure(k=85)
                                            annotation(Placement(transformation(extent={{-120,24},{-112,32}})));
      Parts.StarlingLeftHeart starlingLeftHeart0
                                           annotation(Placement(transformation(extent={{-80,22},{-50,60}})));
      Parts.Constant Preload1(k=36)
                             annotation(Placement(transformation(extent={{-78,62},{-72,68}})));
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector
                                                                                          annotation(Placement(transformation(extent={{-80,82},{-60,102}})));
    equation
      connect(Preload1.y,starlingLeftHeart0.Preload) annotation(Line(points={{-71.7,
              65.06},{-69.2986,65.06},{-69.2986,59.1701}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingLeftHeart0.Afterload) annotation(Line(points={{-111.6,
              28.08},{-92,28.08},{-92,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart0.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,58.1},{-80,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-102.2,
              76},{-88,76},{-88,98},{-69.9,98},{-69.9,97}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,0},
                {-20,120}}),                                                                       graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-80,64},{66,2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Left Heart Test")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-140,0},
                {-20,120}}),                                                                                                    graphics));
    end LeftHeartTest;

    model StarlingLeftHeartTest
      Parts.modelInputsBlock modelInputsBlock1
                                         annotation(Placement(transformation(extent={{-120,66},{-100,86}})));
      Parts.Constant DesiredOutflowPressure(k=85)
                                            annotation(Placement(transformation(extent={{-120,24},{-112,32}})));
      Parts.StarlingLeftHeart starlingLeftHeart0
                                           annotation(Placement(transformation(extent={{-80,22},{-50,60}})));
      Parts.StarlingLeftHeart starlingLeftHeart1
                                           annotation(Placement(transformation(extent={{-36,22},{-6,60}})));
      Parts.StarlingLeftHeart starlingLeftHeart2
                                           annotation(Placement(transformation(extent={{8,22},{38,60}})));
      Parts.StarlingLeftHeart starlingLeftHeart3
                                           annotation(Placement(transformation(extent={{54,22},{84,60}})));
      Parts.StarlingLeftHeart starlingLeftHeart4
                                           annotation(Placement(transformation(extent={{-80,-38},{-50,0}})));
      Parts.StarlingLeftHeart starlingLeftHeart5
                                           annotation(Placement(transformation(extent={{-36,-38},{-6,0}})));
      Parts.StarlingLeftHeart starlingLeftHeart6
                                           annotation(Placement(transformation(extent={{8,-38},{38,0}})));
      Parts.StarlingLeftHeart starlingLeftHeart7
                                           annotation(Placement(transformation(extent={{54,-38},{84,0}})));
      Parts.StarlingLeftHeart starlingLeftHeart8
                                           annotation(Placement(transformation(extent={{-80,-98},{-50,-60}})));
      Parts.StarlingLeftHeart starlingLeftHeart9
                                           annotation(Placement(transformation(extent={{-36,-98},{-6,-60}})));
      Parts.StarlingLeftHeart starlingLeftHeart10
                                            annotation(Placement(transformation(extent={{10,-98},{40,-60}})));
      Parts.StarlingLeftHeart starlingLeftHeart11
                                            annotation(Placement(transformation(extent={{56,-98},{86,-60}})));
      Parts.Constant Preload(k=2)
                            annotation(Placement(transformation(extent={{-34,62},{-28,68}})));
      Parts.Constant Preload1(k=1)
                             annotation(Placement(transformation(extent={{-78,62},{-72,68}})));
      Parts.Constant Preload2(k=3)
                             annotation(Placement(transformation(extent={{8,62},{14,68}})));
      Parts.Constant Preload3(k=4)
                             annotation(Placement(transformation(extent={{50,62},{56,68}})));
      Parts.Constant Preload4(k=5)
                             annotation(Placement(transformation(extent={{-84,4},{-78,10}})));
      Parts.Constant Preload5(k=6)
                             annotation(Placement(transformation(extent={{-36,4},{-30,10}})));
      Parts.Constant Preload6(k=7)
                             annotation(Placement(transformation(extent={{6,2},{12,8}})));
      Parts.Constant Preload7(k=8)
                             annotation(Placement(transformation(extent={{54,2},{60,8}})));
      Parts.Constant Preload8(k=9)
                             annotation(Placement(transformation(extent={{-82,-54},{-76,-48}})));
      Parts.Constant Preload9(k=10)
                              annotation(Placement(transformation(extent={{-38,-56},{-32,-50}})));
      Parts.Constant Preload10(k=11)
                               annotation(Placement(transformation(extent={{8,-56},{14,-50}})));
      Parts.Constant Preload11(k=12)
                               annotation(Placement(transformation(extent={{54,-56},{60,-50}})));
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector
                                                                                          annotation(Placement(transformation(extent={{-80,82},{-60,102}})));
    equation
      connect(Preload1.y,starlingLeftHeart0.Preload) annotation(Line(points={{-71.7,
              65.06},{-69.2986,65.06},{-69.2986,59.1701}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload.y,starlingLeftHeart1.Preload) annotation(Line(points={{-27.7,
              65.06},{-25.2985,65.06},{-25.2985,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload2.y,starlingLeftHeart2.Preload) annotation(Line(points={{14.3,
              65.06},{18.7015,65.06},{18.7015,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload3.y,starlingLeftHeart3.Preload) annotation(Line(points={{56.3,
              65.06},{64.7014,65.06},{64.7014,59.1701}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload4.y,starlingLeftHeart4.Preload) annotation(Line(points={{-77.7,
              7.06},{-69.2986,7.06},{-69.2986,-0.82992}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload5.y,starlingLeftHeart5.Preload) annotation(Line(points={{-29.7,
              7.06},{-25.2985,7.06},{-25.2985,-0.82992}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload6.y,starlingLeftHeart6.Preload) annotation(Line(points={{12.3,
              5.06},{18.7015,5.06},{18.7015,-0.82992}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload7.y,starlingLeftHeart7.Preload) annotation(Line(points={{60.3,
              5.06},{64.7014,5.06},{64.7014,-0.82992}},                                                                      color={0,0,127}, smooth=Smooth.None));
      connect(Preload8.y,starlingLeftHeart8.Preload) annotation(Line(points={{-75.7,
              -50.94},{-69.2986,-50.94},{-69.2986,-60.8299}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload9.y,starlingLeftHeart9.Preload) annotation(Line(points={{-31.7,
              -52.94},{-25.2985,-52.94},{-25.2985,-60.8299}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(Preload10.y,starlingLeftHeart10.Preload) annotation(Line(points={{14.3,
              -52.94},{20.7015,-52.94},{20.7015,-60.8299}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(Preload11.y,starlingLeftHeart11.Preload) annotation(Line(points={{60.3,
              -52.94},{66.7014,-52.94},{66.7014,-60.8299}},                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingLeftHeart0.Afterload) annotation(Line(points={{-111.6,
              28.08},{-92,28.08},{-92,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                        color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart1.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,22.3101},{-24.3986,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                     color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart2.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{19.6015,
              22.3101},{19.6015,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart3.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{65.6015,
              22.3101},{65.6015,14},{-68.3986,14},{-68.3986,22.3101}},                                                                                             color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart4.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -68.3986,-37.6899},{-68.3986,-44},{-92,-44},{-92,14},{-68.3986,14},
              {-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart5.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,-37.6899},{-24.3986,-44},{-92,-44},{-92,14},{-68.3986,14},
              {-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart6.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{19.6015,
              -37.6899},{19.6015,-44},{-92,-44},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart7.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{65.6015,
              -37.6899},{65.6015,-44},{-92,-44},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart8.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -68.3986,-97.6899},{-68.3986,-102},{-92,-102},{-92,14},{-68.3986,
              14},{-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart9.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{
              -24.3986,-97.6899},{-24.3986,-102},{-92,-102},{-92,14},{-68.3986,
              14},{-68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart10.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{21.6015,
              -97.6899},{21.6015,-102},{-92,-102},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(starlingLeftHeart11.Afterload,starlingLeftHeart0.Afterload) annotation(Line(points={{67.6015,
              -97.6899},{67.6015,-102},{-92,-102},{-92,14},{-68.3986,14},{
              -68.3986,22.3101}},                                                                                                    color={0,0,127}, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart0.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,58.1},{-80,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart1.busConnector) annotation(Line(points={{-102.2,76},{-42,76},{-42,58.1},{-36,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart2.busConnector) annotation(Line(points={{-102.2,76},{0,76},{0,58.1},{8,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart3.busConnector) annotation(Line(points={{-102.2,76},{46,76},{46,58.1},{54,58.1}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart4.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-1.9},{-80,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart5.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{-42,12},{-42,-1.9},{-36,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart6.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{2,12},{2,-1.9},{8,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart7.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,12},{48,12},{48,-1.9},{54,-1.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart8.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-61.9},{-80,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart9.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{-44,-46},{-44,-61.9},{-36,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart10.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{0,-46},{0,-61.9},{10,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,starlingLeftHeart11.busConnector) annotation(Line(points={{-102.2,76},{-88,76},{-88,-46},{48,-46},{48,-61.9},{56,-61.9}}, color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation(Line(points={{-102.2,
              76},{-88,76},{-88,98},{-69.9,98},{-69.9,97}},                                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None));
      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{100,100}}),                                                                 graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-80,64},{66,2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Starling Left Heart Test")}),                                                                                              Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{100,100}}),                                                                                                    graphics));
    end StarlingLeftHeartTest;

    model StarlingRightHeartTest
      Parts.Constant DesiredOutflowPressure(k=14)
                                            annotation(Placement(transformation(extent={{-118,16},{-110,24}})));
      Parts.Constant Preload1(k=0)
                             annotation(Placement(transformation(extent={{-74,62},
                {-68,68}})));
      Parts.HeartElasticitiesBurkhoffWithBusConnector heartElasticitiesBurkhoffWithBusConnector
                                                                                          annotation(Placement(transformation(extent={{-90,74},
                {-70,94}})));
      Parts.StarlingRightHeart starlingRightHeart
                                            annotation(Placement(transformation(extent={{-68,30},{-48,50}})));
      Parts.StarlingRightHeart starlingRightHeart1
                                            annotation(Placement(transformation(extent={{-34,30},
                {-14,50}})));
      Parts.Constant Preload2(k=2)
                             annotation(Placement(transformation(extent={{-48,62},
                {-42,68}})));
      Parts.modelInputsBlock modelInputsBlock1
        annotation (Placement(transformation(extent={{-136,54},{-116,74}})));
      Parts.StarlingRightHeart starlingRightHeart2
                                            annotation(Placement(transformation(extent={{0,30},{
                20,50}})));
      Parts.StarlingRightHeart starlingRightHeart3
                                            annotation(Placement(transformation(extent={{40,30},
                {60,50}})));
      Parts.StarlingRightHeart starlingRightHeart4
                                            annotation(Placement(transformation(extent={{78,30},
                {98,50}})));
      Parts.StarlingRightHeart starlingRightHeart5
                                            annotation(Placement(transformation(extent={{-68,-28},
                {-48,-8}})));
      Parts.StarlingRightHeart starlingRightHeart6
                                            annotation(Placement(transformation(extent={{-34,-28},
                {-14,-8}})));
      Parts.StarlingRightHeart starlingRightHeart7
                                            annotation(Placement(transformation(extent={{0,-28},
                {20,-8}})));
      Parts.StarlingRightHeart starlingRightHeart8
                                            annotation(Placement(transformation(extent={{40,-28},
                {60,-8}})));
      Parts.StarlingRightHeart starlingRightHeart9
                                            annotation(Placement(transformation(extent={{80,-28},
                {100,-8}})));
      Parts.Constant Preload3(k=4)
                             annotation(Placement(transformation(extent={{-12,62},
                {-6,68}})));
      Parts.Constant Preload4(k=6)
                             annotation(Placement(transformation(extent={{22,62},
                {28,68}})));
      Parts.Constant Preload5(k=8)
                             annotation(Placement(transformation(extent={{60,62},
                {66,68}})));
      Parts.Constant Preload6(k=10)
                             annotation(Placement(transformation(extent={{-72,2},
                {-66,8}})));
      Parts.Constant Preload7(k=14)
                             annotation(Placement(transformation(extent={{-40,2},
                {-34,8}})));
      Parts.Constant Preload8(k=17)
                             annotation(Placement(transformation(extent={{-6,2},{
                0,8}})));
      Parts.Constant Preload9(k=20)
                             annotation(Placement(transformation(extent={{28,2},{
                34,8}})));
      Parts.Constant Preload10(k=23)
                             annotation(Placement(transformation(extent={{66,2},{
                72,8}})));
    equation
      connect(Preload1.y,starlingRightHeart.Preload) annotation(Line(points={{-67.7,
              65.06},{-60.8657,65.06},{-60.8657,49.5632}},                                                                       color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y,starlingRightHeart.Afterload) annotation(Line(points={{-109.6,20.08},{-60.2657,20.08},{-60.2657,30.1632}}, color={0,0,127}, smooth=Smooth.None));
      connect(DesiredOutflowPressure.y, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{-109.6,20.08},{-26.2657,20.08},{-26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart1.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-34,49},{-34,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,
              89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(Preload2.y, starlingRightHeart1.Preload) annotation (Line(
          points={{-41.7,65.06},{-26.8657,65.06},{-26.8657,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(modelInputsBlock1.inputBusConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-118.2,64},{-94,64},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(Preload6.y, starlingRightHeart5.Preload) annotation (Line(
          points={{-65.7,5.06},{-60.8657,5.06},{-60.8657,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload7.y, starlingRightHeart6.Preload) annotation (Line(
          points={{-33.7,5.06},{-26.8657,5.06},{-26.8657,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload8.y, starlingRightHeart7.Preload) annotation (Line(
          points={{0.3,5.06},{7.1343,5.06},{7.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload9.y, starlingRightHeart8.Preload) annotation (Line(
          points={{34.3,5.06},{47.1343,5.06},{47.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload10.y, starlingRightHeart9.Preload) annotation (Line(
          points={{72.3,5.06},{87.1343,5.06},{87.1343,-8.4368}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart2.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{7.7343,30.1632},{7.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart3.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{47.7343,30.1632},{47.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart4.Afterload, starlingRightHeart1.Afterload)
        annotation (Line(
          points={{85.7343,30.1632},{85.7343,20},{-26,20},{-26.2657,20.08},{
              -26.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload3.y, starlingRightHeart2.Preload) annotation (Line(
          points={{-5.7,65.06},{7.1343,65.06},{7.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload4.y, starlingRightHeart3.Preload) annotation (Line(
          points={{28.3,65.06},{47.1343,65.06},{47.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Preload5.y, starlingRightHeart4.Preload) annotation (Line(
          points={{66.3,65.06},{85.1343,65.06},{85.1343,49.5632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart5.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-60.2657,-27.8368},{-60.2657,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart6.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{-26.2657,-27.8368},{-26.2657,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart7.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{7.7343,-27.8368},{7.7343,-42},{-96,-42},{-96,20},{-98,20},{
              -60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart8.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{47.7343,-27.8368},{47.7343,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart9.Afterload, starlingRightHeart.Afterload)
        annotation (Line(
          points={{87.7343,-27.8368},{87.7343,-42},{-96,-42},{-96,20},{-98,20},
              {-60.2657,20.08},{-60.2657,30.1632}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(starlingRightHeart5.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-68,-9},{-68,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-68,49},{-68,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,
              89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart2.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{0,49},{-2,49},{-2,58},{-94,58},{-94,96},{-80,96},{-80,89},{
              -79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart3.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,49},{40,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart4.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{78,49},{78,58},{-94,58},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart6.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{-34,-9},{-34,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart7.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{0,-9},{0,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(starlingRightHeart8.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{40,-9},{40,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      connect(starlingRightHeart9.busConnector,
        heartElasticitiesBurkhoffWithBusConnector.controlBus) annotation (Line(
          points={{80,-9},{80,0},{-94,0},{-94,96},{-80,96},{-80,89},{-79.9,89}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));

      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                -60},{120,100}}),                                                                  graphics={Rectangle(extent={{-100,100},{100,-100}}, lineColor=
                  {255,0,0},                                                                                                    fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid), Text(
              extent={{-84,82},{78,-22}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Starling Right Heart Test")}),                                                                                               Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                -60},{120,100}}),                                                                                                    graphics));
    end StarlingRightHeartTest;

    model RightHeartElastance
      Parts.ControlBus controlBus
                            annotation(Placement(transformation(extent={{-132,88},
                {-112,108}}),                                                                   iconTransformation(extent={{-96,78},
                {-76,98}})));
      Parts.HeartElastanceBurkhoff VentricularElastance
                                                  annotation(Placement(transformation(extent={{16,56},
                {66,96}})));
      Parts.HeartElastanceBurkhoff AtrialElastance
                                             annotation(Placement(transformation(extent={{-58,4},
                {-8,44}})));
      Modelica.Blocks.Interfaces.RealInput AtrialVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-110.699,
                15.3141},                                                                                                    extent={{-8.6991,
                -8.68598},{8.69893,8.68591}},                                                                                                    rotation=0), iconTransformation(origin={-98,18},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VentricularVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-70.699,
                77.3141},                                                                                                    extent={{-8.699,
                -8.6859},{8.699,8.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-16},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "Atrial Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-101.699,
                0.3141},                                                                                                    extent={{
                -9.69916,-9.68588},{9.69886,9.68589}},                                                                                                    rotation=0), iconTransformation(origin={-98,-44},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-74.699,
                61.3141},                                                                                                    extent={{
                -10.6989,-10.6859},{10.6989,10.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-74},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput AtrialPressure
        "Atrial Pressure [mmHg]"                           annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={81,-27}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,40})));
      Modelica.Blocks.Interfaces.RealOutput VentricularPressure
        "Ventricular pressure [mmHg]"                      annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={103,29}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,-6})));
      Parts.PressureFromElastance pressureFromElastance
        annotation (Placement(transformation(extent={{14,-42},{56,-8}})));
      Parts.PressureFromElastance pressureFromElastance1
        annotation (Placement(transformation(extent={{44,12},{86,46}})));
    equation
      connect(controlBus.RAEes,AtrialElastance.Ees) annotation(Line(points={{-122,98},
              {-96,98},{-96,42.2},{-60.25,42.2}},                                                                                 color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RAAlpha,AtrialElastance.Alpha) annotation(Line(points={{-122,98},
              {-96,98},{-96,37.8},{-60.25,37.8}},                                                                                     color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RABeta,AtrialElastance.Beta) annotation(Line(points={{-122,98},
              {-96,98},{-96,31.6},{-60.5,31.6}},                                                                                    color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVEes,VentricularElastance.Ees) annotation(Line(points={{-122,98},
              {-48,98},{-48,94.2},{13.75,94.2}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVAlpha,VentricularElastance.Alpha) annotation(Line(points={{-122,98},
              {-48,98},{-48,89.8},{13.75,89.8}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));
      connect(controlBus.RVBeta,VentricularElastance.Beta) annotation(Line(points={{-122,98},
              {-48,98},{-48,83.6},{13.5,83.6}},                                                                                                color={0,0,255}, thickness=0.5, smooth=Smooth.None), Text(string="%first", index=-1, extent={{-6,3},{-6,3}}));

      connect(AtrialElastance.Vs, AtrialVolume) annotation (Line(
          points={{-60.5,26},{-92,26},{-92,15.3141},{-110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VentricularElastance.Vs, VentricularVolume) annotation (Line(
          points={{13.5,78},{-26,78},{-26,77.3141},{-70.699,77.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VEt0, VentricularElastance.Et0) annotation (Line(
          points={{-74.699,61.3141},{-28,61.3141},{-28,68.4},{13.5,68.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AEt0, AtrialElastance.Et0) annotation (Line(
          points={{-101.699,0.314105},{-82,0.314105},{-82,16.4},{-60.5,16.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,-13.1},{12.74,-13.1}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(pressureFromElastance.Volume, AtrialVolume) annotation (Line(
          points={{13.16,-25.34},{-88,-25.34},{-88,16},{-92,16},{-92,15.3141},{
              -110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AtrialElastance.Et, pressureFromElastance.Elastance) annotation (
          Line(
          points={{-5.5,38},{-2,38},{-2,-30.1},{13.16,-30.1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance.Pressure, AtrialPressure) annotation (Line(
          points={{58.1,-26.02},{67.05,-26.02},{67.05,-27},{81,-27}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance1.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,40.9},{42.74,40.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(VentricularVolume, pressureFromElastance1.Volume) annotation (
          Line(
          points={{-70.699,77.3141},{4,77.3141},{4,28.66},{43.16,28.66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Elastance, VentricularElastance.Et)
        annotation (Line(
          points={{43.16,23.9},{22,23.9},{22,52},{78,52},{78,90},{68.5,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Pressure, VentricularPressure) annotation (
         Line(
          points={{88.1,27.98},{93.05,27.98},{93.05,29},{103,29}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-140,
                -60},{120,120}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-102}},
              lineColor={255,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -54,68},{80,96}},                                                                                                 fontName=
                  "Arial",
              textString="Right Heart Elastance"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,6},{-42,28}},                                                                                                 fontName=
                  "Arial",
              textString="AtrialVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -86,-42},{-28,8}},                                                                                                fontName=
                  "Arial",
              textString="VentricularVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -84,-80},{18,-10}},                                                                                               fontName=
                  "Arial",
              textString="AEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,-110},{20,-40}},                                                                                              fontName=
                  "Arial",
              textString="VEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  34,-22},{90,12}},                                                                                                 fontName=
                  "Arial",
              textString="VentricularPressure"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  44,30},{84,52}},                                                                                                  fontName=
                  "Arial",
              textString="AtrialPressure")},                                                                                         coordinateSystem(extent={{-140,
                -60},{120,120}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end RightHeartElastance;

    model LeftHeartElastance
      Parts.ControlBus controlBus
                            annotation(Placement(transformation(extent={{-132,88},
                {-112,108}}),                                                                   iconTransformation(extent={{-96,78},
                {-76,98}})));
      Parts.HeartElastanceBurkhoff VentricularElastance
                                                  annotation(Placement(transformation(extent={{16,56},
                {66,96}})));
      Parts.HeartElastanceBurkhoff AtrialElastance
                                             annotation(Placement(transformation(extent={{-58,4},
                {-8,44}})));
      Modelica.Blocks.Interfaces.RealInput AtrialVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-110.699,
                15.3141},                                                                                                    extent={{-8.6991,
                -8.68598},{8.69893,8.68591}},                                                                                                    rotation=0), iconTransformation(origin={-98,18},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VentricularVolume "Volume in ml"
                                                                      annotation(Placement(visible=true, transformation(origin={-70.699,
                77.3141},                                                                                                    extent={{-8.699,
                -8.6859},{8.699,8.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-16},
                                                                                                    extent={{
                -9.99998,-10},{10,9.99995}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput AEt0
        "Atrial Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-101.699,
                0.3141},                                                                                                    extent={{
                -9.69916,-9.68588},{9.69886,9.68589}},                                                                                                    rotation=0), iconTransformation(origin={-98,-44},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealInput VEt0
        "Ventricular Relative Elastance Value (Elastance/EndSystolic Elastance) - from 0 to 1"
                                                                                                            annotation(Placement(visible=true, transformation(origin={-74.699,
                61.3141},                                                                                                    extent={{
                -10.6989,-10.6859},{10.6989,10.6859}},                                                                                                    rotation=0), iconTransformation(origin={-98,-74},
                                                                                                    extent={{
                -9.99993,-10},{10.0002,10}},                                                                                                    rotation=0)));
      Modelica.Blocks.Interfaces.RealOutput AtrialPressure
        "Atrial Pressure [mmHg]"                           annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={81,-27}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,40})));
      Modelica.Blocks.Interfaces.RealOutput VentricularPressure
        "Ventricular pressure [mmHg]"                      annotation(Placement(transformation(extent={{-7,-7},
                {7,7}},                                                                                                    rotation=0, origin={103,29}), iconTransformation(extent={{-10,-10},{10,10}}, rotation=0,   origin={110,-6})));
      Parts.PressureFromElastance pressureFromElastance
        annotation (Placement(transformation(extent={{14,-42},{56,-8}})));
      Parts.PressureFromElastance pressureFromElastance1
        annotation (Placement(transformation(extent={{44,12},{86,46}})));
    equation

      connect(AtrialElastance.Vs, AtrialVolume) annotation (Line(
          points={{-60.5,26},{-92,26},{-92,15.3141},{-110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VentricularElastance.Vs, VentricularVolume) annotation (Line(
          points={{13.5,78},{-26,78},{-26,77.3141},{-70.699,77.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(VEt0, VentricularElastance.Et0) annotation (Line(
          points={{-74.699,61.3141},{-28,61.3141},{-28,68.4},{13.5,68.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AEt0, AtrialElastance.Et0) annotation (Line(
          points={{-101.699,0.314105},{-82,0.314105},{-82,16.4},{-60.5,16.4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,-13.1},{12.74,-13.1}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(pressureFromElastance.Volume, AtrialVolume) annotation (Line(
          points={{13.16,-25.34},{-88,-25.34},{-88,16},{-92,16},{-92,15.3141},{
              -110.699,15.3141}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AtrialElastance.Et, pressureFromElastance.Elastance) annotation (
          Line(
          points={{-5.5,38},{-2,38},{-2,-30.1},{13.16,-30.1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance.Pressure, AtrialPressure) annotation (Line(
          points={{58.1,-26.02},{67.05,-26.02},{67.05,-27},{81,-27}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.PTH, pressureFromElastance1.IntrapleuralPressure)
        annotation (Line(
          points={{-122,98},{-88,98},{-88,50},{2,50},{2,40.9},{42.74,40.9}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(VentricularVolume, pressureFromElastance1.Volume) annotation (
          Line(
          points={{-70.699,77.3141},{4,77.3141},{4,28.66},{43.16,28.66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Elastance, VentricularElastance.Et)
        annotation (Line(
          points={{43.16,23.9},{22,23.9},{22,52},{78,52},{78,90},{68.5,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pressureFromElastance1.Pressure, VentricularPressure) annotation (
         Line(
          points={{88.1,27.98},{93.05,27.98},{93.05,29},{103,29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(controlBus.LAEes, AtrialElastance.Ees) annotation (Line(
          points={{-122,98},{-92,98},{-92,42.2},{-60.25,42.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LAAlpha, AtrialElastance.Alpha) annotation (Line(
          points={{-122,98},{-94,98},{-94,37.8},{-60.25,37.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LABeta, AtrialElastance.Beta) annotation (Line(
          points={{-122,98},{-96,98},{-96,31.6},{-60.5,31.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVEes, VentricularElastance.Ees) annotation (Line(
          points={{-122,98},{-48,98},{-48,94.2},{13.75,94.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVAlpha, VentricularElastance.Alpha) annotation (Line(
          points={{-122,98},{-48,98},{-48,89.8},{13.75,89.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(controlBus.LVBeta, VentricularElastance.Beta) annotation (Line(
          points={{-122,98},{-48,98},{-48,83.6},{13.5,83.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      annotation(Diagram(graphics,                                                                                                    coordinateSystem(extent={{-140,
                -60},{120,120}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})), Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-102}},
              lineColor={255,0,0},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -54,68},{80,96}},                                                                                                 fontName=
                  "Arial",
              textString="Left Heart Elastance"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,6},{-42,28}},                                                                                                 fontName=
                  "Arial",
              textString="AtrialVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -86,-42},{-28,8}},                                                                                                fontName=
                  "Arial",
              textString="VentricularVolume"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -84,-80},{18,-10}},                                                                                               fontName=
                  "Arial",
              textString="AEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  -82,-110},{20,-40}},                                                                                              fontName=
                  "Arial",
              textString="VEt0 (atrial elasticity from 0 to 1)"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  40,32},{80,54}},                                                                                                  fontName=
                  "Arial",
              textString="AtrialPressure"),                                                                                                    Text(              lineColor=
                  {0,0,255},                                                                                                    fillColor=
                  {255,170,170},
                fillPattern=FillPattern.Solid,                                                                                                    extent={{
                  38,-24},{94,10}},                                                                                                 fontName=
                  "Arial",
              textString="VentricularPressure")},                                                                                    coordinateSystem(extent={{-140,
                -60},{120,120}},                                                                                                    preserveAspectRatio=false, initialScale=0.1, grid={2,2})));
    end LeftHeartElastance;

    model ElastanceTest
      LeftHeartElastance leftHeartElastance
        annotation (Placement(transformation(extent={{6,20},{84,86}})));
      RightHeartElastance rightHeartElastance
        annotation (Placement(transformation(extent={{24,-70},{100,14}})));
      Parts.modelInputsBlock modelInputsBlock(PTH(k=0))
        annotation (Placement(transformation(extent={{-130,50},{-78,88}})));
      Parts.Constant Constant(k=1)
        annotation (Placement(transformation(extent={{-66,-80},{-52,-66}})));
      Parts.Constant Constant1(k=1)
        annotation (Placement(transformation(extent={{-40,-58},{-26,-44}})));
      Parts.Constant Constant2(k=0)
        annotation (Placement(transformation(extent={{-82,16},{-68,30}})));
      Parts.Constant Constant3(k=0)
        annotation (Placement(transformation(extent={{-80,38},{-66,52}})));
      Modelica.Blocks.Sources.Ramp ramp(
        startTime=0,
        duration=200,
        offset=0.0001,
        height=200)
        annotation (Placement(transformation(extent={{-90,-36},{-70,-16}})));
    equation
      connect(modelInputsBlock.inputBusConnector, leftHeartElastance.controlBus)
        annotation (Line(
          points={{-83.72,69},{-24,69},{-24,82.04},{11.46,82.04}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(modelInputsBlock.inputBusConnector, rightHeartElastance.controlBus)
        annotation (Line(
          points={{-83.72,69},{-26,69},{-26,-0.933333},{39.7846,-0.933333}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(Constant1.y, rightHeartElastance.AEt0) annotation (Line(
          points={{-25.3,-50.86},{-13.65,-50.86},{-13.65,-62.5333},{36.277,
              -62.5333}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Constant.y, rightHeartElastance.VEt0) annotation (Line(
          points={{-51.3,-72.86},{-26.65,-72.86},{-26.65,-76.5333},{36.277,
              -76.5333}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Constant3.y, leftHeartElastance.AEt0) annotation (Line(
          points={{-65.3,45.14},{-15.65,45.14},{-15.65,38.48},{6.78005,38.48}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(Constant2.y, leftHeartElastance.VEt0) annotation (Line(
          points={{-67.3,23.14},{-20.65,23.14},{-20.65,28.58},{6.78005,28.58}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(ramp.y, rightHeartElastance.VentricularVolume) annotation (Line(
          points={{-69,-26},{-38,-26},{-38,-49.4667},{36.2769,-49.4667}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(rightHeartElastance.AtrialVolume, rightHeartElastance.VentricularVolume)
        annotation (Line(
          points={{36.2769,-33.6},{-12,-33.6},{-12,-49.4667},{36.2769,-49.4667}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(leftHeartElastance.VentricularVolume, rightHeartElastance.VentricularVolume)
        annotation (Line(
          points={{6.78,47.72},{-12,47.72},{-12,-49.4667},{36.2769,-49.4667}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(leftHeartElastance.AtrialVolume, rightHeartElastance.VentricularVolume)
        annotation (Line(
          points={{6.78,58.94},{-12,58.94},{-12,-49.4667},{36.2769,-49.4667}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics));
    end ElastanceTest;
  end Models;
  annotation(uses(Modelica(version="3.2"), HeamodynamicsDymolaLetiste(version=
            "1")),                          version="1", conversion(noneFromVersion=""), Diagram(graphics), Icon(graphics));
end HeamodynamicsDymola;
